{"goal":"ℤ.1 > ℤ.0","proof":["ℤ.1 > ℤ.0 = ℤ.0 < ℤ.1","not ℤ.0 < ℤ.1","ℤ.0 < ℤ.1 = ℤ.1.is_positive","not ℤ.1.is_positive"]}
{"goal":"gcd(a, ℤ.1) = ℤ.1","proof":["gcd(a, ℤ.1) = gcd(ℤ.1, a)","gcd(ℤ.1, a) != ℤ.1","gcd(ℤ.1, a) = ℤ.1"]}
{"goal":"denom_one_is_reduced","proof":["not ℤ.1 > ℤ.0 or gcd(a, ℤ.1) != ℤ.1 or is_reduced(a, ℤ.1)"]}
{"goal":"exists(k0: ℤ, k1: ℤ) { is_reduced(k0, k1) }","proof":["let s0: ℤ satisfy { true }","not is_reduced(s0, ℤ.1)","is_reduced(s0, ℤ.1)"]}
{"goal":"zero_num","proof":["not is_reduced(ℤ.0, ℤ.1) or ℚ.new(ℤ.0, ℤ.1).num = ℤ.0","ℚ.new(ℤ.0, ℤ.1).num != ℤ.0","is_reduced(ℤ.0, ℤ.1)"]}
{"goal":"zero_denom","proof":["not is_reduced(ℤ.0, ℤ.1) or ℚ.new(ℤ.0, ℤ.1).denom = ℤ.1","ℚ.new(ℤ.0, ℤ.1).denom != ℤ.1","is_reduced(ℤ.0, ℤ.1)"]}
{"goal":"r.denom > ℤ.0","proof":["not is_reduced(r.num, r.denom) or r.denom > ℤ.0","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"denom_nonzero","proof":["ℤ.0 > ℤ.0","not ℤ.0 < ℤ.0 or not ℤ.0 < ℤ.0","ℤ.0 > ℤ.0 = ℤ.0 < ℤ.0","ℤ.0 < ℤ.0"]}
{"goal":"denom_positive","proof":["not is_reduced(r.num, r.denom) or r.denom > ℤ.0","r.denom > ℤ.0 = ℤ.0 < r.denom","is_reduced(r.num, r.denom)","ℤ.0 < r.denom = r.denom.is_positive","not ℤ.0 < r.denom","not r.denom > ℤ.0","not is_reduced(r.num, r.denom)"]}
{"goal":"from_int_num","proof":["not is_reduced(n, ℤ.1) or ℚ.new(n, ℤ.1).num = n","ℚ.new(n, ℤ.1) = ℚ.from_int(n)","ℚ.new(n, ℤ.1).num != n","is_reduced(n, ℤ.1)"]}
{"goal":"from_int_denom","proof":["not is_reduced(n, ℤ.1) or ℚ.new(n, ℤ.1).denom = ℤ.1","ℚ.new(n, ℤ.1) = ℚ.from_int(n)","ℚ.new(n, ℤ.1).denom != ℤ.1","is_reduced(n, ℤ.1)"]}
{"goal":"a ⋅ d = b ⋅ c","proof":["not cross_equals(a, b, c, d) or c ⋅ b = a ⋅ d","c ⋅ b = b ⋅ c","c ⋅ b = a ⋅ d","c ⋅ b != a ⋅ d"]}
{"goal":"c ⋅ f = d ⋅ e","proof":["not cross_equals(c, d, e, f) or e ⋅ d = c ⋅ f","e ⋅ d = d ⋅ e","e ⋅ d = c ⋅ f","e ⋅ d != c ⋅ f"]}
{"goal":"a ⋅ d ⋅ f = b ⋅ c ⋅ f","proof":["b ⋅ c != a ⋅ d"]}
{"goal":"a ⋅ d ⋅ f = b ⋅ d ⋅ e","proof":["b ⋅ (c ⋅ f) = b ⋅ c ⋅ f","b ⋅ (d ⋅ e) = b ⋅ d ⋅ e"]}
{"goal":"a ⋅ f ⋅ d = b ⋅ e ⋅ d","proof":["b ⋅ (d ⋅ e) = b ⋅ d ⋅ e","b ⋅ (e ⋅ d) = b ⋅ e ⋅ d","f ⋅ (a ⋅ d) = f ⋅ a ⋅ d","e ⋅ d = d ⋅ e","f ⋅ (a ⋅ d) = a ⋅ d ⋅ f","f ⋅ a = a ⋅ f"]}
{"goal":"d != ℤ.0","proof":["not cross_equals(a, b, c, d) or ℤ.0 != d"]}
{"goal":"a ⋅ f = b ⋅ e","proof":["b ⋅ e ⋅ d != a ⋅ f ⋅ d or ℤ.0 = d or b ⋅ e = a ⋅ f"]}
{"goal":"cross_equals_trans","proof":["e ⋅ b != a ⋅ f or cross_equals(a, b, e, f) or ℤ.0 = f or ℤ.0 = b","e ⋅ b != a ⋅ f or cross_equals(a, b, e, f) or ℤ.0 = b or ℤ.0 = f","not cross_equals(c, d, e, f) or ℤ.0 != f","not cross_equals(a, b, c, d) or ℤ.0 != b","e ⋅ b = b ⋅ e","ℤ.0 != b","ℤ.0 != f","e ⋅ b = a ⋅ f","e ⋅ b != a ⋅ f"]}
{"goal":"ℚ.0 = ℚ.0","proof":[]}
{"goal":"gcd(a, b) != ℤ.0","proof":["gcd(a, b) != ℤ.0 or ℤ.0 = b"]}
{"goal":"exists(k0: ℤ) { k0 ⋅ gcd(a, b) = a }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { not x0.divides(x1) or s0(x0, x1) ⋅ x0 = x1 } and forall(x2: ℤ, x3: ℤ, x4: ℤ) { x2 ⋅ x3 != x4 or x3.divides(x4) } }","s0(gcd(a, b), a) ⋅ gcd(a, b) != a","not gcd(a, b).divides(a) or s0(gcd(a, b), a) ⋅ gcd(a, b) = a","not gcd(a, b).divides(a)","gcd(a, b) = gcd(b, a)","gcd(b, a).divides(a)"]}
{"goal":"exists(k0: ℤ) { k0 ⋅ gcd(a, b) = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { not x0.divides(x1) or s0(x0, x1) ⋅ x0 = x1 } and forall(x2: ℤ, x3: ℤ, x4: ℤ) { x2 ⋅ x3 != x4 or x3.divides(x4) } }","s0(gcd(a, b), b) ⋅ gcd(a, b) != b","not gcd(a, b).divides(b) or s0(gcd(a, b), b) ⋅ gcd(a, b) = b","not gcd(a, b).divides(b)","gcd(a, b).divides(b)"]}
{"goal":"b1 != ℤ.0","proof":["gcd(a, b) = gcd(b, a)","b1 ⋅ gcd(b, a) = b","ℤ.0 != b1 or b1 ⋅ gcd(b, a) = ℤ.0","b1 ⋅ gcd(b, a) = ℤ.0"]}
{"goal":"a ⋅ b = a ⋅ b1 ⋅ gcd(a, b)","proof":["a ⋅ (b1 ⋅ gcd(a, b)) = a ⋅ b1 ⋅ gcd(a, b)"]}
{"goal":"a ⋅ b = b ⋅ a1 ⋅ gcd(a, b)","proof":["b ⋅ (a1 ⋅ gcd(a, b)) = b ⋅ a1 ⋅ gcd(a, b)","a ⋅ b = b ⋅ a"]}
{"goal":"a ⋅ b1 ⋅ gcd(a, b) = b ⋅ a1 ⋅ gcd(a, b)","proof":["a ⋅ b1 ⋅ gcd(a, b) != a ⋅ b"]}
{"goal":"a ⋅ b1 = b ⋅ a1","proof":["a ⋅ b1 ⋅ gcd(a, b) != b ⋅ a1 ⋅ gcd(a, b) or gcd(a, b) = ℤ.0 or a ⋅ b1 = b ⋅ a1"]}
{"goal":"cross_equals(a1, b1, a, b)","proof":["a ⋅ b1 != a1 ⋅ b or cross_equals(a1, b1, a, b) or ℤ.0 = b or ℤ.0 = b1","a ⋅ b1 != a1 ⋅ b or cross_equals(a1, b1, a, b) or ℤ.0 = b1 or ℤ.0 = b","a1 ⋅ b = b ⋅ a1","a ⋅ b1 != a1 ⋅ b","a ⋅ b1 = a1 ⋅ b"]}
{"goal":"gcd(a1, b1) = ℤ.1","proof":["a1 ⋅ gcd(a, b) != a or b1 ⋅ gcd(a, b) != b or gcd(a1, b1) = ℤ.1 or gcd(a, b) = ℤ.0","a1 ⋅ gcd(a, b) != a or b1 ⋅ gcd(a, b) != b or gcd(a, b) = ℤ.0 or gcd(a1, b1) = ℤ.1","gcd(a, b) != ℤ.0 or ℤ.0 = b","gcd(a, b) != ℤ.0","b1 ⋅ gcd(a, b) != b or a1 ⋅ gcd(a, b) != a or gcd(a, b) = ℤ.0"]}
{"goal":"r.num = a1","proof":["not b1 > ℤ.0 or gcd(a1, b1) != ℤ.1 or is_reduced(a1, b1)","ℚ.new(a1, b1).num != a1","not is_reduced(a1, b1) or ℚ.new(a1, b1).num = a1","is_reduced(a1, b1)","not is_reduced(a1, b1)"]}
{"goal":"r.denom = b1","proof":["not b1 > ℤ.0 or gcd(a1, b1) != ℤ.1 or is_reduced(a1, b1)","ℚ.new(a1, b1).denom != b1","not is_reduced(a1, b1) or ℚ.new(a1, b1).denom = b1","is_reduced(a1, b1)","not is_reduced(a1, b1)"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":[]}
{"goal":"b1 < ℤ.0","proof":["b1 > ℤ.0 or b1 < ℤ.0 or ℤ.0 = b1"]}
{"goal":"-b1 > ℤ.0","proof":["(ℤ.0 - b1).is_positive = b1 < ℤ.0","-b1 > ℤ.0 = ℤ.0 < -b1","ℤ.0 < -b1 = (-b1).is_positive","ℤ.0 - b1 = -b1"]}
{"goal":"gcd(-a1, -b1) = ℤ.1","proof":["ℤ.from_nat(lib(nat.prime_number).gcd(lib(int.int_base).abs(-b1), lib(int.int_base).abs(-a1))) = gcd(-b1, -a1)","ℤ.from_nat(lib(nat.prime_number).gcd(lib(int.int_base).abs(b1), lib(int.int_base).abs(a1))) = gcd(b1, a1)","gcd(-b1, -a1) = gcd(-a1, -b1)","gcd(b1, a1) = gcd(a1, b1)","lib(int.int_base).abs(--a1) = lib(int.int_base).abs(-a1)","lib(int.int_base).abs(-b1) = lib(int.int_base).abs(b1)","--a1 = a1"]}
{"goal":"r.num = -a1","proof":["not -b1 > ℤ.0 or gcd(-a1, -b1) != ℤ.1 or is_reduced(-a1, -b1)","not is_reduced(-a1, -b1) or ℚ.new(-a1, -b1).num = -a1","ℚ.new(-a1, -b1).num != -a1","is_reduced(-a1, -b1)","not is_reduced(-a1, -b1)"]}
{"goal":"r.denom = -b1","proof":["not -b1 > ℤ.0 or gcd(-a1, -b1) != ℤ.1 or is_reduced(-a1, -b1)","not is_reduced(-a1, -b1) or ℚ.new(-a1, -b1).denom = -b1","ℚ.new(-a1, -b1).denom != -b1","is_reduced(-a1, -b1)","not is_reduced(-a1, -b1)"]}
{"goal":"a ⋅ -b1 = -a1 ⋅ b","proof":["not cross_equals(a1, b1, a, b) or a ⋅ b1 = a1 ⋅ b","a ⋅ -b1 = -(a ⋅ b1)","-a1 ⋅ b = -(a1 ⋅ b)","a ⋅ -b1 != -(a1 ⋅ b)","-(a ⋅ b1) != -(a1 ⋅ b)","a ⋅ b1 = a1 ⋅ b","a ⋅ b1 != a1 ⋅ b"]}
{"goal":"cross_equals(-a1, -b1, a, b)","proof":["a ⋅ -b1 != -a1 ⋅ b or cross_equals(-a1, -b1, a, b) or ℤ.0 = b or -b1 = ℤ.0","a ⋅ -b1 != -a1 ⋅ b or cross_equals(-a1, -b1, a, b) or -b1 = ℤ.0 or ℤ.0 = b","-b1 = ℤ.0","not ℤ.0 < ℤ.0 or not ℤ.0 < ℤ.0","-b1 > ℤ.0 = ℤ.0 < -b1","ℤ.0 < -b1","ℤ.0 < ℤ.0"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":[]}
{"goal":"exists(k0: ℚ) { if b = ℤ.0 { k0 = ℚ.0 } else { cross_equals(k0.num, k0.denom, a, b) } }","proof":["let s0: ℚ satisfy { cross_equals(s0.num, s0.denom, a, b) or ℤ.0 = b }","not cross_equals(s0.num, s0.denom, a, b) or ℤ.0 = b","ℚ.0 != ℚ.0 or ℤ.0 != b","ℤ.0 != b"]}
{"goal":"gcd(r1.num, r1.denom) = ℤ.1","proof":["not is_reduced(r1.num, r1.denom) or gcd(r1.num, r1.denom) = ℤ.1","not is_reduced(r1.num, r1.denom)","is_reduced(r1.num, r1.denom)"]}
{"goal":"r1.denom.divides(r1.num ⋅ r2.denom)","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num ⋅ r1.denom = r1.num ⋅ r2.denom","r2.num ⋅ r1.denom != r1.num ⋅ r2.denom or r1.denom.divides(r1.num ⋅ r2.denom)","r2.num ⋅ r1.denom != r1.num ⋅ r2.denom"]}
{"goal":"r1.denom.divides(r2.denom)","proof":["not r1.denom.divides(r1.num ⋅ r2.denom) or gcd(r1.denom, r1.num) != ℤ.1 or r1.denom.divides(r2.denom)","gcd(r1.denom, r1.num) = gcd(r1.num, r1.denom)","gcd(r1.denom, r1.num) != ℤ.1","gcd(r1.denom, r1.num) = ℤ.1"]}
{"goal":"abs(r1.denom).divides(abs(r2.denom))","proof":["not r1.denom.divides(r2.denom) or abs(r1.denom).divides(abs(r2.denom))"]}
{"goal":"gcd(r2.num, r2.denom) = ℤ.1","proof":["not is_reduced(r2.num, r2.denom) or gcd(r2.num, r2.denom) = ℤ.1","not is_reduced(r2.num, r2.denom)","is_reduced(r2.num, r2.denom)"]}
{"goal":"r2.denom.divides(r2.num ⋅ r1.denom)","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num ⋅ r1.denom = r1.num ⋅ r2.denom","r2.num ⋅ r1.denom != r1.num ⋅ r2.denom or r2.denom.divides(r2.num ⋅ r1.denom)","r2.num ⋅ r1.denom != r1.num ⋅ r2.denom"]}
{"goal":"r2.denom.divides(r1.denom)","proof":["not r2.denom.divides(r2.num ⋅ r1.denom) or gcd(r2.denom, r2.num) != ℤ.1 or r2.denom.divides(r1.denom)","gcd(r2.denom, r2.num) = gcd(r2.num, r2.denom)","gcd(r2.denom, r2.num) != ℤ.1","gcd(r2.denom, r2.num) = ℤ.1"]}
{"goal":"abs(r2.denom).divides(abs(r1.denom))","proof":["not r2.denom.divides(r1.denom) or abs(r2.denom).divides(abs(r1.denom))"]}
{"goal":"abs(r1.denom) = abs(r2.denom)","proof":["not abs(r2.denom).divides(abs(r1.denom)) or not abs(r1.denom).divides(abs(r2.denom)) or abs(r2.denom) = abs(r1.denom)"]}
{"goal":"r1.denom.is_positive","proof":["r1.denom.is_positive"]}
{"goal":"r2.denom.is_positive","proof":["r2.denom.is_positive"]}
{"goal":"r1.denom = r2.denom","proof":["let s0: ℕ satisfy { true }","lib(int.int_base).sub_nat(r1.denom.pos_part + s0, r1.denom.neg_part + s0) = lib(int.int_base).sub_nat(r1.denom.pos_part, r1.denom.neg_part)","lib(int.int_base).sub_nat(r2.denom.pos_part + s0, r2.denom.neg_part + s0) = lib(int.int_base).sub_nat(r2.denom.pos_part, r2.denom.neg_part)","lib(int.int_base).sub_nat(r1.denom.pos_part, r1.denom.neg_part) = r1.denom","lib(int.int_base).sub_nat(r2.denom.pos_part, r2.denom.neg_part) = r2.denom","not r1.denom.is_positive or r1.denom.neg_part = ℕ.0","not r2.denom.is_positive or r2.denom.neg_part = ℕ.0","lib(int.int_base).sub_nat(r1.denom.pos_part, ℕ.0) = ℤ.from_nat(r1.denom.pos_part)","lib(int.int_base).sub_nat(r2.denom.pos_part, ℕ.0) = ℤ.from_nat(r2.denom.pos_part)","lib(int.int_base).abs(ℤ.from_nat(r1.denom.pos_part)) = r1.denom.pos_part","lib(int.int_base).abs(ℤ.from_nat(r2.denom.pos_part)) = r2.denom.pos_part","r2.denom.neg_part = ℕ.0","r1.denom.neg_part = ℕ.0"]}
{"goal":"r1.num ⋅ r2.denom = r2.num ⋅ r1.denom","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num ⋅ r1.denom = r1.num ⋅ r2.denom"]}
{"goal":"r1.num ⋅ r2.denom = r2.num ⋅ r2.denom","proof":["r2.num ⋅ r1.denom != r1.num ⋅ r2.denom"]}
{"goal":"r2.denom != ℤ.0","proof":["ℤ.0.is_positive"]}
{"goal":"r1.num = r2.num","proof":["r2.num ⋅ r2.denom != r1.num ⋅ r2.denom or r2.denom = ℤ.0 or r2.num = r1.num"]}
{"goal":"cross_eq_imp_eq","proof":["ℚ.new(r1.num, r1.denom) = r1","ℚ.new(r2.num, r2.denom) = r2"]}
{"goal":"reduce_idempotent","proof":["cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom) or r.denom = ℤ.0","not cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom) or reduce(r.num, r.denom) = r","r.denom != ℤ.0","not cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom)"]}
{"goal":"r.denom > ℤ.0","proof":["not is_reduced(r.num, r.denom) or r.denom > ℤ.0","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"gcd(-r.num, r.denom) = gcd(r.num, r.denom)","proof":["ℤ.from_nat(lib(nat.prime_number).gcd(lib(int.int_base).abs(-r.num), lib(int.int_base).abs(r.denom))) = gcd(-r.num, r.denom)","ℤ.from_nat(lib(nat.prime_number).gcd(lib(int.int_base).abs(r.num), lib(int.int_base).abs(r.denom))) = gcd(r.num, r.denom)","lib(int.int_base).abs(-r.num) = lib(int.int_base).abs(r.num)","ℤ.from_nat(lib(nat.prime_number).gcd(lib(int.int_base).abs(r.num), lib(int.int_base).abs(r.denom))) != gcd(-r.num, r.denom)"]}
{"goal":"neg_is_reduced","proof":["not r.denom > ℤ.0 or gcd(-r.num, r.denom) != ℤ.1 or is_reduced(-r.num, r.denom)","not is_reduced(r.num, r.denom) or gcd(r.num, r.denom) = ℤ.1","is_reduced(r.num, r.denom)","gcd(-r.num, r.denom) != ℤ.1","gcd(r.num, r.denom) != ℤ.1"]}
{"goal":"neg_num","proof":["ℚ.new(-r.num, r.denom) = -r","not is_reduced(-r.num, r.denom) or ℚ.new(-r.num, r.denom).num = -r.num","is_reduced(-r.num, r.denom)","ℚ.new(-r.num, r.denom).num != -r.num"]}
{"goal":"neg_denom","proof":["ℚ.new(-r.num, r.denom) = -r","not is_reduced(-r.num, r.denom) or ℚ.new(-r.num, r.denom).denom = r.denom","is_reduced(-r.num, r.denom)","ℚ.new(-r.num, r.denom).denom != r.denom"]}
{"goal":"a + ℚ.0 = reduce(a.num ⋅ ℤ.1 + ℤ.0 ⋅ a.denom, a.denom ⋅ ℤ.1)","proof":["reduce(a.num ⋅ ℚ.0.denom + ℚ.0.num ⋅ a.denom, a.denom ⋅ ℚ.0.denom) = a + ℚ.0","a.num ⋅ ℤ.1 = ℤ.1 ⋅ a.num","ℤ.1 ⋅ a.num + ℤ.0 ⋅ a.denom = ℤ.0 ⋅ a.denom + ℤ.1 ⋅ a.num","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int(ℤ.0).num = ℤ.0","ℤ.1 ⋅ a.num = a.num","(ℤ.0 ⋅ a.denom + a.num ⋅ ℤ.1) ⋅ ℤ.1 = ℤ.0 ⋅ a.denom + a.num ⋅ ℤ.1","ℤ.0 ⋅ a.denom = ℤ.0","a.num ⋅ ℤ.1 + ℤ.0 = a.num ⋅ ℤ.1"]}
{"goal":"a + ℚ.0 = reduce(a.num, a.denom)","proof":["a.denom ⋅ ℤ.1 = ℤ.1 ⋅ a.denom","a.num ⋅ ℤ.1 = ℤ.1 ⋅ a.num","ℤ.1 ⋅ a.denom = a.denom","ℤ.1 ⋅ a.num = a.num","ℤ.0 ⋅ a.denom = ℤ.0","a.num ⋅ ℤ.1 + ℤ.0 = a.num ⋅ ℤ.1"]}
{"goal":"add_zero_right","proof":["reduce(a.num, a.denom) = a"]}
{"goal":"add_zero_left","proof":["reduce(a.num ⋅ ℚ.0.denom + ℚ.0.num ⋅ a.denom, a.denom ⋅ ℚ.0.denom) = a + ℚ.0","reduce(ℚ.0.num ⋅ a.denom + a.num ⋅ ℚ.0.denom, ℚ.0.denom ⋅ a.denom) = ℚ.0 + a","a.num ⋅ ℚ.0.denom + ℚ.0.num ⋅ a.denom = ℚ.0.num ⋅ a.denom + a.num ⋅ ℚ.0.denom","a + ℚ.0 = a","ℤ.1 ⋅ a.denom = a.denom","a.denom ⋅ ℤ.1 = a.denom"]}
{"goal":"add_comm","proof":["reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom) = a + b","reduce(b.num ⋅ a.denom + a.num ⋅ b.denom, b.denom ⋅ a.denom) = b + a","b.denom ⋅ a.denom = a.denom ⋅ b.denom","b.num ⋅ a.denom + a.num ⋅ b.denom = a.num ⋅ b.denom + b.num ⋅ a.denom"]}
{"goal":"from_int_cancel","proof":["lib(int.int_base).sub_nat(a.pos_part, a.neg_part) = a","lib(int.int_base).sub_nat(b.pos_part, b.neg_part) = b","ℚ.from_int(lib(int.int_base).sub_nat(a.pos_part, a.neg_part)).num = lib(int.int_base).sub_nat(a.pos_part, a.neg_part)","ℚ.from_int(lib(int.int_base).sub_nat(b.pos_part, b.neg_part)).num = lib(int.int_base).sub_nat(b.pos_part, b.neg_part)"]}
{"goal":"mul_comm","proof":["reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) = a ⋅ b","reduce(b.num ⋅ a.num, b.denom ⋅ a.denom) = b ⋅ a","b.denom ⋅ a.denom = a.denom ⋅ b.denom","b.num ⋅ a.num = a.num ⋅ b.num"]}
{"goal":"ℚ.1 = ℚ.new(ℤ.1, ℤ.1)","proof":["ℚ.new(ℤ.1, ℤ.1) = ℚ.from_int(ℤ.1)","ℚ.from_int(ℤ.1) != ℚ.1"]}
{"goal":"ℚ.from_int(-ℤ.1) = ℚ.new(-ℤ.1, ℤ.1)","proof":["ℚ.new(-ℤ.1, ℤ.1) = ℚ.from_int(-ℤ.1)"]}
{"goal":"rat_neg_one","proof":["(-ℚ.from_int(ℤ.1)).num = -ℚ.from_int(ℤ.1).num","reduce((-ℚ.1).num, (-ℚ.1).denom) = -ℚ.1","reduce(ℚ.new(-ℤ.1, ℤ.1).num, ℚ.new(-ℤ.1, ℤ.1).denom) = ℚ.new(-ℤ.1, ℤ.1)","(-ℚ.1).denom = ℚ.1.denom","ℚ.new(ℤ.1, ℤ.1) = ℚ.from_int(ℤ.1)","ℚ.from_int(-ℤ.1).denom = ℤ.1","ℚ.from_int(ℤ.1).denom = ℤ.1","ℚ.from_int(-ℤ.1).num = -ℤ.1","ℚ.from_int(ℤ.1).num = ℤ.1"]}
{"goal":"r ⋅ ℚ.from_int(-ℤ.1) = -r","proof":["reduce(r.num ⋅ ℚ.from_int(-ℤ.1).num, r.denom ⋅ ℚ.from_int(-ℤ.1).denom) = r ⋅ ℚ.from_int(-ℤ.1)","r.num ⋅ -ℤ.1 = -(r.num ⋅ ℤ.1)","(-r).num = -r.num","reduce((-r).num, (-r).denom) = -r","(-r).denom = r.denom","ℚ.from_int(-ℤ.1).denom = ℤ.1","ℚ.from_int(-ℤ.1).num = -ℤ.1","r.denom ⋅ ℤ.1 = r.denom","r.num ⋅ ℤ.1 = r.num"]}
{"goal":"mul_neg_one_right","proof":[]}
{"goal":"mul_neg_one_left","proof":["r ⋅ -ℚ.1 = -r","r ⋅ -ℚ.1 = -ℚ.1 ⋅ r"]}
{"goal":"r ⋅ ℚ.from_int(ℤ.1) = r","proof":["reduce(ℚ.from_int(ℤ.1).num ⋅ r.num, ℚ.from_int(ℤ.1).denom ⋅ r.denom) = ℚ.from_int(ℤ.1) ⋅ r","r ⋅ ℚ.from_int(ℤ.1) = ℚ.from_int(ℤ.1) ⋅ r","reduce(r.num, r.denom) = r","ℚ.from_int(ℤ.1).denom = ℤ.1","ℚ.from_int(ℤ.1).num = ℤ.1","ℤ.1 ⋅ r.denom = r.denom","ℤ.1 ⋅ r.num = r.num"]}
{"goal":"mul_one_right","proof":[]}
{"goal":"mul_one_left","proof":["r ⋅ ℚ.1 = ℚ.1 ⋅ r","r ⋅ ℚ.1 != r","r ⋅ ℚ.1 = r"]}
{"goal":"reciprocal_by_div","proof":["ℚ.1 ⋅ a.reciprocal = ℚ.1 / a","ℚ.1 ⋅ a.reciprocal != a.reciprocal","ℚ.1 ⋅ a.reciprocal = a.reciprocal"]}
{"goal":"div_by_reciprocal","proof":["p ⋅ q.reciprocal = p / q","ℚ.1 / q = q.reciprocal"]}
{"goal":"mul_int_eq_int_mul","proof":["reduce(ℚ.0.num ⋅ ℚ.from_int(a ⋅ b).denom + ℚ.from_int(a ⋅ b).num ⋅ ℚ.0.denom, ℚ.0.denom ⋅ ℚ.from_int(a ⋅ b).denom) = ℚ.0 + ℚ.from_int(a ⋅ b)","reduce(ℚ.from_int(b).num ⋅ ℚ.from_int(a).num, ℚ.from_int(b).denom ⋅ ℚ.from_int(a).denom) = ℚ.from_int(b) ⋅ ℚ.from_int(a)","ℚ.from_int(b) ⋅ ℚ.from_int(a) = ℚ.from_int(a) ⋅ ℚ.from_int(b)","b ⋅ a = a ⋅ b","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.0 + ℚ.from_int(a ⋅ b) = ℚ.from_int(a ⋅ b)","ℚ.from_int(a ⋅ b).denom = ℤ.1","ℚ.from_int(a).denom = ℤ.1","ℚ.from_int(b).denom = ℤ.1","ℚ.from_int(a ⋅ b).num = a ⋅ b","ℚ.from_int(a).num = a","ℚ.from_int(b).num = b","ℚ.from_int(ℤ.0).num = ℤ.0","ℤ.1 ⋅ ℚ.from_int(a ⋅ b).denom = ℚ.from_int(a ⋅ b).denom","ℤ.1 ⋅ ℚ.from_int(a).denom = ℚ.from_int(a).denom","a ⋅ b ⋅ ℤ.1 = a ⋅ b","ℤ.0 ⋅ ℤ.1 = ℤ.0","ℤ.0 + a ⋅ b = a ⋅ b"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or ℤ.0 = b","not cross_equals(reduce(a, b).num, r.denom, a, b)","cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)"]}
{"goal":"r.num ⋅ b = a ⋅ r.denom","proof":["not cross_equals(r.num, r.denom, a, b) or a ⋅ r.denom = r.num ⋅ b"]}
{"goal":"gcd(r.num, r.denom) = ℤ.1","proof":["not is_reduced(r.num, r.denom) or gcd(r.num, r.denom) = ℤ.1","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"r.denom.divides(r.num ⋅ b)","proof":["a ⋅ r.denom != r.num ⋅ b or r.denom.divides(r.num ⋅ b)"]}
{"goal":"r.denom.divides(b)","proof":["not r.denom.divides(r.num ⋅ b) or gcd(r.denom, r.num) != ℤ.1 or r.denom.divides(b)","gcd(r.denom, r.num) = gcd(r.num, r.denom)","gcd(r.denom, r.num) != ℤ.1","gcd(r.denom, r.num) = ℤ.1"]}
{"goal":"exists(k0: ℤ) { r.denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { not x0.divides(x1) or s0(x0, x1) ⋅ x0 = x1 } and forall(x2: ℤ, x3: ℤ, x4: ℤ) { x2 ⋅ x3 != x4 or x3.divides(x4) } }","r.denom ⋅ s0(r.denom, b) != b","not r.denom.divides(b) or s0(r.denom, b) ⋅ r.denom = b","s0(r.denom, b) ⋅ r.denom = r.denom ⋅ s0(r.denom, b)","s0(r.denom, b) ⋅ r.denom = b"]}
{"goal":"r.num ⋅ b ⋅ d = a ⋅ r.denom ⋅ d","proof":["a ⋅ r.denom != r.num ⋅ b"]}
{"goal":"r.num ⋅ d ⋅ b = a ⋅ b","proof":["a ⋅ (r.denom ⋅ d) = a ⋅ r.denom ⋅ d","d ⋅ (r.num ⋅ b) = d ⋅ r.num ⋅ b","d ⋅ (r.num ⋅ b) = r.num ⋅ b ⋅ d","d ⋅ r.num = r.num ⋅ d"]}
{"goal":"r.num ⋅ d = a","proof":["r.num ⋅ d ⋅ b != a ⋅ b or ℤ.0 = b or r.num ⋅ d = a"]}
{"goal":"unreduce_right","proof":["reduce(a, b).denom ⋅ d != b or reduce(a, b).num ⋅ d != a","reduce(a, b).denom ⋅ d = b","reduce(a, b).num ⋅ d = a","reduce(a, b).num ⋅ d != a"]}
{"goal":"exists(k0: ℤ) { reduce(a, b).num ⋅ k0 = a and reduce(a, b).denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(a, b).denom ⋅ s0(a, b) != b or reduce(a, b).num ⋅ s0(a, b) != a","reduce(a, b).denom ⋅ s0(a, b) = b or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a","reduce(a, b).denom ⋅ s0(a, b) = b"]}
{"goal":"unreduce_left","proof":["let s0: ℤ satisfy { reduce(a, b).num ⋅ s0 = a and reduce(a, b).denom ⋅ s0 = b }","s0 ⋅ reduce(a, b).denom != b or s0 ⋅ reduce(a, b).num != a","s0 ⋅ reduce(a, b).denom = reduce(a, b).denom ⋅ s0","s0 ⋅ reduce(a, b).num = reduce(a, b).num ⋅ s0","s0 ⋅ reduce(a, b).denom = b","s0 ⋅ reduce(a, b).num = a","s0 ⋅ reduce(a, b).num != a"]}
{"goal":"mul_int_right","proof":["reduce(ℚ.from_int(n).num ⋅ r.num, ℚ.from_int(n).denom ⋅ r.denom) = ℚ.from_int(n) ⋅ r","r ⋅ ℚ.from_int(n) = ℚ.from_int(n) ⋅ r","n ⋅ r.num = r.num ⋅ n","ℚ.from_int(n).denom = ℤ.1","ℚ.from_int(n).num = n","ℤ.1 ⋅ r.denom = r.denom"]}
{"goal":"mul_int_left","proof":["reduce(r.num ⋅ n, r.denom) = r ⋅ ℚ.from_int(n)","r ⋅ ℚ.from_int(n) = ℚ.from_int(n) ⋅ r","n ⋅ r.num = r.num ⋅ n","reduce(r.num ⋅ n, r.denom) != ℚ.from_int(n) ⋅ r"]}
{"goal":"b != ℤ.0","proof":["cross_equals(a, ℤ.0, c, d)","not cross_equals(a, ℤ.0, c, d) or ℤ.0 != ℤ.0"]}
{"goal":"d != ℤ.0","proof":["not cross_equals(a, b, c, d) or ℤ.0 != d"]}
{"goal":"cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or ℤ.0 = b"]}
{"goal":"cross_equals(rab.num, rab.denom, a, b)","proof":[]}
{"goal":"cross_equals(rab.num, rab.denom, c, d)","proof":["not cross_equals(rab.num, rab.denom, a, b) or not cross_equals(a, b, c, d) or cross_equals(rab.num, rab.denom, c, d)","not cross_equals(rab.num, rab.denom, a, b) or not cross_equals(a, b, c, d)"]}
{"goal":"cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d)","proof":["cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d) or ℤ.0 = d"]}
{"goal":"cross_equals(rcd.num, rcd.denom, c, d)","proof":[]}
{"goal":"cross_equals(rab.num, rab.denom, rcd.num, rcd.denom)","proof":["not cross_equals(rab.num, rab.denom, c, d) or not cross_equals(c, d, rcd.num, rcd.denom) or cross_equals(rab.num, rab.denom, rcd.num, rcd.denom)","c ⋅ rcd.denom != rcd.num ⋅ d or cross_equals(c, d, rcd.num, rcd.denom) or rcd.denom = ℤ.0 or ℤ.0 = d","c ⋅ rcd.denom != rcd.num ⋅ d or cross_equals(c, d, rcd.num, rcd.denom) or ℤ.0 = d or rcd.denom = ℤ.0","not cross_equals(rcd.num, rcd.denom, c, d) or c ⋅ rcd.denom = rcd.num ⋅ d","rcd.denom != ℤ.0","not cross_equals(c, d, rcd.num, rcd.denom) or not cross_equals(rab.num, rab.denom, c, d)","not cross_equals(c, d, rcd.num, rcd.denom)","c ⋅ rcd.denom = rcd.num ⋅ d","c ⋅ rcd.denom != rcd.num ⋅ d"]}
{"goal":"rab = rcd","proof":["not cross_equals(rab.num, rab.denom, rcd.num, rcd.denom) or rcd = rab"]}
{"goal":"cross_eq_imp_reduce_eq","proof":[]}
{"goal":"cross_equals(a, b, reduce(a, b).num, reduce(a, b).denom)","proof":["a ⋅ reduce(a, b).denom != reduce(a, b).num ⋅ b or cross_equals(a, b, reduce(a, b).num, reduce(a, b).denom) or reduce(a, b).denom = ℤ.0 or ℤ.0 = b","a ⋅ reduce(a, b).denom != reduce(a, b).num ⋅ b or cross_equals(a, b, reduce(a, b).num, reduce(a, b).denom) or ℤ.0 = b or reduce(a, b).denom = ℤ.0","cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or ℤ.0 = b","not cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or a ⋅ reduce(a, b).denom = reduce(a, b).num ⋅ b","reduce(a, b).denom != ℤ.0","a ⋅ reduce(a, b).denom != reduce(a, b).num ⋅ b","cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)"]}
{"goal":"cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or ℤ.0 = b"]}
{"goal":"cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d)","proof":["cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d) or ℤ.0 = d"]}
{"goal":"cross_equals(reduce(a, b).num, reduce(a, b).denom, reduce(c, d).num, reduce(c, d).denom)","proof":["not cross_equals(reduce(a, b).num, reduce(a, b).denom, reduce(a, b).num, reduce(c, d).denom)","reduce(a, b).num ⋅ reduce(a, b).denom != reduce(a, b).num ⋅ reduce(a, b).denom or cross_equals(reduce(a, b).num, reduce(a, b).denom, reduce(a, b).num, reduce(a, b).denom) or reduce(a, b).denom = ℤ.0 or reduce(a, b).denom = ℤ.0","reduce(a, b).denom != ℤ.0","not cross_equals(reduce(a, b).num, reduce(a, b).denom, reduce(a, b).num, reduce(a, b).denom)"]}
{"goal":"reduce_eq_imp_cross_eq","proof":["not cross_equals(a, b, reduce(a, b).num, reduce(a, b).denom) or not cross_equals(reduce(a, b).num, reduce(a, b).denom, c, d) or cross_equals(a, b, c, d)","cross_equals(reduce(c, d).num, reduce(a, b).denom, c, d)","not cross_equals(reduce(a, b).num, reduce(a, b).denom, c, d) or not cross_equals(a, b, reduce(a, b).num, reduce(a, b).denom)","cross_equals(reduce(a, b).num, reduce(a, b).denom, c, d)","not cross_equals(reduce(a, b).num, reduce(a, b).denom, c, d)"]}
{"goal":"reduce(a, -b) = reduce(-a, b)","proof":["-b != ℤ.0 or reduce(a, -b) = ℚ.0","ℤ.0 != ℤ.0 or reduce(-a, ℤ.0) = ℚ.0","-b = ℤ.0","reduce(-a, ℤ.0) != reduce(a, -b)","reduce(-a, ℤ.0) = ℚ.0","reduce(a, -b) != ℚ.0"]}
{"goal":"a ⋅ b = -b ⋅ -a","proof":["b ⋅ -a = -(b ⋅ a)","-b ⋅ -a = -(b ⋅ -a)","-(b ⋅ -a) != a ⋅ b","--(b ⋅ a) != a ⋅ b","a ⋅ b = b ⋅ a","--(b ⋅ a) = b ⋅ a"]}
{"goal":"cross_equals(a, -b, -a, b)","proof":["-a ⋅ -b != a ⋅ b or cross_equals(a, -b, -a, b) or ℤ.0 = b or -b = ℤ.0","-a ⋅ -b != a ⋅ b or cross_equals(a, -b, -a, b) or -b = ℤ.0 or ℤ.0 = b","-a ⋅ -b = -b ⋅ -a","ℤ.0 - b != ℤ.0 or ℤ.0 = b","ℤ.0 - b = -b","ℤ.0 - b != ℤ.0","-b != ℤ.0","-a ⋅ -b = a ⋅ b","-a ⋅ -b != a ⋅ b"]}
{"goal":"reduce_change_neg","proof":["not cross_equals(a, -b, -a, b) or reduce(a, -b) = reduce(-a, b)"]}
{"goal":"reduce(a, b) = ℚ.0","proof":["reduce(a, ℤ.0) != ℚ.0","ℤ.0 != ℤ.0 or reduce(a, ℤ.0) = ℚ.0"]}
{"goal":"reduce(a ⋅ c, b) = ℚ.0","proof":["ℤ.0 != b or reduce(a ⋅ c, b) = ℚ.0"]}
{"goal":"reduce(a, b) ⋅ ℚ.from_int(c) = reduce(a ⋅ c, b)","proof":["reduce(a ⋅ c, b) != ℚ.0 ⋅ ℚ.from_int(c)","ℚ.0 ⋅ ℚ.from_int(c) != ℚ.0","ℚ.from_int(ℤ.0) ⋅ ℚ.from_int(c) = ℚ.from_int(ℤ.0 ⋅ c)","ℚ.new(b, ℤ.1) = ℚ.from_int(b)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.new(b, ℤ.1) = ℚ.0","ℚ.from_int(b) = ℚ.0","ℤ.0 ⋅ c = ℤ.0","ℚ.new(ℤ.0, ℤ.1) ⋅ ℚ.from_int(c) != ℚ.0","ℚ.from_int(ℤ.0) ⋅ ℚ.from_int(c) != ℚ.0","ℚ.from_int(ℤ.0) = ℚ.0","ℚ.from_int(ℤ.0 ⋅ c) != ℚ.0"]}
{"goal":"r ⋅ ℚ.from_int(c) = reduce(r.num ⋅ c, r.denom)","proof":["reduce(r.num ⋅ c, r.denom) = r ⋅ ℚ.from_int(c)"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":["reduce(r.num, r.denom) != reduce(a, b) or cross_equals(r.num, r.denom, a, b) or r.denom = ℤ.0 or ℤ.0 = b","reduce(r.num, r.denom) = r","r.denom != ℤ.0","reduce(r.num, r.denom) = reduce(a, b)","reduce(r.num, r.denom) != reduce(a, b)"]}
{"goal":"r.num ⋅ b = r.denom ⋅ a","proof":["not cross_equals(r.num, r.denom, a, b) or a ⋅ r.denom = r.num ⋅ b","a ⋅ r.denom = r.denom ⋅ a","a ⋅ r.denom = r.num ⋅ b","a ⋅ r.denom != r.num ⋅ b"]}
{"goal":"r.num ⋅ c ⋅ b = r.denom ⋅ (a ⋅ c)","proof":["c ⋅ (r.num ⋅ b) = c ⋅ r.num ⋅ b","r.denom ⋅ (a ⋅ c) = r.denom ⋅ a ⋅ c","c ⋅ (r.denom ⋅ a) = r.denom ⋅ a ⋅ c","c ⋅ r.num = r.num ⋅ c"]}
{"goal":"reduce(r.num ⋅ c, r.denom) = reduce(a ⋅ c, b)","proof":["a ⋅ c ⋅ r.denom != r.num ⋅ c ⋅ b or cross_equals(r.num ⋅ c, r.denom, a ⋅ c, b) or ℤ.0 = b or r.denom = ℤ.0","a ⋅ c ⋅ r.denom != r.num ⋅ c ⋅ b or cross_equals(r.num ⋅ c, r.denom, a ⋅ c, b) or r.denom = ℤ.0 or ℤ.0 = b","not cross_equals(r.num ⋅ c, r.denom, a ⋅ c, b) or reduce(r.num ⋅ c, r.denom) = reduce(a ⋅ c, b)","r.denom ⋅ (a ⋅ c) = a ⋅ c ⋅ r.denom","r.denom != ℤ.0","a ⋅ c ⋅ r.denom = r.num ⋅ c ⋅ b","not cross_equals(r.num ⋅ c, r.denom, a ⋅ c, b)","cross_equals(r.num ⋅ c, r.denom, a ⋅ c, b)"]}
{"goal":"reduce(a, b) ⋅ ℚ.from_int(c) = reduce(a ⋅ c, b)","proof":[]}
{"goal":"mul_reduced_int_right","proof":[]}
{"goal":"mul_reduced_int_left","proof":["reduce(a, b) ⋅ ℚ.from_int(c) = reduce(a ⋅ c, b)","reduce(a, b) ⋅ ℚ.from_int(c) = ℚ.from_int(c) ⋅ reduce(a, b)","a ⋅ c = c ⋅ a","ℚ.from_int(c) ⋅ reduce(a, b) != reduce(a ⋅ c, b)"]}
{"goal":"a.reciprocal = reduce(a.denom, a.num)","proof":["reduce(a.denom, a.num) = a.reciprocal"]}
{"goal":"(-a).reciprocal = reduce(a.denom, -a.num)","proof":["reduce((-a).denom, (-a).num) = (-a).reciprocal","(-a).num = -a.num","(-a).denom = a.denom"]}
{"goal":"(-a).reciprocal = reduce(-a.denom, a.num)","proof":["reduce(a.denom, -a.num) = reduce(-a.denom, a.num)"]}
{"goal":"(-a).reciprocal = -reduce(a.denom, a.num)","proof":["ℚ.from_int(-ℤ.1) ⋅ reduce(a.denom, a.num) = reduce(-ℤ.1 ⋅ a.denom, a.num)","-ℤ.1 ⋅ a.denom = -(ℤ.1 ⋅ a.denom)","-ℚ.1 ⋅ reduce(a.denom, a.num) = -reduce(a.denom, a.num)","ℤ.1 ⋅ a.denom = a.denom"]}
{"goal":"neg_by_div","proof":["reduce(a.denom, a.num) ⋅ -ℚ.1 = -reduce(a.denom, a.num)","ℚ.1 / a ⋅ -ℚ.1 = -ℚ.1 / a","ℚ.1 / -a = (-a).reciprocal","ℚ.1 / a = a.reciprocal"]}
{"goal":"r1 ⋅ ℚ.from_int(n) = reduce(r1.num ⋅ n, r1.denom)","proof":["reduce(r1.num ⋅ n, r1.denom) = r1 ⋅ ℚ.from_int(n)"]}
{"goal":"r2 ⋅ ℚ.from_int(n) = reduce(r2.num ⋅ n, r2.denom)","proof":["reduce(r2.num ⋅ n, r2.denom) = r2 ⋅ ℚ.from_int(n)"]}
{"goal":"reduce(r1.num ⋅ n, r1.denom) = reduce(r2.num ⋅ n, r2.denom)","proof":[]}
{"goal":"r1.num ⋅ n ⋅ r2.denom = r1.denom ⋅ r2.num ⋅ n","proof":["reduce(r2.num ⋅ n, r2.denom) != reduce(r1.num ⋅ n, r1.denom) or cross_equals(r1.num ⋅ n, r1.denom, r2.num ⋅ n, r2.denom) or r1.denom = ℤ.0 or r2.denom = ℤ.0","not cross_equals(r1.num ⋅ n, r1.denom, r2.num ⋅ n, r2.denom) or r2.num ⋅ n ⋅ r1.denom = r1.num ⋅ n ⋅ r2.denom","r1.denom ⋅ (r2.num ⋅ n) = r1.denom ⋅ r2.num ⋅ n","r1.denom ⋅ (r2.num ⋅ n) = r2.num ⋅ n ⋅ r1.denom","r1.denom != ℤ.0","r2.denom != ℤ.0","r1.denom ⋅ (r2.num ⋅ n) != r1.num ⋅ n ⋅ r2.denom","r2.num ⋅ n ⋅ r1.denom != r1.num ⋅ n ⋅ r2.denom","cross_equals(r1.num ⋅ n, r1.denom, r2.num ⋅ n, r2.denom)","not cross_equals(r1.num ⋅ n, r1.denom, r2.num ⋅ n, r2.denom)"]}
{"goal":"r1.num ⋅ r2.denom = r1.denom ⋅ r2.num","proof":["r1.denom ⋅ r2.num ⋅ n != r1.num ⋅ r2.denom ⋅ n or ℤ.0 = n or r1.denom ⋅ r2.num = r1.num ⋅ r2.denom","n ⋅ (r1.num ⋅ r2.denom) = n ⋅ r1.num ⋅ r2.denom","n ⋅ (r1.num ⋅ r2.denom) = r1.num ⋅ r2.denom ⋅ n","n ⋅ r1.num = r1.num ⋅ n","r1.denom ⋅ r2.num ⋅ n != r1.num ⋅ r2.denom ⋅ n or r1.denom ⋅ r2.num = r1.num ⋅ r2.denom","r1.denom ⋅ r2.num ⋅ n != r1.num ⋅ r2.denom ⋅ n"]}
{"goal":"r1 = r2","proof":["r2.num ⋅ r1.denom != r1.num ⋅ r2.denom or cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.denom = ℤ.0 or r1.denom = ℤ.0","r2.num ⋅ r1.denom != r1.num ⋅ r2.denom or cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r1.denom = ℤ.0 or r2.denom = ℤ.0","not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2 = r1","r1.denom ⋅ r2.num = r2.num ⋅ r1.denom","r1.denom != ℤ.0","r2.denom != ℤ.0","r2.num ⋅ r1.denom = r1.num ⋅ r2.denom","not cross_equals(r1.num, r1.denom, r2.num, r2.denom)","cross_equals(r1.num, r1.denom, r2.num, r2.denom)"]}
{"goal":"mul_int_right_cancel","proof":[]}
{"goal":"mul_int_left_cancel","proof":["r2 ⋅ ℚ.from_int(n) != r1 ⋅ ℚ.from_int(n) or ℤ.0 = n or r2 = r1","r1 ⋅ ℚ.from_int(n) = ℚ.from_int(n) ⋅ r1","r2 ⋅ ℚ.from_int(n) = ℚ.from_int(n) ⋅ r2","r2 ⋅ ℚ.from_int(n) != r1 ⋅ ℚ.from_int(n) or ℤ.0 = n","r2 ⋅ ℚ.from_int(n) != r1 ⋅ ℚ.from_int(n)"]}
{"goal":"exists(k0: ℤ) { reduce(a, b).num ⋅ k0 = a and reduce(a, b).denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(a, b).denom ⋅ s0(a, b) != b or reduce(a, b).num ⋅ s0(a, b) != a","reduce(a, b).denom ⋅ s0(a, b) = b or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a","reduce(a, b).denom ⋅ s0(a, b) = b"]}
{"goal":"e != ℤ.0","proof":["ℤ.0 != e or reduce(a, b).denom ⋅ e = ℤ.0","reduce(a, b).denom ⋅ e = ℤ.0"]}
{"goal":"exists(k0: ℤ) { reduce(c, d).num ⋅ k0 = c and reduce(c, d).denom ⋅ k0 = d }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(c, d).denom ⋅ s0(c, d) != d or reduce(c, d).num ⋅ s0(c, d) != c","reduce(c, d).denom ⋅ s0(c, d) = d or ℤ.0 = d","reduce(c, d).num ⋅ s0(c, d) = c or ℤ.0 = d","reduce(c, d).num ⋅ s0(c, d) = c","reduce(c, d).denom ⋅ s0(c, d) = d"]}
{"goal":"f != ℤ.0","proof":["ℤ.0 != f or reduce(c, d).denom ⋅ f = ℤ.0","reduce(c, d).denom ⋅ f = ℤ.0"]}
{"goal":"reduce(a, b).num ⋅ e ⋅ (reduce(c, d).num ⋅ f) = a ⋅ c","proof":[]}
{"goal":"reduce(a, b).num ⋅ e ⋅ reduce(c, d).num ⋅ f = a ⋅ c","proof":["reduce(a, b).num ⋅ e ⋅ (reduce(c, d).num ⋅ f) = reduce(a, b).num ⋅ e ⋅ reduce(c, d).num ⋅ f"]}
{"goal":"reduce(a, b).num ⋅ reduce(c, d).num ⋅ e ⋅ f = a ⋅ c","proof":["reduce(c, d).num ⋅ (reduce(a, b).num ⋅ e) = reduce(c, d).num ⋅ reduce(a, b).num ⋅ e","f ⋅ (reduce(a, b).num ⋅ e ⋅ reduce(c, d).num) = reduce(a, b).num ⋅ e ⋅ reduce(c, d).num ⋅ f","f ⋅ (reduce(a, b).num ⋅ reduce(c, d).num ⋅ e) = reduce(a, b).num ⋅ reduce(c, d).num ⋅ e ⋅ f","reduce(c, d).num ⋅ (reduce(a, b).num ⋅ e) = reduce(a, b).num ⋅ e ⋅ reduce(c, d).num","reduce(c, d).num ⋅ reduce(a, b).num = reduce(a, b).num ⋅ reduce(c, d).num"]}
{"goal":"reduce(a, b).num ⋅ reduce(c, d).num ⋅ (e ⋅ f) = a ⋅ c","proof":["reduce(a, b).num ⋅ reduce(c, d).num ⋅ (e ⋅ f) = reduce(a, b).num ⋅ reduce(c, d).num ⋅ e ⋅ f"]}
{"goal":"nums ⋅ (e ⋅ f) = a ⋅ c","proof":["reduce(a, b).num ⋅ reduce(c, d).num ⋅ (e ⋅ f) != a ⋅ c"]}
{"goal":"reduce(a, b).denom ⋅ e ⋅ (reduce(c, d).denom ⋅ f) = b ⋅ d","proof":[]}
{"goal":"reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ e ⋅ f = b ⋅ d","proof":["reduce(a, b).denom ⋅ e ⋅ (reduce(c, d).denom ⋅ f) = reduce(a, b).denom ⋅ e ⋅ reduce(c, d).denom ⋅ f","reduce(c, d).denom ⋅ (reduce(a, b).denom ⋅ e) = reduce(c, d).denom ⋅ reduce(a, b).denom ⋅ e","f ⋅ (reduce(a, b).denom ⋅ e ⋅ reduce(c, d).denom) = reduce(a, b).denom ⋅ e ⋅ reduce(c, d).denom ⋅ f","f ⋅ (reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ e) = reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ e ⋅ f","reduce(c, d).denom ⋅ (reduce(a, b).denom ⋅ e) = reduce(a, b).denom ⋅ e ⋅ reduce(c, d).denom","reduce(c, d).denom ⋅ reduce(a, b).denom = reduce(a, b).denom ⋅ reduce(c, d).denom"]}
{"goal":"reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ (e ⋅ f) = b ⋅ d","proof":["reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ (e ⋅ f) = reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ e ⋅ f"]}
{"goal":"denoms ⋅ (e ⋅ f) = b ⋅ d","proof":["reduce(a, b).denom ⋅ reduce(c, d).denom ⋅ (e ⋅ f) != b ⋅ d"]}
{"goal":"nums ⋅ (b ⋅ d) = denoms ⋅ (a ⋅ c)","proof":["denoms ⋅ (nums ⋅ (e ⋅ f)) = denoms ⋅ nums ⋅ (e ⋅ f)","nums ⋅ (denoms ⋅ (e ⋅ f)) = nums ⋅ denoms ⋅ (e ⋅ f)","denoms ⋅ nums = nums ⋅ denoms"]}
{"goal":"reduce(a, b).denom ⋅ reduce(c, d).denom != ℤ.0","proof":["ℤ.0 ⋅ (e ⋅ f) = b ⋅ d","b ⋅ d != ℤ.0 or ℤ.0 = b or ℤ.0 = d","ℤ.0 ⋅ (e ⋅ f) = ℤ.0","b ⋅ d = ℤ.0"]}
{"goal":"denoms != ℤ.0","proof":["reduce(a, b).denom ⋅ reduce(c, d).denom != denoms"]}
{"goal":"cross_equals(nums, denoms, a ⋅ c, b ⋅ d)","proof":["a ⋅ c ⋅ denoms != nums ⋅ (b ⋅ d) or cross_equals(nums, denoms, a ⋅ c, b ⋅ d) or b ⋅ d = ℤ.0 or ℤ.0 = denoms","a ⋅ c ⋅ denoms != nums ⋅ (b ⋅ d) or cross_equals(nums, denoms, a ⋅ c, b ⋅ d) or ℤ.0 = denoms or b ⋅ d = ℤ.0","b ⋅ d != ℤ.0 or ℤ.0 = b or ℤ.0 = d","denoms ⋅ (a ⋅ c) = a ⋅ c ⋅ denoms","a ⋅ c ⋅ denoms = nums ⋅ (b ⋅ d)","b ⋅ d = ℤ.0"]}
{"goal":"cross_equals(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom, a ⋅ c, b ⋅ d)","proof":[]}
{"goal":"mul_reduced_nondegenerate","proof":["reduce(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom) = reduce(a, b) ⋅ reduce(c, d)","not cross_equals(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom, a ⋅ c, b ⋅ d) or reduce(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom) = reduce(a ⋅ c, b ⋅ d)","reduce(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom) != reduce(a ⋅ c, b ⋅ d)","reduce(reduce(a, b).num ⋅ reduce(c, d).num, reduce(a, b).denom ⋅ reduce(c, d).denom) = reduce(a ⋅ c, b ⋅ d)"]}
{"goal":"reduce(ℤ.0, a) = ℚ.0","proof":["reduce(ℤ.0, ℤ.0) != ℚ.0","ℤ.0 != ℤ.0 or reduce(ℤ.0, ℤ.0) = ℚ.0"]}
{"goal":"ℚ.0 = reduce(ℤ.0, ℤ.1)","proof":["reduce(ℚ.from_int(ℤ.0).num, ℚ.from_int(ℤ.0).denom) = ℚ.from_int(ℤ.0)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int(ℤ.0).num = ℤ.0"]}
{"goal":"cross_equals(ℤ.0, a, ℤ.0, ℤ.1)","proof":["ℤ.0 ⋅ ℤ.1 != ℤ.0 ⋅ a or cross_equals(ℤ.0, a, ℤ.0, ℤ.1) or ℤ.1 = ℤ.0 or ℤ.0 = a","ℤ.0 ⋅ ℤ.1 != ℤ.0 ⋅ a or cross_equals(ℤ.0, a, ℤ.0, ℤ.1) or ℤ.0 = a or ℤ.1 = ℤ.0","ℤ.0 ⋅ ℤ.1 = ℤ.0","ℤ.0 ⋅ a = ℤ.0","ℤ.0 ⋅ ℤ.1 != ℤ.0 ⋅ a"]}
{"goal":"reduce(ℤ.0, a) = reduce(ℤ.0, ℤ.1)","proof":["not cross_equals(ℤ.0, a, ℤ.0, ℤ.1) or reduce(ℤ.0, ℤ.1) = reduce(ℤ.0, a)"]}
{"goal":"reduce(ℤ.0, a) = ℚ.0","proof":["reduce(ℤ.0, ℤ.1) != reduce(ℤ.0, a)"]}
{"goal":"reduce_zero_num","proof":[]}
{"goal":"r ⋅ ℚ.0 = reduce(r.num ⋅ ℤ.0, r.denom)","proof":["reduce(r.num ⋅ ℤ.0, r.denom) = r ⋅ ℚ.from_int(ℤ.0)","r ⋅ ℚ.from_int(ℤ.0) != r ⋅ ℚ.0","ℚ.from_int(ℤ.0) != ℚ.0","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.new(ℤ.0, ℤ.1) != ℚ.0"]}
{"goal":"r ⋅ ℚ.0 = reduce(ℤ.0, r.denom)","proof":["r.num ⋅ ℤ.0 = ℤ.0"]}
{"goal":"mul_zero_right","proof":["reduce(ℤ.0, r.denom) != ℚ.0","reduce(ℤ.0, r.denom) = ℚ.0"]}
{"goal":"reduce(c, ℤ.0) = ℚ.0","proof":["ℤ.0 != ℤ.0 or reduce(c, ℤ.0) = ℚ.0"]}
{"goal":"reduce(a, b) ⋅ ℚ.0 = ℚ.0","proof":["reduce(a, b) ⋅ ℚ.0 = ℚ.0"]}
{"goal":"reduce(a ⋅ c, b ⋅ ℤ.0) = ℚ.0","proof":["b ⋅ ℤ.0 != ℤ.0 or reduce(a ⋅ c, b ⋅ ℤ.0) = ℚ.0","b ⋅ ℤ.0 != ℤ.0","ℤ.0 != ℤ.0 or b ⋅ ℤ.0 = ℤ.0"]}
{"goal":"mul_reduced_degenerate","proof":[]}
{"goal":"reduce(a, ℤ.0) ⋅ reduce(c, d) = reduce(a ⋅ c, ℤ.0 ⋅ d)","proof":["reduce(c, d) ⋅ ℚ.0 = ℚ.0 ⋅ reduce(c, d)","ℤ.0 != ℤ.0 or reduce(a ⋅ c, ℤ.0) = ℚ.0","ℤ.0 != ℤ.0 or reduce(a, ℤ.0) = ℚ.0","reduce(c, d) ⋅ ℚ.0 = ℚ.0","ℤ.0 ⋅ d = ℤ.0","reduce(a, ℤ.0) ⋅ reduce(c, d) != reduce(a ⋅ c, ℤ.0)","reduce(a ⋅ c, ℤ.0) = ℚ.0","reduce(a, ℤ.0) = ℚ.0","reduce(a, ℤ.0) ⋅ reduce(c, d) != ℚ.0","ℚ.0 ⋅ reduce(c, d) != ℚ.0"]}
{"goal":"reduce(a, b) ⋅ reduce(c, d) = reduce(a ⋅ c, b ⋅ d)","proof":[]}
{"goal":"d = ℤ.0","proof":[]}
{"goal":"reduce(a, b) ⋅ reduce(c, ℤ.0) = reduce(a ⋅ c, b ⋅ ℤ.0)","proof":["reduce(a, b) ⋅ reduce(c, ℤ.0) = reduce(a ⋅ c, b ⋅ ℤ.0)"]}
{"goal":"reduce(a, b) ⋅ reduce(c, d) = reduce(a ⋅ c, b ⋅ d)","proof":[]}
{"goal":"reduce(a, b) ⋅ reduce(c, d) = reduce(a ⋅ c, b ⋅ d)","proof":["reduce(a, b) ⋅ reduce(c, d) = reduce(a ⋅ c, b ⋅ d) or ℤ.0 = b or ℤ.0 = d"]}
{"goal":"mul_reduced","proof":[]}
{"goal":"a ⋅ b ⋅ c = reduce(a.num ⋅ b.num ⋅ c.num, a.denom ⋅ b.denom ⋅ c.denom)","proof":["reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) ⋅ reduce(c.num, c.denom) = reduce(a.num ⋅ b.num ⋅ c.num, a.denom ⋅ b.denom ⋅ c.denom)","reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) = a ⋅ b","reduce(c.num, c.denom) = c"]}
{"goal":"a ⋅ (b ⋅ c) = reduce(a.num ⋅ (b.num ⋅ c.num), a.denom ⋅ (b.denom ⋅ c.denom))","proof":["reduce(a.num, a.denom) ⋅ reduce(b.num ⋅ c.num, b.denom ⋅ c.denom) = reduce(a.num ⋅ (b.num ⋅ c.num), a.denom ⋅ (b.denom ⋅ c.denom))","reduce(b.num ⋅ c.num, b.denom ⋅ c.denom) = b ⋅ c","reduce(a.num, a.denom) = a"]}
{"goal":"mul_assoc","proof":["a.denom ⋅ (b.denom ⋅ c.denom) = a.denom ⋅ b.denom ⋅ c.denom","a.num ⋅ (b.num ⋅ c.num) = a.num ⋅ b.num ⋅ c.num"]}
{"goal":"add_int_eq_int_add","proof":["reduce(ℚ.0.num ⋅ ℚ.from_int(a + b).denom + ℚ.from_int(a + b).num ⋅ ℚ.0.denom, ℚ.0.denom ⋅ ℚ.from_int(a + b).denom) = ℚ.0 + ℚ.from_int(a + b)","reduce(ℚ.from_int(b).num ⋅ ℚ.from_int(a).denom + ℚ.from_int(a).num ⋅ ℚ.from_int(b).denom, ℚ.from_int(b).denom ⋅ ℚ.from_int(a).denom) = ℚ.from_int(b) + ℚ.from_int(a)","ℚ.from_int(b) + ℚ.from_int(a) = ℚ.from_int(a) + ℚ.from_int(b)","b + a = a + b","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.0 + ℚ.from_int(a + b) = ℚ.from_int(a + b)","ℚ.from_int(a + b).denom = ℤ.1","ℚ.from_int(a).denom = ℤ.1","ℚ.from_int(b).denom = ℤ.1","ℚ.from_int(a + b).num = a + b","ℚ.from_int(a).num = a","ℚ.from_int(b).num = b","ℚ.from_int(ℤ.0).num = ℤ.0","ℤ.1 ⋅ ℚ.from_int(a + b).denom = ℚ.from_int(a + b).denom","ℤ.1 ⋅ ℚ.from_int(a).denom = ℚ.from_int(a).denom","(a + b) ⋅ ℤ.1 = a + b","a ⋅ ℤ.1 = a","b ⋅ ℤ.1 = b","ℤ.0 ⋅ ℤ.1 = ℤ.0","ℤ.0 + (a + b) = a + b"]}
{"goal":"b ⋅ c = ℤ.0","proof":["ℤ.0 ⋅ c != ℤ.0","ℤ.0 != ℤ.0 or ℤ.0 ⋅ c = ℤ.0"]}
{"goal":"reduce(a, b) = reduce(a ⋅ c, b ⋅ c)","proof":["reduce(a ⋅ c, ℤ.0) != reduce(a, b)","ℤ.0 != b or reduce(a, b) = ℚ.0","ℤ.0 != ℤ.0 or reduce(a ⋅ c, ℤ.0) = ℚ.0","reduce(a ⋅ c, ℤ.0) = ℚ.0","reduce(a, b) != ℚ.0"]}
{"goal":"cross_equals(a, b, a ⋅ c, b ⋅ c)","proof":["a ⋅ (c ⋅ b) != a ⋅ c ⋅ b or cross_equals(a, b, a ⋅ c, c ⋅ b) or c ⋅ b = ℤ.0 or ℤ.0 = b","a ⋅ (c ⋅ b) != a ⋅ c ⋅ b or cross_equals(a, b, a ⋅ c, c ⋅ b) or ℤ.0 = b or c ⋅ b = ℤ.0","a ⋅ (c ⋅ b) = a ⋅ c ⋅ b","c ⋅ b != ℤ.0 or ℤ.0 = c or ℤ.0 = b","b ⋅ c = c ⋅ b","not cross_equals(a, b, a ⋅ c, c ⋅ b)","c ⋅ b = ℤ.0"]}
{"goal":"reduce(a, b) = reduce(a ⋅ c, b ⋅ c)","proof":["not cross_equals(a, b, a ⋅ c, b ⋅ c) or reduce(a ⋅ c, b ⋅ c) = reduce(a, b)"]}
{"goal":"reduce_cancels_right","proof":[]}
{"goal":"reduce_cancels_left","proof":["reduce(-a ⋅ c, -b ⋅ c) = reduce(-a, -b) or ℤ.0 = c","reduce(a, --b) = reduce(-a, -b)","reduce(c ⋅ a, --(c ⋅ b)) = reduce(-(c ⋅ a), -(c ⋅ b))","c ⋅ -a = -(c ⋅ a)","c ⋅ -b = -(c ⋅ b)","c ⋅ -a = -a ⋅ c","c ⋅ -b = -b ⋅ c","--(c ⋅ b) = c ⋅ b","--b = b","reduce(-a ⋅ c, -b ⋅ c) = reduce(-a, -b)"]}
{"goal":"exists(k0: ℤ) { reduce(a, b).num ⋅ k0 = a and reduce(a, b).denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(a, b).denom ⋅ s0(a, b) != b or reduce(a, b).num ⋅ s0(a, b) != a","reduce(a, b).denom ⋅ s0(a, b) = b or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a","reduce(a, b).denom ⋅ s0(a, b) = b"]}
{"goal":"c != ℤ.0","proof":["ℤ.0 != c or reduce(a, b).denom ⋅ c = ℤ.0","reduce(a, b).denom ⋅ c = ℤ.0"]}
{"goal":"r + reduce(a, b) = reduce(r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num, reduce(a, b).denom ⋅ r.denom)","proof":["reduce(r.num ⋅ reduce(a, b).denom + reduce(a, b).num ⋅ r.denom, r.denom ⋅ reduce(a, b).denom) = r + reduce(a, b)","r.denom ⋅ reduce(a, b).denom = reduce(a, b).denom ⋅ r.denom","r.denom ⋅ reduce(a, b).num = reduce(a, b).num ⋅ r.denom"]}
{"goal":"reduce(x0 ⋅ c, x1 ⋅ c) = reduce(x0, x1)","proof":["reduce(x0 ⋅ c, x1 ⋅ c) = reduce(x0, x1) or ℤ.0 = c"]}
{"goal":"r + reduce(a, b) = reduce((r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num) ⋅ c, reduce(a, b).denom ⋅ r.denom ⋅ c)","proof":["reduce((r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num) ⋅ c, reduce(a, b).denom ⋅ r.denom ⋅ c) = reduce(r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num, reduce(a, b).denom ⋅ r.denom)","reduce(r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num, reduce(a, b).denom ⋅ r.denom) != r + reduce(a, b)"]}
{"goal":"r + reduce(a, b) = reduce(r.num ⋅ reduce(a, b).denom ⋅ c + r.denom ⋅ reduce(a, b).num ⋅ c, r.denom ⋅ reduce(a, b).denom ⋅ c)","proof":["r.num ⋅ reduce(a, b).denom ⋅ c + r.denom ⋅ reduce(a, b).num ⋅ c = (r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num) ⋅ c","reduce((r.num ⋅ reduce(a, b).denom + r.denom ⋅ reduce(a, b).num) ⋅ c, r.denom ⋅ reduce(a, b).denom ⋅ c) != r + reduce(a, b)","r.denom ⋅ reduce(a, b).denom = reduce(a, b).denom ⋅ r.denom"]}
{"goal":"r + reduce(a, b) = reduce(r.num ⋅ b + a ⋅ r.denom, r.denom ⋅ b)","proof":["reduce((r.num ⋅ b + a ⋅ r.denom) ⋅ c, r.denom ⋅ b ⋅ c) = reduce(r.num ⋅ b + a ⋅ r.denom, r.denom ⋅ b)","reduce((r.num ⋅ reduce(a, b).denom ⋅ c + r.denom ⋅ reduce(a, b).num ⋅ c) ⋅ c, r.denom ⋅ reduce(a, b).denom ⋅ c ⋅ c) = reduce(r.num ⋅ reduce(a, b).denom ⋅ c + r.denom ⋅ reduce(a, b).num ⋅ c, r.denom ⋅ reduce(a, b).denom ⋅ c)","lib(int.int_base).sub_nat((r.num ⋅ b).pos_part + (a ⋅ r.denom).pos_part, (r.num ⋅ b).neg_part + (a ⋅ r.denom).neg_part) = r.num ⋅ b + a ⋅ r.denom","lib(int.int_base).sub_nat((r.num ⋅ reduce(a, b).denom ⋅ c).pos_part + (r.denom ⋅ reduce(a, b).num ⋅ c).pos_part, (r.num ⋅ reduce(a, b).denom ⋅ c).neg_part + (r.denom ⋅ reduce(a, b).num ⋅ c).neg_part) = r.num ⋅ reduce(a, b).denom ⋅ c + r.denom ⋅ reduce(a, b).num ⋅ c","r.denom ⋅ (reduce(a, b).denom ⋅ c) = r.denom ⋅ reduce(a, b).denom ⋅ c","r.denom ⋅ (reduce(a, b).num ⋅ c) = r.denom ⋅ reduce(a, b).num ⋅ c","r.num ⋅ (reduce(a, b).denom ⋅ c) = r.num ⋅ reduce(a, b).denom ⋅ c","a ⋅ r.denom = r.denom ⋅ a"]}
{"goal":"add_reduce_right","proof":[]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom, reduce(a, b).denom ⋅ d)","proof":["reduce(reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom, reduce(a, b).denom ⋅ d) = reduce(a, b) + reduce(c, d) or ℤ.0 = d"]}
{"goal":"exists(k0: ℤ) { reduce(a, b).num ⋅ k0 = a and reduce(a, b).denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(a, b).denom ⋅ s0(a, b) != b or reduce(a, b).num ⋅ s0(a, b) != a","reduce(a, b).denom ⋅ s0(a, b) = b or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a","reduce(a, b).denom ⋅ s0(a, b) = b"]}
{"goal":"e != ℤ.0","proof":["ℤ.0 != e or reduce(a, b).denom ⋅ e = ℤ.0","reduce(a, b).denom ⋅ e = ℤ.0"]}
{"goal":"reduce(reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom, reduce(a, b).denom ⋅ d) = reduce((reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom) ⋅ e, reduce(a, b).denom ⋅ d ⋅ e)","proof":["reduce((reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom) ⋅ e, reduce(a, b).denom ⋅ d ⋅ e) = reduce(reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom, reduce(a, b).denom ⋅ d) or ℤ.0 = e"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce((reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom) ⋅ e, reduce(a, b).denom ⋅ d ⋅ e)","proof":["reduce((reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom) ⋅ e, reduce(a, b).denom ⋅ d ⋅ e) != reduce(reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom, reduce(a, b).denom ⋅ d)"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num ⋅ d ⋅ e + c ⋅ reduce(a, b).denom ⋅ e, reduce(a, b).denom ⋅ d ⋅ e)","proof":["reduce(a, b).num ⋅ d ⋅ e + c ⋅ reduce(a, b).denom ⋅ e = (reduce(a, b).num ⋅ d + c ⋅ reduce(a, b).denom) ⋅ e"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num ⋅ e ⋅ d + reduce(a, b).denom ⋅ e ⋅ c, reduce(a, b).denom ⋅ e ⋅ d)","proof":["c ⋅ (reduce(a, b).denom ⋅ e) = c ⋅ reduce(a, b).denom ⋅ e","reduce(a, b).denom ⋅ (d ⋅ e) = reduce(a, b).denom ⋅ d ⋅ e","reduce(a, b).denom ⋅ (e ⋅ d) = reduce(a, b).denom ⋅ e ⋅ d","reduce(a, b).num ⋅ (d ⋅ e) = reduce(a, b).num ⋅ d ⋅ e","reduce(a, b).num ⋅ (e ⋅ d) = reduce(a, b).num ⋅ e ⋅ d","c ⋅ (reduce(a, b).denom ⋅ e) = reduce(a, b).denom ⋅ e ⋅ c","e ⋅ d = d ⋅ e","c ⋅ reduce(a, b).denom ⋅ e + reduce(a, b).num ⋅ d ⋅ e = reduce(a, b).num ⋅ d ⋅ e + c ⋅ reduce(a, b).denom ⋅ e","reduce(a, b).denom ⋅ e ⋅ c + reduce(a, b).num ⋅ e ⋅ d = reduce(a, b).num ⋅ e ⋅ d + reduce(a, b).denom ⋅ e ⋅ c"]}
{"goal":"reduce(a, b).num ⋅ e = a","proof":[]}
{"goal":"reduce(a, b).denom ⋅ e = b","proof":[]}
{"goal":"add_reduced","proof":[]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a + b, c)","proof":["reduce(b, c) + reduce(a, c) = reduce(a, c) + reduce(b, c)","ℤ.0 != c or reduce(a + b, c) = ℚ.0","ℤ.0 != c or reduce(a, c) = ℚ.0","ℤ.0 != c or reduce(b, c) = ℚ.0","reduce(b, c) + ℚ.0 = reduce(b, c)","reduce(a + b, c) = ℚ.0","reduce(a, c) = ℚ.0","reduce(b, c) = ℚ.0"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a ⋅ c + b ⋅ c, c ⋅ c)","proof":["reduce(a ⋅ c + c ⋅ b, c ⋅ c) = reduce(a, c) + reduce(b, c) or ℤ.0 = c or ℤ.0 = c","b ⋅ c = c ⋅ b","reduce(a ⋅ c + c ⋅ b, c ⋅ c) != reduce(a, c) + reduce(b, c)"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a + b, c)","proof":["reduce((a + b) ⋅ c, c ⋅ c) = reduce(a + b, c) or ℤ.0 = c","a ⋅ c + b ⋅ c = (a + b) ⋅ c","reduce((a + b) ⋅ c, c ⋅ c) = reduce(a, c) + reduce(b, c)","reduce((a + b) ⋅ c, c ⋅ c) = reduce(a + b, c)"]}
{"goal":"add_reduced_same_denom","proof":[]}
{"goal":"a = reduce(a.num, a.denom)","proof":["reduce(a.num, a.denom) = a"]}
{"goal":"b.denom ⋅ c.denom != ℤ.0","proof":["b.denom ⋅ c.denom != ℤ.0 or b.denom = ℤ.0 or c.denom = ℤ.0","c.denom = ℤ.0 or b.denom = ℤ.0","b.denom != ℤ.0","c.denom != ℤ.0"]}
{"goal":"a = reduce(a.num ⋅ (b.denom ⋅ c.denom), a.denom ⋅ (b.denom ⋅ c.denom))","proof":["reduce(a.num ⋅ (b.denom ⋅ c.denom), a.denom ⋅ (b.denom ⋅ c.denom)) = reduce(a.num, a.denom) or b.denom ⋅ c.denom = ℤ.0","reduce(a.num, a.denom) = a","reduce(a.num ⋅ (b.denom ⋅ c.denom), a.denom ⋅ (b.denom ⋅ c.denom)) != reduce(a.num, a.denom)"]}
{"goal":"a = reduce(an, d)","proof":["a.denom ⋅ (b.denom ⋅ c.denom) = a.denom ⋅ b.denom ⋅ c.denom"]}
{"goal":"b = reduce(b.num, b.denom)","proof":["reduce(b.num, b.denom) = b"]}
{"goal":"a.denom ⋅ c.denom != ℤ.0","proof":["a.denom ⋅ c.denom != ℤ.0 or a.denom = ℤ.0 or c.denom = ℤ.0","c.denom = ℤ.0 or a.denom = ℤ.0","a.denom != ℤ.0","c.denom != ℤ.0"]}
{"goal":"b = reduce(b.num ⋅ (a.denom ⋅ c.denom), b.denom ⋅ (a.denom ⋅ c.denom))","proof":["reduce(b.num ⋅ (a.denom ⋅ c.denom), b.denom ⋅ (a.denom ⋅ c.denom)) = reduce(b.num, b.denom) or a.denom ⋅ c.denom = ℤ.0","reduce(b.num, b.denom) = b","reduce(b.num ⋅ (a.denom ⋅ c.denom), b.denom ⋅ (a.denom ⋅ c.denom)) != reduce(b.num, b.denom)"]}
{"goal":"b = reduce(bn, d)","proof":["b.denom ⋅ (a.denom ⋅ c.denom) = b.denom ⋅ a.denom ⋅ c.denom","b.denom ⋅ a.denom = a.denom ⋅ b.denom"]}
{"goal":"c = reduce(c.num, c.denom)","proof":["reduce(c.num, c.denom) = c"]}
{"goal":"a.denom ⋅ b.denom != ℤ.0","proof":["a.denom ⋅ b.denom != ℤ.0 or a.denom = ℤ.0 or b.denom = ℤ.0","b.denom = ℤ.0 or a.denom = ℤ.0","a.denom != ℤ.0","b.denom != ℤ.0"]}
{"goal":"c = reduce(c.num ⋅ (a.denom ⋅ b.denom), c.denom ⋅ (a.denom ⋅ b.denom))","proof":["reduce(c.num ⋅ (a.denom ⋅ b.denom), c.denom ⋅ (a.denom ⋅ b.denom)) = reduce(c.num, c.denom) or a.denom ⋅ b.denom = ℤ.0","reduce(c.num, c.denom) = c","reduce(c.num ⋅ (a.denom ⋅ b.denom), c.denom ⋅ (a.denom ⋅ b.denom)) != reduce(c.num, c.denom)"]}
{"goal":"c = reduce(cn, d)","proof":["c.denom ⋅ (a.denom ⋅ b.denom) = a.denom ⋅ b.denom ⋅ c.denom"]}
{"goal":"a + b + c = reduce(an, d) + reduce(bn, d) + reduce(cn, d)","proof":[]}
{"goal":"a + b + c = reduce(an + bn + cn, d)","proof":["reduce(an + bn, d) + reduce(cn, d) = reduce(an + bn + cn, d)","reduce(an, d) + reduce(bn, d) = reduce(an + bn, d)"]}
{"goal":"a + b + c = reduce(an + (bn + cn), d)","proof":["an + (bn + cn) = an + bn + cn"]}
{"goal":"a + b + c = reduce(an, d) + (reduce(bn, d) + reduce(cn, d))","proof":["reduce(an, d) + reduce(bn + cn, d) = reduce(an + (bn + cn), d)","reduce(bn, d) + reduce(cn, d) = reduce(bn + cn, d)"]}
{"goal":"a + b + c = a + (b + c)","proof":[]}
{"goal":"add_assoc","proof":[]}
{"goal":"d != ℤ.0","proof":["r1.denom ⋅ r2.denom != ℤ.0 or r1.denom = ℤ.0 or r2.denom = ℤ.0","r1.denom ⋅ r2.denom = ℤ.0","r1.denom != ℤ.0","r2.denom != ℤ.0"]}
{"goal":"r1 = reduce(r1.num ⋅ r2.denom, r1.denom ⋅ r2.denom)","proof":["reduce(r1.num ⋅ r2.denom, r1.denom ⋅ r2.denom) = reduce(r1.num, r1.denom) or r2.denom = ℤ.0","reduce(r1.num, r1.denom) = r1","r2.denom != ℤ.0","reduce(r1.num ⋅ r2.denom, r1.denom ⋅ r2.denom) != reduce(r1.num, r1.denom)"]}
{"goal":"r1 = reduce(n1, d)","proof":[]}
{"goal":"r2 = reduce(r2.num ⋅ r1.denom, r2.denom ⋅ r1.denom)","proof":["reduce(r2.num ⋅ r1.denom, r2.denom ⋅ r1.denom) = reduce(r2.num, r2.denom) or r1.denom = ℤ.0","reduce(r2.num, r2.denom) = r2","r1.denom != ℤ.0","reduce(r2.num ⋅ r1.denom, r2.denom ⋅ r1.denom) != reduce(r2.num, r2.denom)"]}
{"goal":"r2 = reduce(n2, d)","proof":["r2.denom ⋅ r1.denom = r1.denom ⋅ r2.denom"]}
{"goal":"common_denom","proof":["reduce(n1, d) != r1 or reduce(n2, d) != r2","reduce(n2, d) != r2"]}
{"goal":"exists(k0: ℤ, k1: ℤ, k2: ℤ) { r2 = reduce(k0, k2) and r3 = reduce(k1, k2) }","proof":["let (s0: (ℚ, ℚ) -> ℤ, s1: (ℚ, ℚ) -> ℤ, s2: (ℚ, ℚ) -> ℤ) satisfy { forall(x0: ℚ, x1: ℚ) { reduce(s0(x0, x1), s2(x0, x1)) = x0 } and forall(x2: ℚ, x3: ℚ) { reduce(s1(x2, x3), s2(x2, x3)) = x3 } }","reduce(s1(r3, r2), s2(r3, r2)) != r2 or reduce(s0(r3, r2), s2(r3, r2)) != r3","reduce(s1(r3, r2), s2(r3, r2)) = r2","reduce(s0(r3, r2), s2(r3, r2)) = r3","reduce(s1(r3, r2), s2(r3, r2)) != r2"]}
{"goal":"r2 + r3 = reduce(a + b, c)","proof":["reduce(a, c) + reduce(b, c) = reduce(a + b, c)"]}
{"goal":"r1 ⋅ (r2 + r3) = r1 ⋅ reduce(a + b, c)","proof":["reduce(a + b, c) != r2 + r3"]}
{"goal":"r1 ⋅ (r2 + r3) = reduce(r1.num ⋅ (a + b), r1.denom ⋅ c)","proof":["reduce(r1.num, r1.denom) ⋅ reduce(a + b, c) = reduce(r1.num ⋅ (a + b), r1.denom ⋅ c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 ⋅ (r2 + r3) = reduce(r1.num ⋅ a + r1.num ⋅ b, r1.denom ⋅ c)","proof":["r1.num ⋅ a + r1.num ⋅ b = r1.num ⋅ (a + b)"]}
{"goal":"r1 ⋅ r2 = reduce(r1.num ⋅ a, r1.denom ⋅ c)","proof":["reduce(r1.num, r1.denom) ⋅ reduce(a, c) = reduce(r1.num ⋅ a, r1.denom ⋅ c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 ⋅ r3 = reduce(r1.num ⋅ b, r1.denom ⋅ c)","proof":["reduce(r1.num, r1.denom) ⋅ reduce(b, c) = reduce(r1.num ⋅ b, r1.denom ⋅ c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 ⋅ r2 + r1 ⋅ r3 = reduce(r1.num ⋅ a + r1.num ⋅ b, r1.denom ⋅ c)","proof":["reduce(r1.num ⋅ a, r1.denom ⋅ c) + reduce(r1.num ⋅ b, r1.denom ⋅ c) = reduce(r1.num ⋅ a + r1.num ⋅ b, r1.denom ⋅ c)"]}
{"goal":"distrib_left","proof":["reduce(r1.num * a + r1.num * b, r1.denom * c) != r1 * r2 + r1 * r3"]}
{"goal":"distrib_right","proof":["r3 ⋅ r1 + r3 ⋅ r2 = r3 ⋅ (r1 + r2)","r3 ⋅ (r1 + r2) = (r1 + r2) ⋅ r3","r3 ⋅ r1 = r1 ⋅ r3","r3 ⋅ r2 = r2 ⋅ r3"]}
{"goal":"a + -a = reduce(a.num + -a.num, a.denom)","proof":["reduce(-a.num, a.denom) + reduce(a.num, a.denom) = reduce(-a.num + a.num, a.denom)","a + -a = -a + a","(-a).num = -a.num","reduce((-a).num, (-a).denom) = -a","reduce(a.num, a.denom) = a","a.num + -a.num = -a.num + a.num","(-a).denom = a.denom"]}
{"goal":"add_inv_cancels_right","proof":["a.num + -a.num = ℤ.0","reduce(ℤ.0, a.denom) = ℚ.0","a + -a = reduce(ℤ.0, a.denom)"]}
{"goal":"add_inv_cancels_left","proof":["a + -a = -a + a","a + -a != ℚ.0","a + -a = ℚ.0"]}
{"goal":"sub_self","proof":["a + -a = a - a","a + -a != ℚ.0","a + -a = -a + a","-a + a = ℚ.0"]}
{"goal":"reduce_one_one","proof":["reduce(ℚ.from_int(ℤ.1).num, ℚ.from_int(ℤ.1).denom) = ℚ.from_int(ℤ.1)","ℚ.from_int(ℤ.1).denom = ℤ.1","ℚ.from_int(ℤ.1).num = ℤ.1"]}
{"goal":"ℚ.1 = ℚ.new(ℤ.1, ℤ.1)","proof":["ℚ.new(ℤ.1, ℤ.1) = ℚ.from_int(ℤ.1)","ℚ.from_int(ℤ.1) != ℚ.1"]}
{"goal":"cross_equals(ℤ.1, ℤ.1, n, n)","proof":["n ⋅ ℤ.1 != ℤ.1 ⋅ n or cross_equals(ℤ.1, ℤ.1, n, n) or ℤ.0 = n or ℤ.1 = ℤ.0","n ⋅ ℤ.1 != ℤ.1 ⋅ n or cross_equals(ℤ.1, ℤ.1, n, n) or ℤ.1 = ℤ.0 or ℤ.0 = n","n ⋅ ℤ.1 = ℤ.1 ⋅ n","ℤ.1 = ℤ.0"]}
{"goal":"reduce(n, n) = reduce(ℤ.1, ℤ.1)","proof":["not cross_equals(ℤ.1, ℤ.1, n, n) or reduce(ℤ.1, ℤ.1) = reduce(n, n)"]}
{"goal":"reduce(n, n) = ℚ.1","proof":["reduce(ℤ.1, ℤ.1) != ℚ.1"]}
{"goal":"reduce_self","proof":[]}
{"goal":"a ⋅ a.reciprocal = reduce(a.num ⋅ a.denom, a.denom ⋅ a.num)","proof":["reduce(a.num, a.denom) ⋅ reduce(a.denom, a.num) = reduce(a.num ⋅ a.denom, a.denom ⋅ a.num)","reduce(a.denom, a.num) = a.reciprocal","reduce(a.num, a.denom) = a"]}
{"goal":"a ⋅ a.reciprocal = reduce(a.num ⋅ a.denom, a.num ⋅ a.denom)","proof":["a.denom ⋅ a.num = a.num ⋅ a.denom"]}
{"goal":"a.num ⋅ a.denom != ℤ.0","proof":["a.num ⋅ a.denom != ℤ.0 or a.num = ℤ.0 or a.denom = ℤ.0","reduce(a.num, a.denom) = a","a.denom = ℤ.0 or a.num = ℤ.0","reduce(ℤ.0, a.denom) = 0","a.denom != ℤ.0","a.num = ℤ.0","reduce(a.num, a.denom) != 0"]}
{"goal":"a ⋅ a.reciprocal = 1","proof":["reduce(a.num ⋅ a.denom, a.num ⋅ a.denom) = 1 or a.num ⋅ a.denom = ℤ.0","reduce(a.num ⋅ a.denom, a.num ⋅ a.denom) != 1","reduce(a.num ⋅ a.denom, a.num ⋅ a.denom) = 1"]}
{"goal":"mul_inv_cancels_right_raw","proof":[]}
{"goal":"mul_inv_cancels_left_raw","proof":["a ⋅ a.reciprocal = 1 or 0 = a","a ⋅ a.reciprocal = a.reciprocal ⋅ a","a ⋅ a.reciprocal = 1","a ⋅ a.reciprocal != 1"]}
{"goal":"mul_inv_cancels_right","proof":["a ⋅ 1 / a = a / a","a / a != 1","a ⋅ a.reciprocal = 1 or 0 = a","a ⋅ a.reciprocal = a / a","a ⋅ a.reciprocal = 1","a ⋅ a.reciprocal != 1"]}
{"goal":"mul_inv_cancels_left","proof":["a ⋅ 1 / a = 1 or 0 = a","a ⋅ 1 / a = 1 / a ⋅ a","a ⋅ 1 / a = 1","a ⋅ 1 / a != 1"]}
{"goal":"a ⋅ a.reciprocal = 1","proof":["a ⋅ a.reciprocal = 1 or 0 = a"]}
{"goal":"ℚ.new(a.reciprocal.num, a.reciprocal.denom) / a ⋅ a = ℚ.new(a.reciprocal.num, a.reciprocal.denom)","proof":["ℚ.new(a.reciprocal.num, a.reciprocal.denom) ⋅ a.reciprocal ⋅ a = ℚ.new(a.reciprocal.num, a.reciprocal.denom) ⋅ (a.reciprocal ⋅ a)","ℚ.new(a.reciprocal.num, a.reciprocal.denom) ⋅ a.reciprocal = ℚ.new(a.reciprocal.num, a.reciprocal.denom) / a","a ⋅ a.reciprocal = a.reciprocal ⋅ a","ℚ.new(a.reciprocal.num, a.reciprocal.denom) ⋅ 1 = ℚ.new(a.reciprocal.num, a.reciprocal.denom)"]}
{"goal":"a.reciprocal != 0","proof":["a ⋅ 0 = 0 ⋅ a","a ⋅ 0 = 0","1 ⋅ a = a"]}
{"goal":"(a ⋅ a.reciprocal) / a.reciprocal = a","proof":["a ⋅ (a.reciprocal ⋅ a.reciprocal.reciprocal) = a ⋅ a.reciprocal ⋅ a.reciprocal.reciprocal","a.reciprocal ⋅ a.reciprocal.reciprocal = 1 or a.reciprocal = 0","1 ⋅ a.reciprocal.reciprocal = 1 / a.reciprocal","a ⋅ 1 = a","a.reciprocal ⋅ a.reciprocal.reciprocal = 1"]}
{"goal":"1 ⋅ a.reciprocal.reciprocal = a","proof":["1 / a.reciprocal = a","1 ⋅ a.reciprocal.reciprocal = 1 / a.reciprocal"]}
{"goal":"reciprocal_inverts_raw","proof":["1 / a.reciprocal = a","1 / a.reciprocal = a.reciprocal.reciprocal"]}
{"goal":"reciprocal_inverts","proof":["a.reciprocal.reciprocal = a or 0 = a","1 / a = a.reciprocal","1 / a.reciprocal = a.reciprocal.reciprocal","1 / a.reciprocal != a","a.reciprocal.reciprocal = a","a.reciprocal.reciprocal != a"]}
{"goal":"sub_zero","proof":["ℚ.new(-0.num, 0.denom) = -0","a + -0 = a - 0","a + -0 = -0 + a","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","1 ⋅ a = a","0 + 1 ⋅ a = 1 ⋅ a","ℚ.from_int(ℤ.0).num = ℤ.0"]}
{"goal":"zero_lt_pos","proof":["(a - 0).is_positive = 0 < a","(a - 0).is_positive != a.is_positive","a - 0 != a","a - 0 = a"]}
{"goal":"neg_lt_zero","proof":["(0 - a).is_positive = a < 0","0 + -a = 0 - a","(ℤ.0 - a.num).is_positive = a.num < ℤ.0","(-a).num = -a.num","a.num.is_negative = a.is_negative","(0 - a).num.is_positive = (0 - a).is_positive","a.num < ℤ.0 = a.num.is_negative","ℤ.0 - a.num = -a.num","0 + -a = -a"]}
{"goal":"not_pos_and_neg","proof":["a > 0 = 0 < a","0 < a","a < 0 = a.is_negative","a.is_negative","0 < a = a.is_positive","a.is_positive","a.num.is_negative = a.is_negative","a.num.is_negative","a.num.is_positive = a.is_positive","not a.num.is_positive or not a.num.is_negative","a.num.is_positive","not a.num.is_positive"]}
{"goal":"b != ℤ.0","proof":["b > b","not b < b or not b < b","b > b = b < b","b < b"]}
{"goal":"exists(k0: ℤ) { reduce(a, b).num ⋅ k0 = a and reduce(a, b).denom ⋅ k0 = b }","proof":["let s0: (ℤ, ℤ) -> ℤ satisfy { forall(x0: ℤ, x1: ℤ) { reduce(x0, x1).num ⋅ s0(x0, x1) = x0 or ℤ.0 = x1 } and forall(x2: ℤ, x3: ℤ) { reduce(x2, x3).denom ⋅ s0(x2, x3) = x3 or ℤ.0 = x3 } }","reduce(a, b).denom ⋅ s0(a, b) != b or reduce(a, b).num ⋅ s0(a, b) != a","reduce(a, b).denom ⋅ s0(a, b) = b or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a or ℤ.0 = b","reduce(a, b).num ⋅ s0(a, b) = a","reduce(a, b).denom ⋅ s0(a, b) = b"]}
{"goal":"reduce(a, b).denom > ℤ.0","proof":["is_reduced(-reduce(a, b).num, reduce(a, b).denom)","not is_reduced(-reduce(a, b).num, reduce(a, b).denom) or reduce(a, b).denom > ℤ.0","not is_reduced(-reduce(a, b).num, reduce(a, b).denom)"]}
{"goal":"d > ℤ.0","proof":["not reduce(a, b).denom > ℤ.0 or reduce(a, b).denom ⋅ d > ℤ.0 = d > ℤ.0","not reduce(a, b).denom ⋅ d > ℤ.0 or not reduce(a, b).denom > ℤ.0 or d > ℤ.0","not reduce(a, b).denom ⋅ d > ℤ.0 or not reduce(a, b).denom > ℤ.0","reduce(a, b).denom ⋅ d > ℤ.0","not reduce(a, b).denom ⋅ d > ℤ.0"]}
{"goal":"reduce(a, b).num > ℤ.0","proof":["a - ℤ.0 > ℤ.0 = a > ℤ.0","d ⋅ reduce(a, b).num - ℤ.0 > ℤ.0 = d ⋅ reduce(a, b).num > ℤ.0","d ⋅ reduce(a, b).num = reduce(a, b).num ⋅ d"]}
{"goal":"reduce_pos_pos","proof":["reduce(a, b) > 0 = 0 < reduce(a, b)","reduce(a, b).num > ℤ.0 = ℤ.0 < reduce(a, b).num","0 < reduce(a, b) = reduce(a, b).is_positive","reduce(a, b).num.is_positive = reduce(a, b).is_positive","ℤ.0 < reduce(a, b).num = reduce(a, b).num.is_positive"]}
{"goal":"a + b = reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom)","proof":["reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom) = a + b"]}
{"goal":"a.num ⋅ b.denom > ℤ.0","proof":["not a.num.is_positive or not b.denom.is_positive or (a.num ⋅ b.denom).is_positive","a > 0 = 0 < a","0 < a","a.num ⋅ b.denom > ℤ.0 = ℤ.0 < a.num ⋅ b.denom","not ℤ.0 < a.num ⋅ b.denom","0 < a = a.is_positive","a.is_positive","a.num.is_positive = a.is_positive","ℤ.0 < a.num ⋅ b.denom = (a.num ⋅ b.denom).is_positive","not (a.num ⋅ b.denom).is_positive","b.denom.is_positive","a.num.is_positive","not a.num.is_positive"]}
{"goal":"b.num ⋅ a.denom > ℤ.0","proof":["not b.num.is_positive or not a.denom.is_positive or (b.num ⋅ a.denom).is_positive","b > 0 = 0 < b","0 < b","b.num ⋅ a.denom > ℤ.0 = ℤ.0 < b.num ⋅ a.denom","not ℤ.0 < b.num ⋅ a.denom","0 < b = b.is_positive","b.is_positive","b.num.is_positive = b.is_positive","ℤ.0 < b.num ⋅ a.denom = (b.num ⋅ a.denom).is_positive","not (b.num ⋅ a.denom).is_positive","a.denom.is_positive","b.num.is_positive","not b.num.is_positive"]}
{"goal":"a.num ⋅ b.denom + b.num ⋅ a.denom > ℤ.0","proof":["not (a.num ⋅ b.denom).is_positive or (a.num ⋅ b.denom + b.num ⋅ a.denom).is_positive or (b.num ⋅ a.denom).is_negative","a.num ⋅ b.denom + b.num ⋅ a.denom > ℤ.0 = ℤ.0 < a.num ⋅ b.denom + b.num ⋅ a.denom","a.num ⋅ b.denom > ℤ.0 = ℤ.0 < a.num ⋅ b.denom","b.num ⋅ a.denom > ℤ.0 = ℤ.0 < b.num ⋅ a.denom","not ℤ.0 < a.num ⋅ b.denom + b.num ⋅ a.denom","ℤ.0 < a.num ⋅ b.denom + b.num ⋅ a.denom = (a.num ⋅ b.denom + b.num ⋅ a.denom).is_positive","ℤ.0 < a.num ⋅ b.denom = (a.num ⋅ b.denom).is_positive","ℤ.0 < b.num ⋅ a.denom = (b.num ⋅ a.denom).is_positive","not (b.num ⋅ a.denom).is_positive or not (b.num ⋅ a.denom).is_negative","ℤ.0 < a.num ⋅ b.denom","ℤ.0 < b.num ⋅ a.denom","not (a.num ⋅ b.denom + b.num ⋅ a.denom).is_positive","(b.num ⋅ a.denom).is_positive","(a.num ⋅ b.denom).is_positive","not (b.num ⋅ a.denom).is_negative","(b.num ⋅ a.denom).is_negative"]}
{"goal":"a.denom ⋅ b.denom > ℤ.0","proof":["not a.denom.is_positive or not b.denom.is_positive or (a.denom ⋅ b.denom).is_positive","a.denom ⋅ b.denom > ℤ.0 = ℤ.0 < a.denom ⋅ b.denom","not ℤ.0 < a.denom ⋅ b.denom","ℤ.0 < a.denom ⋅ b.denom = (a.denom ⋅ b.denom).is_positive","not (a.denom ⋅ b.denom).is_positive","a.denom.is_positive","b.denom.is_positive"]}
{"goal":"add_pos_pos","proof":["reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom) = a + b","not a.num ⋅ b.denom + b.num ⋅ a.denom > ℤ.0 or not a.denom ⋅ b.denom > ℤ.0 or reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom) > 0","not reduce(a.num ⋅ b.denom + b.num ⋅ a.denom, a.denom ⋅ b.denom) > 0"]}
{"goal":"a ⋅ b = reduce(a.num ⋅ b.num, a.denom ⋅ b.denom)","proof":["reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) = a ⋅ b"]}
{"goal":"a.num ⋅ b.num > ℤ.0","proof":["not a.num.is_positive or not b.num.is_positive or (a.num ⋅ b.num).is_positive","a > 0 = 0 < a","b > 0 = 0 < b","0 < b","0 < a","a.num ⋅ b.num > ℤ.0 = ℤ.0 < a.num ⋅ b.num","not ℤ.0 < a.num ⋅ b.num","0 < a = a.is_positive","0 < b = b.is_positive","b.is_positive","a.is_positive","a.num.is_positive = a.is_positive","b.num.is_positive = b.is_positive","ℤ.0 < a.num ⋅ b.num = (a.num ⋅ b.num).is_positive","not (a.num ⋅ b.num).is_positive","not b.num.is_positive or not a.num.is_positive","b.num.is_positive","a.num.is_positive","not a.num.is_positive"]}
{"goal":"a.denom ⋅ b.denom > ℤ.0","proof":["not a.denom.is_positive or not b.denom.is_positive or (a.denom ⋅ b.denom).is_positive","a.denom ⋅ b.denom > ℤ.0 = ℤ.0 < a.denom ⋅ b.denom","not ℤ.0 < a.denom ⋅ b.denom","ℤ.0 < a.denom ⋅ b.denom = (a.denom ⋅ b.denom).is_positive","not (a.denom ⋅ b.denom).is_positive","a.denom.is_positive","b.denom.is_positive"]}
{"goal":"mul_pos_pos","proof":["reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) = a ⋅ b","not a.num ⋅ b.num > ℤ.0 or not a.denom ⋅ b.denom > ℤ.0 or reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) > 0","not reduce(a.num ⋅ b.num, a.denom ⋅ b.denom) > 0"]}
{"goal":"1 / a = reduce(a.denom, a.num)","proof":["reduce(a.denom, a.num) = a.reciprocal","1 / a != a.reciprocal","1 / a = a.reciprocal"]}
{"goal":"a.denom > ℤ.0","proof":["is_reduced(-a.num, a.denom)","not is_reduced(-a.num, a.denom) or a.denom > ℤ.0","not is_reduced(-a.num, a.denom)"]}
{"goal":"a.num > ℤ.0","proof":["a > 0 = 0 < a","a.num > ℤ.0 = ℤ.0 < a.num","0 < a = a.is_positive","a.num.is_positive = a.is_positive","ℤ.0 < a.num = a.num.is_positive"]}
{"goal":"pos_reciprocal","proof":[]}
{"goal":"pos_reciprocal_raw","proof":["not a > 0 or 1 / a > 0","1 / a = a.reciprocal","1 / a > 0","not 1 / a > 0"]}
{"goal":"1 / (1 / a) > 0","proof":["not 1 / a > 0 or 1 / (1 / a) > 0"]}
{"goal":"a != 0","proof":["reduce(a.denom, a.num) = a.reciprocal","not 1 / a > 0 or not 1 / a < 0","0 > 1 / a = 1 / a < 0","a.num != ℤ.0 or reduce(a.denom, a.num) = 0","1 / 0 = 0.reciprocal","a.num = ℤ.0","reduce(a.denom, a.num) = 0","not 1 / a < 0"]}
{"goal":"1 / (1 / a) = a","proof":["1 / (1 / a) = a or 0 = a"]}
{"goal":"a > 0","proof":["not 1 / (1 / a) > 0"]}
{"goal":"pos_reciprocal_iff","proof":["1 / a > 0 or a > 0","a > 0","not 1 / a > 0","not a > 0 or 1 / a > 0"]}
{"goal":"a + (-b + b) = a","proof":["a + 0 = 0 + a","-b + b = 0","a + 0 != a","0 + a != a","0 + a = a"]}
{"goal":"a + -b + b = a","proof":["a + (-b + b) = a + -b + b"]}
{"goal":"add_cancels_sub","proof":["a + -b = a - b"]}
{"goal":"a + (b + -b) = a","proof":["a + (-b + b) = a + -b + b","a + -b = a - b","a - b + b = a","b + -b = -b + b","a + (-b + b) != a","a + -b + b != a"]}
{"goal":"a + b + -b = a","proof":["a + (b + -b) = a + b + -b"]}
{"goal":"sub_cancels_add","proof":["a + b + -b = a + b - b"]}
{"goal":"sub_moves_sides","proof":["a + b - b = a"]}
{"goal":"add_cancel_right","proof":["b + c != a + c or b + c - c = a","b + c - c = b","b + c - c != a"]}
{"goal":"add_cancel_left","proof":["b + c != a + c or b = a","a + c = c + a","b + c = c + b","b + c != a + c","b + c = c + a"]}
{"goal":"neg_neg_is_pos","proof":["(0 - a).is_positive = a < 0","0 + -a = 0 - a","-a > 0 = 0 < -a","0 < -a = (-a).is_positive","0 + -a = -a"]}
{"goal":"neg_pos_is_neg","proof":["a > 0 = 0 < a","(-a).num = -a.num","-a < 0 = (-a).is_negative","0 < a = a.is_positive","(-a).num.is_negative = (-a).is_negative","a.num.is_positive = a.is_positive","(-a.num).is_negative = a.num.is_positive"]}
{"goal":"zero_minus","proof":["0 + -a = 0 - a","0 + -a != -a","0 + -a = -a"]}
{"goal":"a / b ⋅ b = a ⋅ b.reciprocal ⋅ b","proof":["a ⋅ b.reciprocal != a / b","a ⋅ b.reciprocal = a / b"]}
{"goal":"a / b ⋅ b = a ⋅ (b.reciprocal ⋅ b)","proof":["a ⋅ (b.reciprocal ⋅ b) = a ⋅ b.reciprocal ⋅ b"]}
{"goal":"a / b ⋅ b = a ⋅ 1","proof":["b.reciprocal ⋅ b = 1 or 0 = b","a ⋅ (b.reciprocal ⋅ b) != a ⋅ 1","b.reciprocal ⋅ b = 1","b.reciprocal ⋅ b != 1"]}
{"goal":"a / b ⋅ b = a","proof":["a ⋅ 1 != a","a ⋅ 1 = 1 ⋅ a","1 ⋅ a != a","1 ⋅ a = a"]}
{"goal":"mul_cancels_div","proof":[]}
{"goal":"b - a > 0","proof":["(b - a).is_positive = a < b","b - a > 0 = 0 < b - a","0 < b - a = (b - a).is_positive"]}
{"goal":"c - b > 0","proof":["(c - b).is_positive = b < c","c - b > 0 = 0 < c - b","0 < c - b = (c - b).is_positive"]}
{"goal":"c - a = c - b + (b - a)","proof":["c - b + (b + -a) = c - b + b + -a","b + -a = b - a","c + -a = c - a","c - b + b = c","c - b + (b + -a) != c - a","c - b + b + -a != c - a"]}
{"goal":"c - a > 0","proof":["not c - b > 0 or not b - a > 0 or c - b + (b - a) > 0","not c - b + (b - a) > 0"]}
{"goal":"lt_trans","proof":["(c - a).is_positive = a < c","not (c - a).is_positive","c - a > 0 = 0 < c - a","0 < c - a","0 < c - a = (c - a).is_positive"]}
{"goal":"a <= c","proof":[]}
{"goal":"a <= c","proof":[]}
{"goal":"a <= c","proof":["not a <= b or a < b or b = a","not b <= c or b < c or c = b","b < c","a < b","a < c","not a < c or a <= c"]}
{"goal":"lte_trans","proof":[]}
{"goal":"rat_is_transitive","proof":["let (s0: ((ℚ, ℚ) -> Bool) -> ℚ, s1: ((ℚ, ℚ) -> Bool) -> ℚ, s2: ((ℚ, ℚ) -> Bool) -> ℚ) satisfy { forall(x0: (ℚ, ℚ) -> Bool, x1: ℚ, x2: ℚ, x3: ℚ) { not is_transitive[ℚ](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (ℚ, ℚ) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[ℚ](x4) } and forall(x5: (ℚ, ℚ) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[ℚ](x5) } and forall(x6: (ℚ, ℚ) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[ℚ](x6) } }","not s0(ℚ.lt) < s1(ℚ.lt) or not s1(ℚ.lt) < 0 + s2(ℚ.lt) or s0(ℚ.lt) < 0 + s2(ℚ.lt)","not s0(ℚ.lt) < s2(ℚ.lt) or is_transitive[ℚ](ℚ.lt)","not s0(ℚ.lt) < s2(ℚ.lt)","s1(ℚ.lt) < s2(ℚ.lt) or is_transitive[ℚ](ℚ.lt)","s1(ℚ.lt) < s2(ℚ.lt)","s0(ℚ.lt) < s1(ℚ.lt) or is_transitive[ℚ](ℚ.lt)","s0(ℚ.lt) < s1(ℚ.lt)","0 + s2(ℚ.lt) = s2(ℚ.lt)","s1(ℚ.lt) < 0 + s2(ℚ.lt)","not s0(ℚ.lt) < 0 + s2(ℚ.lt)","not s1(ℚ.lt) < 0 + s2(ℚ.lt) or s0(ℚ.lt) < 0 + s2(ℚ.lt)"]}
{"goal":"gt_trans","proof":["not c < b or not b < a or c < a","a > b = b < a","a > c = c < a","b > c = c < b","not c < a","c < b","b < a","not c < b or not b < a"]}
{"goal":"c <= b","proof":["not b >= c or b > c or c = b","b > c = c < b","not c < b or c <= b","not c < b","c != b or c <= b","c != b","not b > c","b > c"]}
{"goal":"b <= a","proof":["not a >= b or a > b or b = a","a > b = b < a","not b < a or b <= a","not b < a","b != a or b <= a","b != a","not a > b","a > b"]}
{"goal":"c <= a","proof":["not c <= b or not b <= a or c <= a","not c <= b or not b <= a"]}
{"goal":"gte_trans","proof":["not c <= a or c < a or c = a","not a > c or a >= c","not a > c","a > c = c < a","not c < a","c = a","c != a or a >= c"]}
{"goal":"-(a - b) = -(a + -b)","proof":["a + -b != a - b","a + -b = a - b"]}
{"goal":"-(a - b) = -a + --b","proof":["a ⋅ -1 + -b ⋅ -1 = (a + -b) ⋅ -1","(a + -b) ⋅ -1 = -(a + -b)","-b ⋅ -1 = --b","a ⋅ -1 = -a"]}
{"goal":"-(a - b) = -a + b","proof":["ℚ.new(-(-b).num, (-b).denom) = --b","(-b).num = -b.num","ℚ.new(b.num, b.denom) = b","(-b).denom = b.denom","--b.num = b.num","-a + --b != -a + b","--b != b"]}
{"goal":"-(a - b) = b + -a","proof":["b + -a != -a + b","b + -a = -a + b"]}
{"goal":"neg_sub","proof":["b + -a != b - a","b + -a = b - a"]}
{"goal":"compare_by_gt_zero","proof":["(a - b).is_positive = b < a","a - b > 0 = 0 < a - b","a > b = b < a","0 < a - b != a > b","0 < a - b != b < a","0 < a - b = (a - b).is_positive"]}
{"goal":"a - b >= 0 implies a >= b","proof":["a - b > 0 = a > b","not a - b >= 0 or a - b > 0 or a - b = 0","a - b + b = a","not a > b or a >= b","not a > b","0 + b != a or a >= 0 + b","0 + b = b","not a >= 0 + b","a - b > 0 or a - b = 0","0 + b != a","not a - b > 0","a - b = 0"]}
{"goal":"compare_by_gte_zero","proof":["a - b >= 0 or a >= b","a >= b","not a - b >= 0","a - b > 0 = a > b","not a >= b or a > b or b = a","not a - b > 0 or a - b >= 0","a - b != 0 or a - b >= 0","a - a = 0","a > b or b = a","a - b != 0","not a - b > 0","not a > b","b = a"]}
{"goal":"lt_acyclic_zero","proof":["not a > 0 or not a < 0","not a > 0","a > 0 = 0 < a"]}
{"goal":"0 < b - a","proof":["b - a > 0 = b > a","b - a > 0 = 0 < b - a","b > a = a < b"]}
{"goal":"not b - a < 0","proof":["not b - a < 0 or not 0 < b - a"]}
{"goal":"not 0 < a - b","proof":["-(b - a) = a - b","-(b - a) > 0 = b - a < 0","a - b > 0 = 0 < a - b"]}
{"goal":"not b < a","proof":["a - b > 0 = a > b","-(b - a) = a - b","-(b - a) > 0 = b - a < 0","a > b = b < a"]}
{"goal":"lt_acyclic","proof":[]}
{"goal":"rat_is_acyclic","proof":["let (s0: ((ℚ, ℚ) -> Bool) -> ℚ, s1: ((ℚ, ℚ) -> Bool) -> ℚ) satisfy { forall(x0: (ℚ, ℚ) -> Bool, x1: ℚ, x2: ℚ) { not is_acyclic[ℚ](x0) or not x0(x1, x2) or not x0(x2, x1) } and forall(x3: (ℚ, ℚ) -> Bool) { x3(s0(x3), s1(x3)) or is_acyclic[ℚ](x3) } and forall(x4: (ℚ, ℚ) -> Bool) { x4(s1(x4), s0(x4)) or is_acyclic[ℚ](x4) } }","s1(ℚ.lt) < s0(ℚ.lt) or is_acyclic[ℚ](ℚ.lt)","s1(ℚ.lt) < s0(ℚ.lt)","s0(ℚ.lt) < s1(ℚ.lt) or is_acyclic[ℚ](ℚ.lt)","s0(ℚ.lt) < s1(ℚ.lt)","not s0(ℚ.lt) < s1(ℚ.lt) or not s1(ℚ.lt) < s0(ℚ.lt)"]}
{"goal":"is_acyclic[ℚ](ℚ.lt) and is_transitive[ℚ](ℚ.lt)","proof":["not is_transitive[ℚ](ℚ.lt)"]}
{"goal":"one_neq_zero","proof":["ℚ.from_int(ℤ.1) != ℚ.from_int(ℤ.0) or ℤ.1 = ℤ.0","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int(ℤ.1) = 0","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.1)","ℚ.from_int(ℤ.1) = ℚ.from_int(ℤ.0)","ℤ.1 = ℤ.0"]}
{"goal":"two_neq_zero","proof":["ℚ.new(0.num, 0.denom) = 0","ℕ.1 - ℕ.1 = lib(nat.nat_base).bounded_sub(ℕ.1, ℕ.1)","ℕ.2 - ℕ.1 = lib(nat.nat_base).bounded_sub(ℕ.2, ℕ.1)","ℕ.4 - ℕ.1 = lib(nat.nat_base).bounded_sub(ℕ.4, ℕ.1)","ℕ.5 - ℕ.1 = lib(nat.nat_base).bounded_sub(ℕ.5, ℕ.1)","ℕ.6 - ℕ.1 = lib(nat.nat_base).bounded_sub(ℕ.6, ℕ.1)","ℕ.2 + ℕ.1 = ℕ.1 + ℕ.2","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.new(ℤ.1, ℤ.1) = ℚ.from_int(ℤ.1)","lib(int.int_base).sub_nat(ℕ.1, ℕ.0) = ℤ.from_nat(ℕ.1)","lib(int.int_base).sub_nat(ℕ.2, ℕ.0) = ℤ.from_nat(ℕ.2)","ℚ.from_int(ℤ.0).num = ℤ.0","ℚ.from_int(ℤ.1 + ℤ.1).num = ℤ.1 + ℤ.1","lib(int.int_base).abs(ℤ.from_nat(ℕ.3 - ℕ.1)) = ℕ.3 - ℕ.1","ℕ.0 + ℕ.1 = ℕ.1"]}
{"goal":"2 ⋅ r = reduce(ℤ.2 ⋅ r.num, ℤ.1 ⋅ r.denom)","proof":["reduce(ℤ.2 ⋅ r.num, r.denom) = ℚ.from_int(ℤ.2) ⋅ r","ℤ.1 ⋅ r.denom = r.denom","reduce(ℤ.2 ⋅ r.num, r.denom) != 2 ⋅ r","ℚ.from_int(ℤ.2) ⋅ r != 2 ⋅ r","ℚ.from_int(ℤ.2) != 2"]}
{"goal":"2 ⋅ r = reduce(r.num + r.num, r.denom)","proof":["reduce(ℤ.2 ⋅ r.num, r.denom) = ℚ.from_int(ℤ.2) ⋅ r","r.num + r.num = ℤ.2 ⋅ r.num","reduce(ℤ.2 ⋅ r.num, r.denom) != 2 ⋅ r","ℚ.from_int(ℤ.2) ⋅ r != 2 ⋅ r","ℚ.from_int(ℤ.2) != 2"]}
{"goal":"r + r = reduce(r.num + r.num, r.denom)","proof":["reduce(r.num, r.denom) + reduce(r.num, r.denom) = reduce(r.num + r.num, r.denom)","reduce(r.num, r.denom) = r"]}
{"goal":"times_two","proof":["reduce(r.num + r.num, r.denom) != 2 * r"]}
{"goal":"a ⋅ c ⋅ c.reciprocal = b ⋅ c ⋅ c.reciprocal","proof":["b ⋅ c != a ⋅ c"]}
{"goal":"a ⋅ (c ⋅ c.reciprocal) = b ⋅ (c ⋅ c.reciprocal)","proof":["a ⋅ (c ⋅ c.reciprocal) = a ⋅ c ⋅ c.reciprocal","b ⋅ (c ⋅ c.reciprocal) = b ⋅ c ⋅ c.reciprocal"]}
{"goal":"a ⋅ 1 = b ⋅ 1","proof":["b != a","c ⋅ c.reciprocal = 1 or 0 = c","a ⋅ (c ⋅ c.reciprocal) = c ⋅ c.reciprocal ⋅ a","b ⋅ (c ⋅ c.reciprocal) = c ⋅ c.reciprocal ⋅ b","1 ⋅ a = a","1 ⋅ b = b","c ⋅ c.reciprocal = 1"]}
{"goal":"a = b","proof":["a ⋅ 1 = 1 ⋅ a","b ⋅ 1 = 1 ⋅ b","1 ⋅ a = a","1 ⋅ b = b"]}
{"goal":"mul_cancels_right","proof":[]}
{"goal":"mul_cancels_left","proof":["b ⋅ c != a ⋅ c or 0 = c or b = a","a ⋅ c = c ⋅ a","b ⋅ c = c ⋅ b","b ⋅ c != a ⋅ c or 0 = c","b ⋅ c != a ⋅ c"]}
{"goal":"r / 2 ⋅ 2 = r","proof":["r / 2 ⋅ 2 = r or 2 = 0","2 = 0"]}
{"goal":"half_plus_half","proof":["r / 2 + r / 2 = 2 ⋅ r / 2","2 ⋅ r / 2 != r","r / 2 ⋅ 2 = 2 ⋅ r / 2"]}
{"goal":"neg_mul","proof":["-1 ⋅ a ⋅ b = -1 ⋅ (a ⋅ b)","-1 ⋅ (a ⋅ b) = -(a ⋅ b)","-1 ⋅ a = -a","-1 ⋅ a ⋅ b != -(a ⋅ b)"]}
{"goal":"-a > 0","proof":["-a > 0 = a < 0"]}
{"goal":"-a ⋅ b > 0","proof":["not -a > 0 or not b > 0 or -a ⋅ b > 0"]}
{"goal":"a ⋅ b < 0","proof":["-a ⋅ b = -(a ⋅ b)","-(a ⋅ b) > 0 = a ⋅ b < 0"]}
{"goal":"mul_neg_pos","proof":[]}
{"goal":"mul_pos_neg","proof":["not a > 0 or not b < 0 or b ⋅ a < 0","b ⋅ a = a ⋅ b","not b ⋅ a < 0"]}
{"goal":"-a > 0","proof":["-a > 0 = a < 0"]}
{"goal":"-a ⋅ b < 0","proof":["not -a > 0 or not b < 0 or -a ⋅ b < 0"]}
{"goal":"mul_neg_neg","proof":["-a ⋅ b = -(a ⋅ b)","-(a ⋅ b) < 0 = a ⋅ b > 0"]}
{"goal":"one_is_pos","proof":["1 > 0 = 0 < 1","0 < 1 = 1.is_positive","1.num.is_positive = 1.is_positive","ℚ.from_int(ℤ.1).num = ℤ.1"]}
{"goal":"two_is_pos","proof":["not 1 > 0 or not 1 > 0 or 1 + 1 > 0","2 ⋅ 1 = 1 + 1","2 ⋅ 1 = 2","not 2 ⋅ 1 > 0","not 1 + 1 > 0","not 1 > 0"]}
{"goal":"half_is_pos","proof":["1 / 2 > 0 = 2 > 0","not 2 > 0"]}
{"goal":"a - (a + b) = a + (-a + -b)","proof":["a + (-a + -b) = a + -a + -b","a + -a + -b != a - (a + b)","-(a + b - a) = a - (a + b)","b + a - a = b","b + a = a + b","a + -a = 0","a - (a + b) != 0 + -b","0 + -b = -b","a - (a + b) != -b","-(a + b - a) != -b","a + b - a != b"]}
{"goal":"a - (a + b) = a + -a + -b","proof":["a + (-a + -b) = a + -a + -b"]}
{"goal":"a - (a + b) = -b","proof":["a + -a + -b = a + -a - b","0 - b = -b","a + -a = 0"]}
{"goal":"sub_add_quasi_cancel","proof":[]}
{"goal":"not_lt_self","proof":["not a < a or not a < a"]}
{"goal":"not_lt_both_ways","proof":["not a < b or not b < a"]}
{"goal":"a + b - a = b","proof":["b + a - a = b","a + b = b + a"]}
{"goal":"b > 0","proof":[]}
{"goal":"lt_add_pos","proof":["a + b - a > 0 = a + b > a","a + b > a = a < a + b"]}
{"goal":"a > 0","proof":["a > 0 = 0 < a","not 0 < a","a.num > ℤ.0 = ℤ.0 < a.num","ℤ.0 < a.num","0 < a = a.is_positive","not a.is_positive","a.num.is_positive = a.is_positive","not a.num.is_positive","ℤ.0 < a.num = a.num.is_positive"]}
{"goal":"a < 0","proof":["a < 0 = a.is_negative","not a.is_negative","a.num.is_negative = a.is_negative","not a.num.is_negative","a.num < ℤ.0 = a.num.is_negative"]}
{"goal":"a.num = ℤ.0","proof":["a.num > ℤ.0 or a.num < ℤ.0 or a.num = ℤ.0"]}
{"goal":"a = 0","proof":["reduce(a.num, a.denom) = a","reduce(a.num, a.denom) != 0","reduce(ℤ.0, a.denom) = 0"]}
{"goal":"single_trichotomy","proof":["a.num < ℤ.0","a < 0 = a.is_negative","not a.is_negative","a.num.is_negative = a.is_negative","not a.num.is_negative","a.num < ℤ.0 = a.num.is_negative"]}
{"goal":"a > b","proof":["a - b > 0 = a > b"]}
{"goal":"(b - a).is_positive","proof":["b - a > 0 = b > a","-(a - b) = b - a","-(a - b) > 0 = a - b < 0","(b - a).is_positive = a < b","b > a = a < b"]}
{"goal":"a < b","proof":["(b - a).is_positive = a < b"]}
{"goal":"a - b = 0","proof":["a - b > 0 or a - b < 0 or a - b = 0"]}
{"goal":"a = b","proof":["a - b + b = a","0 + b = b","0 + b != a"]}
{"goal":"trichotomy","proof":["b - a > 0 = b > a","-(a - b) = b - a","-(a - b) > 0 = a - b < 0","b > a = a < b"]}
{"goal":"forall(x0: ℚ, x1: ℚ) { x0.comparable(x1) }","proof":["let (s0: ℚ, s1: ℚ) satisfy { not s0.comparable(s1) }","s0 > s1 or s0 < s1 or s1 = s0","not s1 < s0 or s0.comparable(s1)","not s1 < s0","not s0 < s1 or s0.comparable(s1)","not s0 < s1","s0 > s1 = s1 < s0","s1 != s0 or s0.comparable(s1)","s1 != s0","not s0 > s1","s0 > s1"]}
{"goal":"a > 0 implies not a <= 0","proof":["not a <= 0 or a < 0 or 0 = a","a < 0 or 0 = a","not a > 0 or not a < 0","a > 0 = 0 < a","0 < a","not a < a","not a < 0","0 = a"]}
{"goal":"pos_is_not_lte_zero","proof":["not a > 0 or a <= 0","not a > 0","not a <= 0","a > 0 or a < 0 or 0 = a","not a < 0 or a <= 0","0 != a or a <= 0","0 != a","not a < 0","a < 0"]}
{"goal":"a < 0 implies not a >= 0","proof":["not a >= 0 or a > 0 or 0 = a","a > 0 or 0 = a","not a > 0 or not a < 0","not a < a","not a > 0","0 = a"]}
{"goal":"neg_is_not_gte_zero","proof":["not a >= 0 or a < 0","not a >= 0","not a < 0","a > 0 or a < 0 or 0 = a","not a > 0 or a >= 0","not a > 0","0 != a or a >= 0","0 = a","0 != a"]}
{"goal":"a > b implies not a <= b","proof":["not a <= b or a < b or b = a","a < b or b = a","not a < b or not b < a","a > b = b < a","b < a","not a < a","not a < b","b = a"]}
{"goal":"gt_is_not_lte","proof":["not a > b or a <= b","not a > b","not a <= b","a > b or a < b or b = a","not a < b or a <= b","b != a or a <= b","b != a","not a < b","a < b"]}
{"goal":"a < b implies not a >= b","proof":["not a >= b or a > b or b = a","a > b or b = a","not b < a or not a < b","a > b = b < a","not a < a","not b < a","not a > b","b = a"]}
{"goal":"lt_is_not_gte","proof":["not a >= b or a < b","not a >= b","not a < b","a > b or a < b or b = a","not a > b or a >= b","not a > b","b != a or a >= b","b = a","b != a"]}
{"goal":"neg_order","proof":["-a < 0 = a > 0"]}
{"goal":"neg_reciprocal_iff","proof":["0 - 1 / a > 0 = 0 > 1 / a","1 / -a > 0 = -a > 0","1 / -a = -1 / a","-(1 / a - 0) = 0 - 1 / a","-a > 0 = a < 0","0 > 1 / a = 1 / a < 0","1 / a = a.reciprocal","a.reciprocal - 0 = a.reciprocal"]}
{"goal":"b - a > 0","proof":["b - a > 0 = b > a","not b > a","b > a = a < b"]}
{"goal":"b + c - (a + c) = b + c + -(a + c)","proof":["b + c + -(a + c) = b + c - (a + c)"]}
{"goal":"-a + -c = -(a + c)","proof":["a ⋅ -1 + c ⋅ -1 = (a + c) ⋅ -1","(a + c) ⋅ -1 = -(a + c)","a ⋅ -1 = -a","c ⋅ -1 = -c"]}
{"goal":"b + c - (a + c) = b + (c + -c) + -a","proof":["b + (c + -c) = b + c + -c","b + c + (-c + -a) = b + c + -c + -a","-c + -a = -a + -c"]}
{"goal":"b + c - (a + c) = b + -a","proof":["b + (c + -c + -a) = b + (c + -c) + -a","c + -c = 0","0 + -a = -a"]}
{"goal":"b + c - (a + c) > 0","proof":["not b + -a > 0","b + -a = b - a"]}
{"goal":"lt_add_right","proof":["(b + c - (a + c)).is_positive = a + c < b + c","(b - a).is_positive = a < b","b + -a = b - a"]}
{"goal":"lt_add_left","proof":["not a < b or a + c < b + c","c + a = a + c","c + b = b + c","not a + c < c + b","not a + c < b + c"]}
{"goal":"lte_add_right","proof":["not a < b or a + c < b + c","not a <= b or a < b or b = a","not a + c < b + c or a + c <= b + c","b + c != a + c or a + c <= b + c","b + c != a + c","b != a","a < b","not a + c < b + c"]}
{"goal":"lte_add_left","proof":["not a <= b or a + c <= b + c","c + a = a + c","c + b = b + c","not a + c <= c + b","not a + c <= b + c"]}
{"goal":"add_neg_lt","proof":["b - (b + a) > 0 = b > b + a","b - (b + a) = -a","-a > 0 = a < 0","b > b + a = b + a < b"]}
{"goal":"a + c < b + c","proof":["not a < b or a + c < b + c"]}
{"goal":"b + c < b + d","proof":["not c < d or c + b < d + b","c + b = b + c","d + b = b + d","not c + b < b + d","c + b < d + b"]}
{"goal":"adding_lts","proof":["not a + c < b + c or not b + c < b + d or a + c < b + d","not b + c < b + d or not a + c < b + c"]}
{"goal":"a - (a - b) = b","proof":["-(a - b) = b - a","a + -(a - b) = a - (a - b)","b - a + a = b","a + (b - a) = b - a + a","a + -(a - b) != b","a + (b - a) != b"]}
{"goal":"a - (a - b) > 0","proof":[]}
{"goal":"gt_minus_pos","proof":["a - (a - b) > 0 = a > a - b"]}
{"goal":"a - (b + c) = a + -(b + c)","proof":["a + -(b + c) = a - (b + c)"]}
{"goal":"a - (b + c) = a + (-b + -c)","proof":["-(0 - b) = b - 0","-(c - -b) = -b - c","-b + -c = -b - c","a + -(b + c) = a - (b + c)","c + --b = c - -b","c + b = b + c","0 - b = -b","b - 0 = b","a + (-b + -c) != a + -(b + c)","-b + -c != -(b + c)"]}
{"goal":"a - (b + c) = a + -b + -c","proof":["a + (-b + -c) = a + -b + -c"]}
{"goal":"a - (b + c) = a - b - c","proof":["a + -b + -c = a + -b - c","a + -b = a - b"]}
{"goal":"sub_add","proof":[]}
{"goal":"no_greatest","proof":["not a < a + 1 / 2","not 1 / 2 > 0 or a < a + 1 / 2","not 1 / 2 > 0"]}
{"goal":"ℚ.from_int(a) - ℚ.from_int(b) = ℚ.from_int(a) + -ℚ.from_int(b)","proof":["ℚ.from_int(a) + -ℚ.from_int(b) = ℚ.from_int(a) - ℚ.from_int(b)"]}
{"goal":"ℚ.from_int(a) - ℚ.from_int(b) = ℚ.from_int(a) + ℚ.from_int(-b)","proof":["ℚ.new(-ℚ.from_int(b).num, ℚ.from_int(b).denom) = -ℚ.from_int(b)","ℚ.from_int(a) + -ℚ.from_int(b) = ℚ.from_int(a) - ℚ.from_int(b)","ℚ.new(-b, ℤ.1) = ℚ.from_int(-b)","ℚ.from_int(b).denom = ℤ.1","ℚ.from_int(b).num = b","ℚ.from_int(a) + -ℚ.from_int(b) != ℚ.from_int(a) + ℚ.from_int(-b)","-ℚ.from_int(b) != ℚ.from_int(-b)"]}
{"goal":"ℚ.from_int(a) - ℚ.from_int(b) = ℚ.from_int(a + -b)","proof":["ℚ.from_int(a) + ℚ.from_int(-b) = ℚ.from_int(a + -b)"]}
{"goal":"ℚ.from_int(a) - ℚ.from_int(b) = ℚ.from_int(a - b)","proof":["ℚ.from_int(a + -b) != ℚ.from_int(a - b)","a + -b != a - b","a + -b = a - b"]}
{"goal":"sub_from_int","proof":[]}
{"goal":"ℚ.from_int(b) - ℚ.from_int(a) = ℚ.from_int(b - a)","proof":["ℚ.from_int(b) - ℚ.from_int(a) = ℚ.from_int(b - a)"]}
{"goal":"lt_from_int","proof":["(ℚ.from_int(b) - ℚ.from_int(a)).is_positive = ℚ.from_int(a) < ℚ.from_int(b)","(b - a).is_positive = a < b","(ℚ.from_int(b) - ℚ.from_int(a)).num.is_positive = (ℚ.from_int(b) - ℚ.from_int(a)).is_positive","ℚ.from_int(b - a).num = b - a"]}
{"goal":"lte_from_int","proof":["not a < b or ℚ.from_int(a) < ℚ.from_int(b)","not a <= b or a < b or b = a","not ℚ.from_int(a) < ℚ.from_int(b) or ℚ.from_int(a) <= ℚ.from_int(b)","not ℚ.from_int(a) < ℚ.from_int(b)","ℚ.from_int(b) != ℚ.from_int(a) or ℚ.from_int(a) <= ℚ.from_int(b)","ℚ.from_int(b) != ℚ.from_int(a)","b != a","not a < b","a < b"]}
{"goal":"gt_from_int","proof":["not b < a or ℚ.from_int(b) < ℚ.from_int(a)","ℚ.from_int(a) > ℚ.from_int(b) = ℚ.from_int(b) < ℚ.from_int(a)","not ℚ.from_int(b) < ℚ.from_int(a)","not b < a","a > b = b < a"]}
{"goal":"gte_from_int","proof":["not b <= a or ℚ.from_int(b) <= ℚ.from_int(a)","not ℚ.from_int(b) <= ℚ.from_int(a) or ℚ.from_int(b) < ℚ.from_int(a) or ℚ.from_int(b) = ℚ.from_int(a)","not ℚ.from_int(a) > ℚ.from_int(b) or ℚ.from_int(a) >= ℚ.from_int(b)","not ℚ.from_int(a) > ℚ.from_int(b)","ℚ.from_int(a) > ℚ.from_int(b) = ℚ.from_int(b) < ℚ.from_int(a)","a >= b = b <= a","b <= a","ℚ.from_int(b) != ℚ.from_int(a) or ℚ.from_int(a) >= ℚ.from_int(b)","ℚ.from_int(b) != ℚ.from_int(a)","not ℚ.from_int(b) < ℚ.from_int(a)","ℚ.from_int(b) <= ℚ.from_int(a)","not ℚ.from_int(b) <= ℚ.from_int(a)"]}
{"goal":"b - a > 0","proof":["b - a > 0 = b > a","not b > a","b > a = a < b"]}
{"goal":"c > 0","proof":[]}
{"goal":"(b - a) ⋅ c > 0","proof":["not b - a > 0 or not c > 0 or (b - a) ⋅ c > 0"]}
{"goal":"b ⋅ c - a ⋅ c > 0","proof":["b ⋅ c + -a ⋅ c = (b + -a) ⋅ c","-a ⋅ c = -(a ⋅ c)","b ⋅ c - a ⋅ c > 0 = b ⋅ c > a ⋅ c","((b - a) ⋅ c - 0).is_positive = 0 < (b - a) ⋅ c","(b ⋅ c - a ⋅ c).is_positive = a ⋅ c < b ⋅ c","b + -a = b - a","b ⋅ c + -(a ⋅ c) = b ⋅ c - a ⋅ c","(b - a) ⋅ c > 0 = 0 < (b - a) ⋅ c","b ⋅ c > a ⋅ c = a ⋅ c < b ⋅ c","(b - a) ⋅ c - 0 = (b - a) ⋅ c"]}
{"goal":"lt_mul_pos","proof":["b ⋅ c - a ⋅ c > 0 = b ⋅ c > a ⋅ c","b ⋅ c > a ⋅ c = a ⋅ c < b ⋅ c"]}
{"goal":"lte_mul_pos","proof":["not c > 0 or not a < b or a ⋅ c < b ⋅ c","not a <= b or a < b or b = a","not a ⋅ c < b ⋅ c or a ⋅ c <= b ⋅ c","b ⋅ c != a ⋅ c or a ⋅ c <= b ⋅ c","b ⋅ c != a ⋅ c","b != a","a < b","not a ⋅ c < b ⋅ c"]}
{"goal":"1 / c > 0","proof":["1 / c > 0 = c > 0"]}
{"goal":"a ⋅ 1 / c < b ⋅ 1 / c","proof":["not 1 / c > 0 or not a < b or a ⋅ 1 / c < b ⋅ 1 / c"]}
{"goal":"lt_div_pos","proof":["a ⋅ 1 / c = a / c","b ⋅ 1 / c = b / c"]}
{"goal":"lte_div_pos","proof":["not c > 0 or not a < b or a / c < b / c","not a <= b or a < b or b = a","not a / c < b / c or a / c <= b / c","b / c != a / c or a / c <= b / c","b / c != a / c","b != a","a < b","not a / c < b / c"]}
{"goal":"(a ⋅ b) / b = a ⋅ b / b","proof":["a ⋅ (b ⋅ b.reciprocal) = a ⋅ b ⋅ b.reciprocal","a ⋅ b ⋅ b.reciprocal = (a ⋅ b) / b","b ⋅ b.reciprocal = b / b","a ⋅ (b ⋅ b.reciprocal) != (a ⋅ b) / b"]}
{"goal":"(a ⋅ b) / b = a ⋅ 1","proof":["a ⋅ b / b != a ⋅ 1","b / b != 1","b ⋅ 1 / b = 1 or 0 = b","b ⋅ 1 / b = b / b","b ⋅ 1 / b = 1","b ⋅ 1 / b != 1"]}
{"goal":"mul_div_cancels","proof":["a ⋅ 1 != a","a ⋅ 1 = 1 ⋅ a","1 ⋅ a != a","1 ⋅ a = a"]}
{"goal":"ℚ.from_int(a.num) / ℚ.from_int(a.denom) = reduce(a.num, ℤ.1) ⋅ reduce(ℤ.1, a.denom)","proof":["ℚ.from_int(a.num) ⋅ reduce(ℤ.1, ℤ.1) = reduce(a.num ⋅ ℤ.1, ℤ.1)","ℚ.from_int(a.num) ⋅ ℚ.from_int(a.denom).reciprocal = ℚ.from_int(a.num) / ℚ.from_int(a.denom)","reduce(ℚ.from_int(a.denom).denom, ℚ.from_int(a.denom).num) = ℚ.from_int(a.denom).reciprocal","reduce(a.num, ℤ.1) ⋅ reduce(ℤ.1, a.denom) = reduce(ℤ.1, a.denom) ⋅ reduce(a.num, ℤ.1)","ℚ.from_int(a.denom).reciprocal ⋅ ℚ.from_int(a.num) = ℚ.from_int(a.num) ⋅ ℚ.from_int(a.denom).reciprocal","a.num ⋅ ℤ.1 = ℤ.1 ⋅ a.num","ℚ.from_int(a.num) ⋅ 1 = ℚ.from_int(a.num)","ℚ.from_int(a.denom).denom = ℤ.1","ℚ.from_int(a.denom).num = a.denom","ℤ.1 ⋅ a.num = a.num"]}
{"goal":"div_from_int","proof":["reduce(a.num, ℤ.1) ⋅ reduce(ℤ.1, a.denom) = reduce(a.num ⋅ ℤ.1, ℤ.1 ⋅ a.denom)","reduce(a.num, a.denom) = a","ℤ.1 ⋅ a.denom = a.denom","a.num ⋅ ℤ.1 = a.num"]}
{"goal":"ℚ.from_int(a.num) < ℚ.from_int(n ⋅ a.denom)","proof":["not a.num < n ⋅ a.denom or ℚ.from_int(a.num) < ℚ.from_int(n ⋅ a.denom)"]}
{"goal":"ℚ.from_int(a.num) < ℚ.from_int(n) ⋅ ℚ.from_int(a.denom)","proof":["ℚ.from_int(n) ⋅ ℚ.from_int(a.denom) = ℚ.from_int(n ⋅ a.denom)"]}
{"goal":"ℚ.from_int(a.denom) > 0","proof":["ℚ.from_int(a.denom) > 0 = 0 < ℚ.from_int(a.denom)","not 0 < ℚ.from_int(a.denom)","0 < ℚ.from_int(a.denom) = ℚ.from_int(a.denom).is_positive","not ℚ.from_int(a.denom).is_positive","ℚ.from_int(a.denom).num.is_positive = ℚ.from_int(a.denom).is_positive","ℚ.from_int(a.denom).num = a.denom","a.denom.is_positive","not ℚ.from_int(a.denom).num.is_positive"]}
{"goal":"ℚ.from_int(a.num) / ℚ.from_int(a.denom) < (ℚ.from_int(n) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom)","proof":["not ℚ.from_int(a.denom) > 0 or not ℚ.from_int(a.num) < ℚ.from_int(n) ⋅ ℚ.from_int(a.denom) or ℚ.from_int(a.num) / ℚ.from_int(a.denom) < (ℚ.from_int(n) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom)"]}
{"goal":"(ℚ.from_int(n) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom) = ℚ.from_int(n)","proof":["(ℚ.from_int(n) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom) = ℚ.from_int(n) or ℚ.from_int(a.denom) = 0","ℚ.from_int(a.denom) = 0","0 > 0","not 0 > 0 or not 0 < 0","0 > 0 = 0 < 0","not 0 < 0","0 < 0"]}
{"goal":"ℚ.from_int(a.num) / ℚ.from_int(a.denom) < ℚ.from_int(n)","proof":["not ℚ.from_int(a.num) / ℚ.from_int(a.denom) < (ℚ.from_int(n) * ℚ.from_int(a.denom)) / ℚ.from_int(a.denom)"]}
{"goal":"lt_from_int_mul_denom","proof":["ℚ.from_int(a.num) / ℚ.from_int(a.denom) = a"]}
{"goal":"a = ℚ.from_int(n)","proof":["a.num ⋅ ℤ.1 != n ⋅ a.denom or cross_equals(n, ℤ.1, a.num, a.denom) or a.denom = ℤ.0 or ℤ.1 = ℤ.0","a.num ⋅ ℤ.1 != n ⋅ a.denom or cross_equals(n, ℤ.1, a.num, a.denom) or ℤ.1 = ℤ.0 or a.denom = ℤ.0","not cross_equals(ℚ.from_int(n).num, ℚ.from_int(n).denom, a.num, a.denom) or ℚ.from_int(n) = a","ℚ.from_int(n).denom = ℤ.1","ℚ.from_int(n).num = n","a.num ⋅ ℤ.1 = a.num","a.denom != ℤ.0","not cross_equals(ℚ.from_int(n).num, ℚ.from_int(n).denom, a.num, a.denom)","not cross_equals(ℚ.from_int(n).num, ℤ.1, a.num, a.denom)","not cross_equals(n, ℤ.1, a.num, a.denom)","a.num ⋅ ℤ.1 = n ⋅ a.denom","a.num ⋅ ℤ.1 != n ⋅ a.denom"]}
{"goal":"a.num < n ⋅ a.denom","proof":["not a.num <= n ⋅ a.denom or a.num < n ⋅ a.denom or n ⋅ a.denom = a.num"]}
{"goal":"a < ℚ.from_int(n)","proof":["not a.num < n ⋅ a.denom or a < ℚ.from_int(n)"]}
{"goal":"lte_from_int_mul_denom","proof":["not a < ℚ.from_int(n) or a <= ℚ.from_int(n)","not a < ℚ.from_int(n)","ℚ.from_int(n) != a or a <= ℚ.from_int(n)","ℚ.from_int(n) != a","n * a.denom = a.num","n * a.denom != a.num"]}
{"goal":"a.denom > ℤ.0","proof":["is_reduced(-a.num, a.denom)","not is_reduced(-a.num, a.denom) or a.denom > ℤ.0","not is_reduced(-a.num, a.denom)"]}
{"goal":"exists(k0: ℤ, k1: ℤ) { ℤ.0 <= k1 and k1 < a.denom and a.num = k0 ⋅ a.denom + k1 }","proof":["let (s0: (ℤ, ℤ) -> ℤ, s1: (ℤ, ℤ) -> ℤ) satisfy { forall(x0: ℤ, x1: ℤ) { not x0.is_positive or ℤ.0 <= s1(x1, x0) } and forall(x2: ℤ, x3: ℤ) { not x2.is_positive or s1(x3, x2) < x2 } and forall(x4: ℤ, x5: ℤ) { not x4.is_positive or s0(x5, x4) ⋅ x4 + s1(x5, x4) = x5 } }","s0(a.num, a.denom) ⋅ a.denom + s1(a.num, a.denom) != a.num or not s1(a.num, a.denom) < a.denom or not ℤ.0 <= s1(a.num, a.denom)","not a.denom.is_positive or s0(a.num, a.denom) ⋅ a.denom + s1(a.num, a.denom) = a.num","not a.denom.is_positive or s1(a.num, a.denom) < a.denom","not a.denom.is_positive or ℤ.0 <= s1(a.num, a.denom)","a.denom > ℤ.0 = ℤ.0 < a.denom","ℤ.0 < a.denom","ℤ.0 < a.denom = a.denom.is_positive","a.denom.is_positive","ℤ.0 <= s1(a.num, a.denom)","s1(a.num, a.denom) < a.denom","s0(a.num, a.denom) ⋅ a.denom + s1(a.num, a.denom) = a.num"]}
{"goal":"ℚ.from_int(a.num) = ℚ.from_int(q ⋅ a.denom + r)","proof":["q ⋅ a.denom + r != a.num"]}
{"goal":"ℚ.from_int(a.num) = ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(r)","proof":["ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(r) = ℚ.from_int(q ⋅ a.denom + r)"]}
{"goal":"ℚ.from_int(r) >= ℚ.from_int(ℤ.0)","proof":["not r >= ℤ.0 or ℚ.from_int(r) >= ℚ.from_int(ℤ.0)","not r >= ℤ.0","r >= ℤ.0 = ℤ.0 <= r"]}
{"goal":"x0 + r >= x0 + ℤ.0","proof":["not ℤ.0 <= r or x0 + ℤ.0 <= x0 + r","x0 + r >= x0 + ℤ.0 = x0 + ℤ.0 <= x0 + r","not x0 + ℤ.0 <= x0 + r"]}
{"goal":"ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(r) >= ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(ℤ.0)","proof":["q ⋅ a.denom + r >= q ⋅ a.denom + ℤ.0","ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(r) = ℚ.from_int(q ⋅ a.denom + r)","ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(ℤ.0) = ℚ.from_int(q ⋅ a.denom + ℤ.0)","not ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(r) >= ℚ.from_int(q ⋅ a.denom + ℤ.0)","not q ⋅ a.denom + r >= q ⋅ a.denom + ℤ.0 or ℚ.from_int(q ⋅ a.denom + r) >= ℚ.from_int(q ⋅ a.denom + ℤ.0)","not ℚ.from_int(q ⋅ a.denom + r) >= ℚ.from_int(q ⋅ a.denom + ℤ.0)"]}
{"goal":"ℚ.from_int(a.num) >= ℚ.from_int(q ⋅ a.denom)","proof":["ℚ.from_int(q ⋅ a.denom) + ℚ.from_int(ℤ.0) = ℚ.from_int(ℤ.0) + ℚ.from_int(q ⋅ a.denom)","q ⋅ a.denom = a.denom ⋅ q","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","0 + ℚ.from_int(a.denom ⋅ q) = ℚ.from_int(a.denom ⋅ q)"]}
{"goal":"ℚ.from_int(a.num) >= ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)","proof":["ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) = ℚ.from_int(q ⋅ a.denom)"]}
{"goal":"ℚ.from_int(a.denom) > 0","proof":["ℚ.from_int(a.denom) > 0 = 0 < ℚ.from_int(a.denom)","a.denom > ℤ.0 = ℤ.0 < a.denom","0 < ℚ.from_int(a.denom) = ℚ.from_int(a.denom).is_positive","(-a).denom = a.denom","ℚ.from_int(a.denom).num.is_positive = ℚ.from_int(a.denom).is_positive","ℤ.0 < a.denom = a.denom.is_positive","ℚ.from_int((-a).denom).num = (-a).denom"]}
{"goal":"1 / ℚ.from_int(a.denom) > 0","proof":["1 / ℚ.from_int(a.denom) > 0 = ℚ.from_int(a.denom) > 0"]}
{"goal":"ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) ⋅ 1 / ℚ.from_int(a.denom) <= ℚ.from_int(a.num) ⋅ 1 / ℚ.from_int(a.denom)","proof":["not ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) <= ℚ.from_int(a.num)","not ℚ.from_int(a.num) >= ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) or ℚ.from_int(a.num) > ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) or ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) = ℚ.from_int(a.num)","ℚ.from_int(a.num) > ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) = ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) < ℚ.from_int(a.num)","not ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) < ℚ.from_int(a.num) or ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) <= ℚ.from_int(a.num)","ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) != ℚ.from_int(a.num) or ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) <= ℚ.from_int(a.num)","ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) != ℚ.from_int(a.num)","not ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) < ℚ.from_int(a.num)","ℚ.from_int(a.num) > ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)","not ℚ.from_int(a.num) > ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)"]}
{"goal":"ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) ⋅ 1 / ℚ.from_int(a.denom) = ℚ.from_int(q)","proof":["(ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom) = ℚ.from_int(q) or ℚ.from_int(a.denom) = 0","ℚ.from_int(q) ⋅ ℚ.from_int(a.denom) ⋅ 1 / ℚ.from_int(a.denom) = (ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom)","(ℚ.from_int(q) ⋅ ℚ.from_int(a.denom)) / ℚ.from_int(a.denom) != ℚ.from_int(q)","ℚ.from_int(a.denom) = 0","0 > 0","not 0 > 0 or not 0 < 0","0 > 0 = 0 < 0","not 0 < 0","0 < 0"]}
{"goal":"ℚ.from_int(q) <= ℚ.from_int(a.num) / ℚ.from_int(a.denom)","proof":["ℚ.from_int(a.num) ⋅ 1 / ℚ.from_int(a.denom) = ℚ.from_int(a.num) / ℚ.from_int(a.denom)"]}
{"goal":"ℚ.from_int(q) <= a","proof":["ℚ.from_int(a.num) / ℚ.from_int(a.denom) = a"]}
{"goal":"q ⋅ a.denom + r < q ⋅ a.denom + a.denom","proof":["not r < a.denom or q ⋅ a.denom + r < q ⋅ a.denom + a.denom"]}
{"goal":"q ⋅ a.denom + a.denom = (q + ℤ.1) ⋅ a.denom","proof":["q ⋅ a.denom + ℤ.1 ⋅ a.denom = (q + ℤ.1) ⋅ a.denom","ℤ.1 ⋅ a.denom = a.denom"]}
{"goal":"a.num < (q + ℤ.1) ⋅ a.denom","proof":[]}
{"goal":"a < ℚ.from_int(q + ℤ.1)","proof":["not a.num < (q + ℤ.1) ⋅ a.denom or a < ℚ.from_int(q + ℤ.1)"]}
{"goal":"floor_exists","proof":["not a < ℚ.from_int(q + ℤ.1) or not ℚ.from_int(q) <= a","not a < ℚ.from_int(q + ℤ.1)"]}
{"goal":"exists(k0: ℤ) { ℚ.from_int(k0) <= a and a < ℚ.from_int(k0 + ℤ.1) }","proof":["let s0: ℚ -> ℤ satisfy { forall(x0: ℚ) { ℚ.from_int(s0(x0)) <= x0 } and forall(x1: ℚ) { x1 < ℚ.from_int(s0(x1) + ℤ.1) } }","not a < ℚ.from_int(s0(a) + ℤ.1) or not ℚ.from_int(s0(a)) <= a","a < ℚ.from_int(s0(a) + ℤ.1)","ℚ.from_int(s0(a)) <= a"]}
{"goal":"a >= ℚ.from_int(a.floor)","proof":["not ℚ.from_int(floor_impl(a)) <= a or ℚ.from_int(floor_impl(a)) < a or ℚ.from_int(floor_impl(a)) = a","not a > ℚ.from_int(floor_impl(a)) or a >= ℚ.from_int(floor_impl(a))","a > ℚ.from_int(floor_impl(a)) = ℚ.from_int(floor_impl(a)) < a","ℚ.from_int(floor_impl(a)) <= a","ℚ.from_int(floor_impl(a)) != a or a >= ℚ.from_int(floor_impl(a))","a.floor = floor_impl(a)","not a >= ℚ.from_int(floor_impl(a))","ℚ.from_int(floor_impl(a)) != a","not a > ℚ.from_int(floor_impl(a))","ℚ.from_int(floor_impl(a)) < a","not ℚ.from_int(floor_impl(a)) < a"]}
{"goal":"ℚ.from_int(a.floor) > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1)","proof":["not ℚ.from_int(ℤ.1) > 0 or ℚ.from_int(a.floor) > ℚ.from_int(a.floor) - ℚ.from_int(ℤ.1)","ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1) = ℚ.from_int(a.floor) - ℚ.from_int(ℤ.1)","not ℚ.from_int(a.floor) > ℚ.from_int(a.floor) - ℚ.from_int(ℤ.1)","not ℚ.from_int(ℤ.1) > 0"]}
{"goal":"a > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1)","proof":["not a > ℚ.from_int(a.floor) or not ℚ.from_int(a.floor) > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1) or a > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1)","not a >= ℚ.from_int(a.floor) or a > ℚ.from_int(a.floor) or ℚ.from_int(a.floor) = a","not ℚ.from_int(a.floor) > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1) or not a > ℚ.from_int(a.floor)","not a > ℚ.from_int(a.floor)","ℚ.from_int(a.floor) = a"]}
{"goal":"a > ℚ.from_int(a.floor - ℤ.1)","proof":["ℚ.from_int(a.floor) - ℚ.from_int(ℤ.1) = ℚ.from_int(a.floor - ℤ.1)","a - (ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1)) > 0 = a > ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1)","a - ℚ.from_int(a.floor - ℤ.1) > 0 = a > ℚ.from_int(a.floor - ℤ.1)","ℚ.from_int(a.floor) + -ℚ.from_int(ℤ.1) = ℚ.from_int(a.floor) - ℚ.from_int(ℤ.1)"]}
{"goal":"gt_some_int","proof":["not a > ℚ.from_int(a.floor - ℤ.1)"]}
{"goal":"lt_some_int","proof":["not a < ℚ.from_int(floor_impl(a) + ℤ.1)","a < ℚ.from_int(floor_impl(a) + ℤ.1)"]}
{"goal":"a ⋅ c < b ⋅ c","proof":["not c > 0 or not a < b or a ⋅ c < b ⋅ c"]}
{"goal":"b > 0","proof":["not b > a or not a > 0 or b > 0","b > a = a < b","not a > 0 or not b > a","b > a","not b > a"]}
{"goal":"b ⋅ c < b ⋅ d","proof":["not b > 0 or not c < d or c ⋅ b < d ⋅ b","b ⋅ c = c ⋅ b","d ⋅ b = b ⋅ d","not b ⋅ c < d ⋅ b","not c ⋅ b < d ⋅ b"]}
{"goal":"mul_lt_lt","proof":["not a ⋅ c < c ⋅ b or not c ⋅ b < b ⋅ d or a ⋅ c < b ⋅ d","b ⋅ c = c ⋅ b","a ⋅ c < c ⋅ b","c ⋅ b < b ⋅ d","not c ⋅ b < b ⋅ d or not a ⋅ c < c ⋅ b"]}
{"goal":"a ⋅ c < b ⋅ c","proof":["not c > 0 or not a < b or a ⋅ c < b ⋅ c"]}
{"goal":"b > 0","proof":["not b > a or not a > 0 or b > 0","b > a = a < b","not a > 0 or not b > a","b > a","not b > a"]}
{"goal":"b ⋅ c <= b ⋅ d","proof":["not b > 0 or not c <= d or c ⋅ b <= d ⋅ b","b ⋅ c = c ⋅ b","d ⋅ b = b ⋅ d","not b ⋅ c <= d ⋅ b","not c ⋅ b <= d ⋅ b"]}
{"goal":"mul_lt_lte","proof":["not a > 0 or not c > 0 or not a < b or not c < d or a ⋅ c < b ⋅ d","not c < d","not c <= d or c < d or d = c","d = c"]}
{"goal":"pos_lte","proof":["not b > a or not a > 0 or b > 0","not a <= b or a < b or b = a","b > a = a < b","not a > 0 or not b > a","not b > a","not a < b","b = a"]}
{"goal":"a ⋅ c <= b ⋅ c","proof":["not c > 0 or not a <= b or a ⋅ c <= b ⋅ c"]}
{"goal":"b > 0","proof":["not a > 0 or not a <= b or b > 0"]}
{"goal":"b ⋅ c < b ⋅ d","proof":["not c > 0 or not b > 0 or not b <= b or not c < d or c ⋅ b < d ⋅ b","b ⋅ c = c ⋅ b","d ⋅ b = b ⋅ d","b != b or b <= b","not b ⋅ c < d ⋅ b","b <= b","not c ⋅ b < d ⋅ b"]}
{"goal":"mul_lte_lt","proof":["not a > 0 or not c > 0 or not a < b or not c < d or a ⋅ c < b ⋅ d","not a < b","not a <= b or a < b or b = a","b = a"]}
{"goal":"1 / a > 0","proof":["1 / a > 0 = a > 0"]}
{"goal":"1 / b > 0","proof":["not a > 0 or not a <= b or b > 0","1 / b > 0 = b > 0","not b > 0","not a < b or a <= b","a <= b"]}
{"goal":"a ⋅ 1 / a ⋅ 1 / b < b ⋅ 1 / a ⋅ 1 / b","proof":["not a > 0 or not a < b or a / a < b / a","not 1 / b > 0 or not a / a < b / a or a / a ⋅ 1 / b < b / a ⋅ 1 / b","a ⋅ 1 / a = a / a","b ⋅ 1 / a = b / a","not a / a ⋅ 1 / b < b ⋅ 1 / a ⋅ 1 / b","not a / a ⋅ 1 / b < b / a ⋅ 1 / b","not a / a < b / a"]}
{"goal":"a ⋅ 1 / a ⋅ 1 / b = 1 / b","proof":["a ⋅ 1 / a = 1 or 0 = a","a ⋅ 1 / a ⋅ 1 / b = (a ⋅ 1 / a) / b","(a ⋅ 1 / a) / b != 1 / b","a ⋅ 1 / a != 1","0 = a","a > 0 = 0 < a","0 < a","not a < a"]}
{"goal":"b ⋅ 1 / a ⋅ 1 / b = b ⋅ (1 / a ⋅ 1 / b)","proof":["b ⋅ (1 / a ⋅ 1 / b) = b ⋅ 1 / a ⋅ 1 / b"]}
{"goal":"b ⋅ 1 / a ⋅ 1 / b = 1 / a","proof":["(1 / a ⋅ b) / b = 1 / a or 0 = b","1 / a ⋅ b ⋅ 1 / b = (1 / a ⋅ b) / b","not a > 0 or not a < 0","b ⋅ 1 / a = 1 / a ⋅ b","1 / a ⋅ b ⋅ 1 / b != 1 / a","(1 / a ⋅ b) / b != 1 / a","0 = b","not a < 0","a < 0"]}
{"goal":"1 / b < 1 / a","proof":[]}
{"goal":"lt_pos_reciprocal","proof":[]}
{"goal":"1 / a > 0","proof":["1 / a > 0 = a > 0"]}
{"goal":"exists(k0: ℤ) { 1 / a < ℚ.from_int(k0) }","proof":["not 1 / a < ℚ.from_int(floor_impl(1 / a) + ℤ.1)","1 / a < ℚ.from_int(floor_impl(1 / a) + ℤ.1)"]}
{"goal":"ℚ.from_int(n) > 0","proof":["not ℚ.from_int(n) > 1 / a or not 1 / a > 0 or ℚ.from_int(n) > 0","ℚ.from_int(n) > 1 / a = 1 / a < ℚ.from_int(n)","not ℚ.from_int(n) > 1 / a or not 1 / a > 0","ℚ.from_int(n) > 1 / a","not ℚ.from_int(n) > 1 / a"]}
{"goal":"n > ℤ.0","proof":["ℚ.from_int(n) > 0 = 0 < ℚ.from_int(n)","n > ℤ.0 = ℤ.0 < n","0 < ℚ.from_int(n) = ℚ.from_int(n).is_positive","ℚ.from_int(n).num.is_positive = ℚ.from_int(n).is_positive","ℤ.0 < n = n.is_positive","ℚ.from_int(n).num = n"]}
{"goal":"1 / ℚ.from_int(n) < 1 / (1 / a)","proof":["not 1 / a > 0 or not 1 / a < ℚ.from_int(n) or 1 / ℚ.from_int(n) < 1 / (1 / a)"]}
{"goal":"1 / (1 / a) = a","proof":["1 / (1 / a) = a or 0 = a","0 = a","not a < a or not a < a","a > 0 = 0 < a","0 < a","a < a"]}
{"goal":"smaller_int_reciprocal","proof":["not 1 / ℚ.from_int(n) < a or not n > ℤ.0","not 1 / ℚ.from_int(n) < a","1 / ℚ.from_int(n) < a"]}
{"goal":"a >= ℚ.from_int(a.floor)","proof":["not ℚ.from_int(floor_impl(a)) <= a or ℚ.from_int(floor_impl(a)) < a or ℚ.from_int(floor_impl(a)) = a","not a > ℚ.from_int(floor_impl(a)) or a >= ℚ.from_int(floor_impl(a))","a > ℚ.from_int(floor_impl(a)) = ℚ.from_int(floor_impl(a)) < a","ℚ.from_int(floor_impl(a)) <= a","ℚ.from_int(floor_impl(a)) != a or a >= ℚ.from_int(floor_impl(a))","a.floor = floor_impl(a)","not a >= ℚ.from_int(floor_impl(a))","ℚ.from_int(floor_impl(a)) != a","not a > ℚ.from_int(floor_impl(a))","ℚ.from_int(floor_impl(a)) < a","not ℚ.from_int(floor_impl(a)) < a"]}
{"goal":"gte_some_int","proof":["not a >= ℚ.from_int(a.floor)"]}
{"goal":"r.denom != ℤ.0","proof":["(-r).denom = r.denom","(-r).denom = ℤ.0","(-r).denom != ℤ.0"]}
{"goal":"ℚ.from_int(r.denom) != 0","proof":["(-r).denom = r.denom","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int((-r).denom).num = (-r).denom","ℚ.from_int(ℤ.0).num = ℤ.0"]}
{"goal":"ℚ.from_int(r.num) / ℚ.from_int(r.denom) ⋅ ℚ.from_int(r.denom) = ℚ.from_int(r.num)","proof":["ℚ.from_int(r.num) / ℚ.from_int(r.denom) ⋅ ℚ.from_int(r.denom) = ℚ.from_int(r.num) or ℚ.from_int(r.denom) = 0"]}
{"goal":"mul_denom","proof":["ℚ.from_int(r.num) / ℚ.from_int(r.denom) = r"]}
{"goal":"1 / 2 > 0","proof":[]}
{"goal":"half_pos","proof":["not r > 0 or not 2.reciprocal > 0 or r ⋅ 2.reciprocal > 0","1 / 2 > 0 = 2 > 0","2 > 0","not 2 > 0 or 2.reciprocal > 0","r ⋅ 2.reciprocal = r / 2","not r ⋅ 2.reciprocal > 0","2.reciprocal > 0","not 2.reciprocal > 0"]}
{"goal":"add_half_half","proof":["r / 2 + r / 2 = r"]}
{"goal":"q - p > 0","proof":["q - p > 0 = q > p","not q > p","q > p = p < q"]}
{"goal":"q - p + -q > -q","proof":["not q - p > 0 or -q < -q + (q - p)","-q + (q - p) > -q = -q < -q + (q - p)","q - p + -q = -q + (q - p)","not -q + (q - p) > -q","not -q < -q + (q - p)"]}
{"goal":"q - p + -q = q + -q - p","proof":["q - p - q = q - (p + q)","q - q - p = q - (q + p)","q + -q = q - q","q - p + -q = q - p - q","q + p = p + q"]}
{"goal":"-p > -q","proof":["0 + -p = 0 - p","q + -q + -p = q + -q - p","-p > -q = -q < -p","q - p + -q > -q = -q < q - p + -q","0 - p = -p","q + -q = 0"]}
{"goal":"lt_neg","proof":[]}
{"goal":"lte_neg","proof":["not p < q or -p > -q","not p <= q or p < q or q = p","not -p > -q or -p >= -q","not -p > -q","-q != -p or -p >= -q","-q != -p","q != p","not p < q","p < q"]}
{"goal":"lt_lte_trans","proof":["not a < b or not b < c or a < c","not b <= c or b < c or c = b","not b < c or not a < b","not b < c","c = b"]}
{"goal":"lte_lt_trans","proof":["not a < b or not b < c or a < c","not a <= b or a < b or b = a","not b < c or not a < b","not a < b","b = a"]}
{"goal":"a / 2 < b / 2","proof":["not 2 > 0 or not a < b or a / 2 < b / 2","not 2 > 0"]}
{"goal":"a < a / 2 + b / 2","proof":["not a / 2 < b / 2 or a / 2 + a / 2 < b / 2 + a / 2","a / 2 + a / 2 = a","b / 2 + a / 2 = a / 2 + b / 2","not a / 2 + a / 2 < a / 2 + b / 2","a / 2 + a / 2 < b / 2 + a / 2"]}
{"goal":"a < (a + b) / 2","proof":["a ⋅ 2.reciprocal + b ⋅ 2.reciprocal = (a + b) ⋅ 2.reciprocal","(a + b) ⋅ 2.reciprocal = (a + b) / 2","a ⋅ 2.reciprocal = a / 2","b ⋅ 2.reciprocal = b / 2","(a + b) / 2 > a = a < (a + b) / 2","a / 2 + b / 2 > a = a < a / 2 + b / 2"]}
{"goal":"a / 2 + b / 2 < b","proof":["not a / 2 < b / 2 or a / 2 + b / 2 < b / 2 + b / 2","b / 2 + b / 2 = b","not a / 2 + b / 2 < b / 2 + b / 2"]}
{"goal":"(a + b) / 2 < b","proof":["a ⋅ 2.reciprocal + b ⋅ 2.reciprocal = (a + b) ⋅ 2.reciprocal","(a + b) ⋅ 2.reciprocal = (a + b) / 2","a ⋅ 2.reciprocal = a / 2","b ⋅ 2.reciprocal = b / 2","b > (a + b) / 2 = (a + b) / 2 < b","b > a / 2 + b / 2 = a / 2 + b / 2 < b"]}
{"goal":"lt_imp_rat_between","proof":["not (a + b) / 2 < b or not a < (a + b) / 2","not a < (a + b) / 2"]}
{"goal":"gt_imp_rat_between","proof":["let s0: ℚ satisfy { not b < a or b < s0 and (not b < a or s0 < a) }","not s0 > b or not a > s0","a > b = b < a","a > s0 = s0 < a","s0 > b = b < s0","b < a","b < s0","s0 < a","a > s0","s0 > b","not s0 > b"]}
{"goal":"a ⋅ c >= b ⋅ c","proof":["not c > 0 or not b < a or b ⋅ c < a ⋅ c","not a >= b or a > b or b = a","not a ⋅ c > b ⋅ c or a ⋅ c >= b ⋅ c","a > b = b < a","a ⋅ c > b ⋅ c = b ⋅ c < a ⋅ c","b ⋅ c != a ⋅ c or a ⋅ c >= b ⋅ c","b ⋅ c != a ⋅ c","b != a","a > b","not a ⋅ c > b ⋅ c","b < a","not b ⋅ c < a ⋅ c"]}
{"goal":"not a ⋅ c < b ⋅ c","proof":["c ⋅ a >= b ⋅ c != c ⋅ a < b ⋅ c","a ⋅ c = c ⋅ a","c ⋅ a < b ⋅ c","c ⋅ a >= b ⋅ c","not c ⋅ a >= b ⋅ c or not c ⋅ a < b ⋅ c"]}
{"goal":"false","proof":[]}
{"goal":"lt_cancel_pos_mul_right","proof":["a > b or a < b or b = a","not a > b or a >= b","b != a or a >= b","b != a","not a > b","a > b"]}
{"goal":"lt_cancel_pos_mul_left","proof":["not a ⋅ c < b ⋅ c or not c > 0 or a < b","a ⋅ c = c ⋅ a","b ⋅ c = c ⋅ b","not a ⋅ c < b ⋅ c or not c > 0","not a ⋅ c < b ⋅ c"]}
{"goal":"gt_cancel_pos_mul_right","proof":["not b ⋅ c < a ⋅ c or not c > 0 or b < a","a > b = b < a","a ⋅ c > b ⋅ c = b ⋅ c < a ⋅ c","not b < a","b ⋅ c < a ⋅ c"]}
{"goal":"gt_cancel_pos_mul_left","proof":["not c ⋅ b < c ⋅ a or not c > 0 or b < a","a > b = b < a","c ⋅ a > c ⋅ b = c ⋅ b < c ⋅ a","not b < a","c ⋅ b < c ⋅ a"]}
{"goal":"cancel_positivity_left","proof":["not a ⋅ b > a ⋅ 0 or not a > 0 or b > 0","a ⋅ 0 = 0","not a ⋅ b > a ⋅ 0 or not a > 0","not a ⋅ b > a ⋅ 0"]}
{"goal":"cancel_positivity_right","proof":["not b ⋅ a > 0 or not b > 0 or a > 0","a ⋅ b = b ⋅ a","b ⋅ a > 0"]}
{"goal":"mul_cancels_div_left","proof":["a / b ⋅ b = a or 0 = b","b ⋅ a / b = a / b ⋅ b","a / b ⋅ b != a"]}
{"goal":"a.abs = -a","proof":["not a < 0 or a.abs = -a"]}
{"goal":"(-a).abs = -a","proof":["-a < 0 = a > 0","-a < 0 or (-a).abs = -a","-a < 0","a > 0","not a > 0 or not a < 0"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != -a"]}
{"goal":"(-a).abs = a.abs","proof":["-a != a","0 - a = -a","0 - 0 = 0"]}
{"goal":"a > 0","proof":["a > 0 or a < 0 or 0 = a"]}
{"goal":"a.abs = a","proof":["a < 0 or a.abs = a"]}
{"goal":"-a < 0","proof":["-a < 0 = a > 0"]}
{"goal":"(-a).abs = a","proof":["not -a < 0 or (-a).abs = --a","-(0 - a) = a - 0","0 - a.abs = -a.abs","a.abs - 0 = a.abs","(-a).abs = --a"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != a"]}
{"goal":"neg_abs","proof":[]}
{"goal":"abs_non_pos","proof":["-a < 0 = a > 0","-a < 0 or (-a).abs = -a","(-a).abs = a.abs","(-a).abs != -a","not -a < 0","-a < 0"]}
{"goal":"abs_non_neg","proof":["a < 0 or a.abs = a"]}
{"goal":"mul_neg_abs","proof":["-b ⋅ a = -(b ⋅ a)","a ⋅ -b = -b ⋅ a","b ⋅ a = a ⋅ b","(-(b ⋅ a)).abs = (b ⋅ a).abs"]}
{"goal":"abs_mul_abs_right","proof":["a ⋅ b.abs != a ⋅ b","b.abs != b","(a ⋅ -b).abs = (a ⋅ b).abs","not b < 0 or b.abs = -b","b < 0 or b.abs = b","b < 0","(a ⋅ b.abs).abs != (a ⋅ -b).abs","a ⋅ b.abs != a ⋅ -b","b.abs = -b","b.abs != -b"]}
{"goal":"abs_mul_abs_left","proof":["(b ⋅ a.abs).abs = (b ⋅ a).abs","b ⋅ a = a ⋅ b","b ⋅ a.abs = a.abs ⋅ b","(a.abs ⋅ b).abs != (b ⋅ a).abs"]}
{"goal":"mul_to_zero","proof":["0 ⋅ b != a ⋅ b or 0 = b or 0 = a","b ⋅ 0 = 0 ⋅ b","b ⋅ 0 = 0","0 ⋅ b != a ⋅ b or 0 = b","0 ⋅ b != a ⋅ b","0 ⋅ b != 0"]}
{"goal":"a = 0 implies a ⋅ b = 0","proof":["b ⋅ a = a ⋅ b","b ⋅ a != 0","b ⋅ 0 = 0"]}
{"goal":"b = 0 implies a ⋅ b = 0","proof":["a ⋅ 0 != 0","a ⋅ 0 = 0"]}
{"goal":"mul_to_zero_imp_rev","proof":[]}
{"goal":"a ⋅ b = 0","proof":["0 != b or a ⋅ b = 0","0 != b","0 = a","0 != a or a ⋅ b = 0"]}
{"goal":"a ⋅ b > 0","proof":["not a > 0 or not b > 0 or a ⋅ b > 0","not a >= 0 or a > 0 or 0 = a","not b >= 0 or b > 0 or 0 = b","not b > 0 or not a > 0","b > 0","a > 0","not a > 0"]}
{"goal":"mul_non_neg","proof":["not a ⋅ b > 0 or a ⋅ b >= 0","not a ⋅ b > 0","0 = b or 0 = a","a ⋅ b != 0 or a ⋅ b >= 0","a ⋅ b != 0","0 != a","0 != b","0 = b"]}
{"goal":"(a ⋅ b).abs = (a.abs ⋅ b.abs).abs","proof":["(a.abs ⋅ b.abs).abs = (a ⋅ b.abs).abs","(a ⋅ b.abs).abs != (a ⋅ b).abs","(a ⋅ b.abs).abs = (a ⋅ b).abs"]}
{"goal":"not a.abs < 0","proof":["(1 ⋅ a.abs).abs = (1 ⋅ a).abs","not a.abs < 0 or a.abs.abs = -a.abs","(0 - a.abs).is_positive = a.abs < 0","not a.abs > 0 or not a.abs < 0","not a.abs > 0","a.abs > 0 = 0 < a.abs","a.abs.abs = -a.abs","(-a).abs = a.abs","0 - a.abs = -a.abs","0 < a.abs = a.abs.is_positive","(-a).abs - 0 = (-a).abs","a - 0 = a","1 ⋅ (a - 0) = a - 0","1 ⋅ (a.abs - 0) = a.abs - 0"]}
{"goal":"not b.abs < 0","proof":["(1 ⋅ b.abs).abs = (1 ⋅ b).abs","not b.abs < 0 or b.abs.abs = -b.abs","(0 - b.abs).is_positive = b.abs < 0","not b.abs > 0 or not b.abs < 0","not b.abs > 0","b.abs > 0 = 0 < b.abs","b.abs.abs = -b.abs","(-b).abs = b.abs","0 - b.abs = -b.abs","0 < b.abs = b.abs.is_positive","(-b).abs - 0 = (-b).abs","b - 0 = b","1 ⋅ (b - 0) = b - 0","1 ⋅ (b.abs - 0) = b.abs - 0"]}
{"goal":"not a.abs ⋅ b.abs < 0","proof":["not a.abs >= 0 or not b.abs >= 0 or a.abs ⋅ b.abs >= 0","b.abs >= 0 != b.abs < 0","a.abs >= 0 != a.abs < 0","a.abs ⋅ b.abs >= 0 != a.abs ⋅ b.abs < 0","a.abs >= 0 or a.abs < 0","not a.abs ⋅ b.abs >= 0 or not a.abs ⋅ b.abs < 0","not a.abs ⋅ b.abs >= 0","b.abs >= 0 or b.abs < 0","b.abs >= 0","a.abs >= 0","not a.abs >= 0"]}
{"goal":"(a.abs ⋅ b.abs).abs = a.abs ⋅ b.abs","proof":["a.abs ⋅ b.abs < 0 or (a.abs ⋅ b.abs).abs = a.abs ⋅ b.abs"]}
{"goal":"mul_two_abs","proof":["(a.abs * b.abs).abs != a.abs * b.abs"]}
{"goal":"a.abs = a","proof":["a < 0 or a.abs = a","a < 0","not a > 0 or not a < 0"]}
{"goal":"a.abs = -a","proof":["not a < 0 or a.abs = -a"]}
{"goal":"abs_zero_imp_zero","proof":["a.abs != a","not a > 0","a ⋅ (0 ⋅ a) / a = 0 ⋅ a or 0 = a","(0 ⋅ a ⋅ a) / a = 0 ⋅ a or 0 = a","(ℚ.from_int(-ℤ.1) ⋅ a) / a = ℚ.from_int(-ℤ.1) or 0 = a","(ℚ.new(0.num, 0.denom) ⋅ a) / a = ℚ.new(0.num, 0.denom) or 0 = a","a > 0 or a < 0 or 0 = a","-1 < 0 = 1 > 0","-a < 0 = a > 0","a < 0","-1 ⋅ a = -a","ℚ.new(0.num, 0.denom) = 0","(0 ⋅ a ⋅ a) / a = 0 ⋅ a","(ℚ.from_int(-ℤ.1) ⋅ a) / a = ℚ.from_int(-ℤ.1)","(ℚ.new(0.num, 0.denom) ⋅ a) / a = ℚ.new(0.num, 0.denom)","a ⋅ (0 ⋅ a) / a = 0 ⋅ a","a ⋅ 0 = 0","a.abs = -a"]}
{"goal":"not a.abs < 0","proof":["(1 ⋅ a.abs).abs = (1 ⋅ a).abs","not a.abs < 0 or a.abs.abs = -a.abs","(0 - a.abs).is_positive = a.abs < 0","not a.abs > 0 or not a.abs < 0","not a.abs > 0","a.abs > 0 = 0 < a.abs","a.abs.abs = -a.abs","(-a).abs = a.abs","0 - a.abs = -a.abs","0 < a.abs = a.abs.is_positive","(-a).abs - 0 = (-a).abs","a - 0 = a","1 ⋅ (a - 0) = a - 0","1 ⋅ (a.abs - 0) = a.abs - 0"]}
{"goal":"zero_lte_abs","proof":["a.abs > 0 or a.abs < 0 or a.abs = 0","a.abs > 0 = 0 < a.abs","not 0 < a.abs or 0 <= a.abs","not 0 < a.abs","a.abs != 0 or 0 <= a.abs","a.abs != 0","not a.abs > 0","a.abs > 0"]}
{"goal":"r ⋅ 1 / p < r ⋅ 1 / q","proof":["r ⋅ 1 / p = r / p","r ⋅ 1 / q = r / q"]}
{"goal":"1 / p < 1 / q","proof":["not r ⋅ 1 / p < r ⋅ 1 / q or not r > 0 or 1 / p < 1 / q"]}
{"goal":"1 / (1 / q) < 1 / (1 / p)","proof":["not 1 / p > 0 or not 1 / p < 1 / q or 1 / (1 / q) < 1 / (1 / p)","not 1 / p > 0","1 / p > 0 = p > 0"]}
{"goal":"1 / (1 / q) = q","proof":["1 / (1 / q) = q or 0 = q","0 = q","not q < q or not q < q","q > 0 = 0 < q","0 < q","q < q"]}
{"goal":"1 / (1 / p) = p","proof":["1 / (1 / p) = p or 0 = p","0 = p","not p < p or not p < p","p > 0 = 0 < p","0 < p","p < p"]}
{"goal":"pos_inverses_lt","proof":["p > q = q < p"]}
{"goal":"1 / (1 / q) = q","proof":["1 / (1 / q) = q or 0 = q"]}
{"goal":"1 / (1 / p) = p","proof":["1 / (1 / p) = p or 0 = p"]}
{"goal":"reciprocal_eq","proof":[]}
{"goal":"r / p = r ⋅ 1 / p","proof":["r ⋅ 1 / p = r / p"]}
{"goal":"r / q = r ⋅ 1 / q","proof":["r ⋅ 1 / q = r / q"]}
{"goal":"r ⋅ 1 / p = r ⋅ 1 / q","proof":[]}
{"goal":"1 / p = 1 / q","proof":["r ⋅ 1 / q != r ⋅ 1 / p or 0 = r or 1 / q = 1 / p"]}
{"goal":"inverses_eq","proof":["1 / q != 1 / p or 0 = p or 0 = q or q = p"]}
{"goal":"p != 0","proof":["0 > 0","0 > p","not p > 0 or not p < 0","0 > p = p < 0","not p < 0","p < 0"]}
{"goal":"q != 0","proof":["0 > 0","0 > q","not q > 0 or not q < 0","0 > q = q < 0","not q < 0","q < 0"]}
{"goal":"r != 0","proof":["0 > 0","0 > r","not r > 0 or not r < 0","0 > r = r < 0","not r < 0","r < 0"]}
{"goal":"p = q","proof":["r / q != r / p or 0 = r or 0 = p or 0 = q or q = p","r / q != r / p or 0 = p or 0 = q or 0 = r or q = p"]}
{"goal":"r / p < r / q","proof":["not r / p <= r / q or r / p < r / q or r / q = r / p"]}
{"goal":"p > q","proof":["not r / p < r / q or not r > 0 or not p > 0 or not q > 0 or p > q","not r / p < r / q or not p > 0 or not q > 0 or not r > 0 or p > q"]}
{"goal":"pos_inverses_lte","proof":["not p > q or p >= q","not p > q","q != p or p >= q","q != p","r / q = r / p","r / q != r / p"]}
{"goal":"pos_inverses_gt","proof":["not r / q < r / p or not r > 0 or not q > 0 or not p > 0 or q > p","not r / q < r / p or not q > 0 or not p > 0 or not r > 0 or q > p","q > p = p < q","r / p > r / q = r / q < r / p","not q > p","r / q < r / p"]}
{"goal":"p = q","proof":["not r / p <= r / q or not r > 0 or not p > 0 or not q > 0 or p >= q","not r / q <= r / p or not r > 0 or not q > 0 or not p > 0 or q >= p","not r / p <= r / q or not p > 0 or not q > 0 or not r > 0 or p >= q","not r / q <= r / p or not q > 0 or not p > 0 or not r > 0 or q >= p","not p >= q or p > q or q = p","q >= p != q < p","p > q = q < p","not p >= q or p > q","r / q != r / p or r / p <= r / q","r / q != r / p or r / q <= r / p","not q >= p or not q < p","r / q <= r / p","r / p <= r / q","not r / p <= r / q or not r > 0 or not q > 0 or p >= q","not r / p <= r / q or not r > 0 or p >= q","p >= q","p > q","q < p","q >= p","not q >= p"]}
{"goal":"r / p > r / q","proof":["not r / p >= r / q or r / p > r / q or r / q = r / p"]}
{"goal":"p < q","proof":["not r / p > r / q or not r > 0 or not p > 0 or not q > 0 or p < q","not r / p > r / q or not p > 0 or not q > 0 or not r > 0 or p < q"]}
{"goal":"pos_inverses_gte","proof":["not p < q or p <= q","not p < q","q != p or p <= q","q != p","r / q = r / p","r / q != r / p"]}
{"goal":"p + r >= q + r","proof":["not q < p or q + r < p + r","not p >= q or p > q or q = p","not p + r > q + r or p + r >= q + r","p + r > q + r = q + r < p + r","p > q = q < p","q + r != p + r or p + r >= q + r","q + r != p + r","q != p","p > q","not p + r > q + r","q < p","not q + r < p + r"]}
{"goal":"false","proof":["p + r >= r + q != p + r < r + q","q + r = r + q","p + r < r + q","p + r >= r + q","not p + r >= r + q or not p + r < r + q"]}
{"goal":"lt_cancel_add_right","proof":["p > q or p < q or q = p","not p > q or p >= q","q != p or p >= q","q != p","not p > q","p > q"]}
{"goal":"p ⋅ (q - r) = p ⋅ (q + -r)","proof":["q + -r != q - r","q + -r = q - r"]}
{"goal":"p ⋅ (q - r) = p ⋅ q + p ⋅ -r","proof":["p ⋅ q + p ⋅ -r = p ⋅ (q + -r)"]}
{"goal":"p ⋅ (q - r) = p ⋅ q - p ⋅ r","proof":["-r ⋅ p = -(r ⋅ p)","p ⋅ q + -(p ⋅ r) = p ⋅ q - p ⋅ r","p ⋅ -r = -r ⋅ p","r ⋅ p = p ⋅ r"]}
{"goal":"sub_distrib","proof":[]}
{"goal":"1 / 2 > 0","proof":[]}
{"goal":"1 / 2 < 1 / 2 + 1 / 2","proof":["not 1 / 2 > 0 or 1 / 2 < 1 / 2 + 1 / 2"]}
{"goal":"half_lt_one","proof":["1 / 2 + 1 / 2 = 1"]}
{"goal":"ε > 0","proof":["not 1 / 2 > 0"]}
{"goal":"ε < 1","proof":["not 1 / 2 < 1"]}
{"goal":"ε ⋅ ε < 1","proof":["not ε > 0 or not ε > 0 or not ε < 1 or not ε < 1 or ε ⋅ ε < 1 ⋅ 1","1 ⋅ 1 = 1","not ε ⋅ ε < 1 ⋅ 1"]}
{"goal":"ε > 0 and ε ⋅ ε < a","proof":["not ε ⋅ ε < a","not ε ⋅ ε < 1 or not 1 < a or ε ⋅ ε < a","not 1 <= a or 1 < a or 1 = a","1 < a or 1 = a","not ε ⋅ ε < 1 or not 1 < a","not 1 < a","1 = a"]}
{"goal":"a < 1","proof":["1 > a or 1 < a or 1 = a","1 > a = a < 1","not 1 > a","not 1 < a or 1 <= a","1 != a or 1 <= a","1 != a","not 1 < a","1 < a"]}
{"goal":"a > 0","proof":[]}
{"goal":"a > 0 and a ⋅ a < a","proof":["not a ⋅ a < a","not a > 0 or not a > 0 or not a <= a or not a < 1 or a ⋅ a < a ⋅ 1","a != a or a <= a","a ⋅ 1 = a","a <= a","not a ⋅ a < a ⋅ 1"]}
{"goal":"lower_squared","proof":["let s0: ℚ satisfy { not 1 <= a or s0 > 0 and (not 1 <= a or s0 ⋅ s0 < a) }","not a ⋅ a < a or not a > 0","not s0 ⋅ s0 < a or not s0 > 0","not a ⋅ a < a","1 <= a","s0 > 0","s0 ⋅ s0 < a","not s0 ⋅ s0 < a"]}
{"goal":"a ⋅ a >= b ⋅ a","proof":["not b > 0 or not a > 0 or not a <= a or not b < a or b ⋅ a < a ⋅ a","not a >= b or a > b or b = a","not a ⋅ a > b ⋅ a or a ⋅ a >= b ⋅ a","a > b = b < a","a ⋅ a > b ⋅ a = b ⋅ a < a ⋅ a","b ⋅ a != a ⋅ a or a ⋅ a >= b ⋅ a","b ⋅ a != a ⋅ a","b != a","a > b","a != a or a <= a","not a ⋅ a > b ⋅ a","b < a","a <= a","not b ⋅ a < a ⋅ a"]}
{"goal":"b ⋅ a >= b ⋅ b","proof":["not b > 0 or not b > 0 or not b <= b or not b < a or b ⋅ b < b ⋅ a","not a >= b or a > b or b = a","not b ⋅ a > b ⋅ b or b ⋅ a >= b ⋅ b","a > b = b < a","b ⋅ a > b ⋅ b = b ⋅ b < b ⋅ a","b ⋅ b != b ⋅ a or b ⋅ a >= b ⋅ b","b ⋅ b != b ⋅ a","b != a","a > b","b != b or b <= b","not b ⋅ a > b ⋅ b","b < a","b <= b","not b ⋅ b < b ⋅ a"]}
{"goal":"a ⋅ a >= b ⋅ b","proof":["not a ⋅ a >= a ⋅ b or not a ⋅ b >= b ⋅ b or a ⋅ a >= b ⋅ b","b ⋅ a = a ⋅ b","a ⋅ a >= a ⋅ b","a ⋅ b >= b ⋅ b","not a ⋅ b >= b ⋅ b or not a ⋅ a >= a ⋅ b"]}
{"goal":"false","proof":["a ⋅ a >= b ⋅ b != a ⋅ a < b ⋅ b","not a ⋅ a >= b ⋅ b or not a ⋅ a < b ⋅ b"]}
{"goal":"square_lt_imp_lt","proof":["a > b or a < b or b = a","not a > b or a >= b","b != a or a >= b","b != a","not a > b","a > b"]}
{"goal":"smaller_positive","proof":["let s0: (ℚ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℚ) { not x0 > x1 or x0 > s0(x0, x1) } and forall(x2: ℚ, x3: ℚ) { not x2 > x3 or s0(x2, x3) > x3 } }","not s0(a, 0) > 0 or not s0(a, 0) < a","not a > 0 or s0(a, 0) > 0","not a > 0 or a > s0(a, 0)","a > s0(a, 0) = s0(a, 0) < a","not a > s0(a, 0) or s0(a, 0) < a","a > s0(a, 0)","s0(a, 0) > 0","s0(a, 0) < a","not s0(a, 0) < a"]}
{"goal":"exists(k0: ℚ) { k0 > 0 and k0 < a }","proof":["let s0: ℚ -> ℚ satisfy { forall(x0: ℚ) { not x0 > 0 or s0(x0) > 0 } and forall(x1: ℚ) { not x1 > 0 or s0(x1) < x1 } }","not s0(a) > 0 or not s0(a) < a","not a > 0 or s0(a) < a","not a > 0 or s0(a) > 0","s0(a) > 0","s0(a) < a","not s0(a) < a"]}
{"goal":"r > 0 and r < a and r < b","proof":["not r < b","not r < a or not a < b or r < b","not r < a or not a < b"]}
{"goal":"exists(k0: ℚ) { k0 > 0 and k0 < b }","proof":["let s0: ℚ -> ℚ satisfy { forall(x0: ℚ) { not x0 > 0 or s0(x0) > 0 } and forall(x1: ℚ) { not x1 > 0 or s0(x1) < x1 } }","not s0(b) > 0 or not s0(b) < b","not b > 0 or s0(b) < b","not b > 0 or s0(b) > 0","s0(b) > 0","s0(b) < b","not s0(b) < b"]}
{"goal":"r > 0 and r < a and r < b","proof":["not r < a","not b <= a or not r < b or r < a","not r < b or not b < a or r < a","b > a or b < a or b = a","b > a = a < b","b != a or b <= a","not b > a","not r < b or not b < a","not b < a","not r < b or not b <= a","not b <= a","b = a","b != a"]}
{"goal":"lt_both_pos","proof":["let s0: ℚ satisfy { s0 > 0 and s0 < a and s0 < b }","not s0 > 0 or not s0 < b or not s0 < a","not s0 > 0"]}
{"goal":"a ⋅ c < b / c ⋅ c","proof":["not c > 0 or not a < b / c or a ⋅ c < b / c ⋅ c"]}
{"goal":"b / c ⋅ c = b","proof":["b / c ⋅ c = b or 0 = c","0 = c","not c < c or not c < c","c > 0 = 0 < c","0 < c","c < c"]}
{"goal":"lt_rhs_div_pos","proof":["not a * c < b / c * c"]}
{"goal":"lte_abs","proof":["not q <= 0 or not 0 <= q.abs or q <= q.abs","q < 0 or q.abs = q","not q < 0 or q <= 0","q.abs != q or q <= q.abs","q.abs != q","0 <= q.abs","not 0 <= q.abs or not q <= 0","not q <= 0","q < 0","not q < 0"]}
{"goal":"close_comm","proof":["(b - a).abs != (a - b).abs","-(a - b) = b - a","(-(a - b)).abs = (a - b).abs"]}
{"goal":"(a - b).abs < ε","proof":[]}
{"goal":"a - b <= (a - b).abs","proof":["a - b <= (a - b).abs"]}
{"goal":"a - b < ε","proof":["not a - b <= (a - b).abs or not (a - b).abs < ε or a - b < ε","not a - b <= (a - b).abs or not (a - b).abs < ε"]}
{"goal":"a - b + b < ε + b","proof":["not a - b < ε or a - b + b < ε + b"]}
{"goal":"a < b + ε","proof":["a - b + b = a","a < ε + b","ε + b = b + ε"]}
{"goal":"(b - a).abs < ε","proof":["(b - a).abs < ε = (a - b).abs < ε"]}
{"goal":"b - a <= (b - a).abs","proof":["b - a <= (b - a).abs"]}
{"goal":"b - a < ε","proof":["not b - a <= (b - a).abs or not (b - a).abs < ε or b - a < ε","not b - a <= (b - a).abs or not (b - a).abs < ε"]}
{"goal":"b - a + a < ε + a","proof":["not b - a < ε or b - a + a < ε + a"]}
{"goal":"b < ε + a","proof":["b - a + a = b"]}
{"goal":"a + ε > b","proof":["a + ε > b = b < a + ε","not b < a + ε","ε + a = a + ε"]}
{"goal":"a + ε + -ε > b + -ε","proof":["not b < a + ε or b + -ε < a + ε + -ε","a + ε + -ε > b + -ε = b + -ε < a + ε + -ε","a + ε > b = b < a + ε","not b + -ε < a + ε + -ε","b < a + ε","not b < a + ε"]}
{"goal":"a > b + -ε","proof":["a + ε + -ε = a + ε - ε","a + ε - ε = a","a + ε - ε > b + -ε"]}
{"goal":"close_imp_bounds","proof":["not a > b - ε","b + -ε = b - ε"]}
{"goal":"(a - b).abs = b - a","proof":["not a - b < 0 or (a - b).abs = -(a - b)","-(a - b) = b - a","(a - b).abs = -(a - b)","(a - b).abs != -(a - b)"]}
{"goal":"a > b + -ε","proof":["b + -ε = b - ε"]}
{"goal":"-a < -(b + -ε)","proof":["not b - ε < a or -(b - ε) > -a","b + -ε = b - ε","not -a < -(b - ε)","-(b - ε) > -a = -a < -(b - ε)","a > b - ε = b - ε < a","b - ε < a","not -(b - ε) > -a","-(b - ε) > -a"]}
{"goal":"b - a < ε","proof":["ε - b - -a = ε - (b + -a)","-(b - ε) = ε - b","(-(b + -ε) - -a).is_positive = -a < -(b + -ε)","(ε - (b - a)).is_positive = b - a < ε","b + -a = b - a","b + -ε = b - ε","0 < -(b + -ε) - -a = (-(b + -ε) - -a).is_positive","0 < ε - (b - a) = (ε - (b - a)).is_positive"]}
{"goal":"(a - b).abs < ε","proof":[]}
{"goal":"(a - b).abs = a - b","proof":["a - b < 0 or (a - b).abs = a - b"]}
{"goal":"a < ε + b","proof":["ε + b = b + ε"]}
{"goal":"a - b < ε","proof":["not a - b + b < ε + b or a - b < ε","a - b + b = a","not a - b + b < ε + b","a - b + b < ε + b"]}
{"goal":"(a - b).abs < ε","proof":[]}
{"goal":"bounds_imp_close","proof":[]}
{"goal":"ℚ.from_nat(a) < ℚ.from_nat(b)","proof":["not ℤ.from_nat(a) < ℤ.from_nat(b) or ℚ.from_int(ℤ.from_nat(a)) < ℚ.from_int(ℤ.from_nat(b))","ℤ.from_nat(a) < ℤ.from_nat(b) = a < b","ℚ.from_int(ℤ.from_nat(a)) = ℚ.from_nat(a)","ℚ.from_int(ℤ.from_nat(b)) = ℚ.from_nat(b)","not ℚ.from_nat(a) < ℚ.from_int(ℤ.from_nat(b))","ℤ.from_nat(a) < ℤ.from_nat(b)","not ℚ.from_int(ℤ.from_nat(a)) < ℚ.from_int(ℤ.from_nat(b))","ℚ.from_int(ℤ.from_nat(a)) < ℚ.from_int(ℤ.from_nat(b))"]}
{"goal":"nat_lt_imp_rat_lt","proof":[]}
{"goal":"ℚ.from_nat(n) = 0","proof":["ℚ.from_int(ℤ.from_nat(n)) = ℚ.from_nat(n)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℕ.0 != n or ℤ.from_nat(n) = ℤ.0","ℚ.new(ℤ.0, ℤ.1) != ℚ.from_nat(n)","ℚ.from_nat(n) != ℚ.from_int(ℤ.0)","ℤ.from_nat(n) = ℤ.0"]}
{"goal":"0 <= ℚ.from_nat(n)","proof":["ℚ.from_nat(n) != 0 or 0 <= ℚ.from_nat(n)"]}
{"goal":"ℕ.0 < n","proof":["-ℤ.from_nat(n) != lib(int.int_base).sub_nat(ℕ.0, n) or ℕ.0 + n = n","ℕ.0 + n != n or ℕ.0 < n or ℕ.0 = n","-ℤ.from_nat(n) = lib(int.int_base).sub_nat(ℕ.0, n)","ℕ.0 + n != n or ℕ.0 = n","ℕ.0 + n != n"]}
{"goal":"ℚ.from_nat(ℕ.0) < ℚ.from_nat(n)","proof":["not ℕ.0 < n or ℚ.from_nat(ℕ.0) < ℚ.from_nat(n)"]}
{"goal":"0 < ℚ.from_nat(n)","proof":["ℚ.from_nat(n) > 0 = 0 < ℚ.from_nat(n)","ℚ.from_nat(n) > ℚ.from_nat(ℕ.0) = ℚ.from_nat(ℕ.0) < ℚ.from_nat(n)","ℚ.from_int(ℤ.from_nat(ℕ.0)) = ℚ.from_nat(ℕ.0)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℕ.0 != ℕ.0 or ℤ.from_nat(ℕ.0) = ℤ.0","ℤ.from_nat(ℕ.0) = ℤ.0"]}
{"goal":"0 <= ℚ.from_nat(n)","proof":["not 0 < ℚ.from_nat(n) or 0 <= ℚ.from_nat(n)"]}
{"goal":"from_nat_nonneg","proof":[]}
{"goal":"from_nat_one","proof":["ℚ.from_int(ℤ.from_nat(ℕ.1)) = ℚ.from_nat(ℕ.1)","ℚ.from_int(ℤ.from_nat(ℕ.1)) != 1"]}
{"goal":"ℚ.from_nat(a + b) = ℚ.from_int(ℤ.from_nat(a) + ℤ.from_nat(b))","proof":["ℤ.from_nat(a) + ℤ.from_nat(b) = ℤ.from_nat(a + b)","ℚ.from_int(ℤ.from_nat(a + b)) != ℚ.from_nat(a + b)","ℚ.from_int(ℤ.from_nat(a + b)) = ℚ.from_nat(a + b)"]}
{"goal":"from_nat_add","proof":["ℚ.from_int(ℤ.from_nat(a)) + ℚ.from_int(ℤ.from_nat(b)) = ℚ.from_int(ℤ.from_nat(a) + ℤ.from_nat(b))","ℚ.from_int(ℤ.from_nat(a)) = ℚ.from_nat(a)","ℚ.from_int(ℤ.from_nat(b)) = ℚ.from_nat(b)"]}
{"goal":"neg_by_div","proof":["reduce(a.denom, a.num) ⋅ -ℚ.1 = -reduce(a.denom, a.num)","ℚ.1 / a ⋅ -ℚ.1 = -ℚ.1 / a","ℚ.1 / -a = (-a).reciprocal","ℚ.1 / a = a.reciprocal"]}
{"goal":"neg_by_div","proof":["reduce(a.denom, a.num) ⋅ -ℚ.1 = -reduce(a.denom, a.num)","ℚ.1 / a ⋅ -ℚ.1 = -ℚ.1 / a","ℚ.1 / -a = (-a).reciprocal","ℚ.1 / a = a.reciprocal"]}
{"goal":"neg_reciprocal_iff","proof":["0 - 1 / a > 0 = 0 > 1 / a","1 / -a > 0 = -a > 0","1 / -a = -1 / a","-(1 / a - 0) = 0 - 1 / a","-a > 0 = a < 0","0 > 1 / a = 1 / a < 0","1 / a = a.reciprocal","a.reciprocal - 0 = a.reciprocal"]}
{"goal":"neg_reciprocal_iff","proof":["0 - 1 / a > 0 = 0 > 1 / a","1 / -a > 0 = -a > 0","1 / -a = -1 / a","-(1 / a - 0) = 0 - 1 / a","-a > 0 = a < 0","0 > 1 / a = 1 / a < 0","1 / a = a.reciprocal","a.reciprocal - 0 = a.reciprocal"]}
