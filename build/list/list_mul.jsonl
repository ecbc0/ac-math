{"goal":"product[A](List.nil[A] + right) = product[A](right)","proof":["List.nil[A] + right != right","List.nil[A] != List.nil[A] or List.nil[A] + right = right"]}
{"goal":"product[A](List.nil[A]) = A.1","proof":["List.nil[A] != List.nil[A] or product[A](List.nil[A]) = A.1"]}
{"goal":"A.1 ⋅ product[A](right) = product[A](right)","proof":["product[A](right) ⋅ A.1 = A.1 ⋅ product[A](right)","product[A](right) ⋅ A.1 != product[A](right)","product[A](right) ⋅ A.1 = product[A](right)"]}
{"goal":"p(List.nil[A])","proof":["product[A](List.nil[A]) ⋅ product[A](right) != product[A](List.nil[A] + right) or p(List.nil[A])","product[A](List.nil[A]) ⋅ product[A](right) != product[A](List.nil[A] + right)"]}
{"goal":"product[A](List.cons(head, tail) + right) = product[A](List.cons(head, tail + right))","proof":["List.cons(head, tail) + right != List.cons(head, tail + right)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)"]}
{"goal":"product[A](List.cons(head, tail + right)) = head ⋅ product[A](tail + right)","proof":["List.cons(head, tail + right) != List.cons(head, tail + right) or head ⋅ product[A](tail + right) = product[A](List.cons(head, tail + right))"]}
{"goal":"head ⋅ product[A](tail + right) = head ⋅ (product[A](tail) ⋅ product[A](right))","proof":["not p(tail) or product[A](tail) ⋅ product[A](right) = product[A](tail + right)","product[A](tail) ⋅ product[A](right) != product[A](tail + right)","product[A](tail) ⋅ product[A](right) = product[A](tail + right)"]}
{"goal":"product[A](List.cons(head, tail)) = head ⋅ product[A](tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head ⋅ product[A](tail) = product[A](List.cons(head, tail))"]}
{"goal":"product[A](List.cons(head, tail)) ⋅ product[A](right) = head ⋅ product[A](tail) ⋅ product[A](right)","proof":["head ⋅ product[A](tail) != product[A](List.cons(head, tail))"]}
{"goal":"head ⋅ product[A](tail) ⋅ product[A](right) = head ⋅ (product[A](tail) ⋅ product[A](right))","proof":["head ⋅ product[A](tail) ⋅ product[A](right) = head ⋅ (product[A](tail) ⋅ product[A](right))"]}
{"goal":"product[A](List.cons(head, tail) + right) = product[A](List.cons(head, tail)) ⋅ product[A](right)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["product[A](List.cons(head, tail)) ⋅ product[A](right) != product[A](List.cons(head, tail) + right) or p(List.cons(head, tail))","product[A](List.cons(head, tail)) ⋅ product[A](right) != product[A](List.cons(head, tail) + right)"]}
{"goal":"product_add","proof":["let (s0: List[A] -> Bool -> A, s1: List[A] -> Bool -> List[A]) satisfy { forall(x0: List[A] -> Bool, x1: List[A]) { not x0(List.nil[A]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[A] -> Bool, x3: List[A]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[A]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(left) or product[A](left) ⋅ product[A](right) = product[A](left + right)","not p(left)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[A]) or p(left)","not p(List.nil[A]) or p(s1(p)) or p(left)","p(s1(p)) or p(left)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(left)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"product_append","proof":["List.cons(last, List.nil[A]) != List.cons(last, List.nil[A]) or last ⋅ product[A](List.nil[A]) = product[A](List.cons(last, List.nil[A]))","product[A](initial) ⋅ product[A](List.singleton(last)) = product[A](initial + List.singleton(last))","initial + List.singleton(last) = initial.append(last)","List.nil[A] != List.nil[A] or product[A](List.nil[A]) = A.1","List.cons(last, List.nil[A]) = List.singleton(last)","last ⋅ A.1 = last","product[A](List.nil[A]) = A.1","product[A](initial + List.singleton(last)) != product[A](initial) ⋅ last","last ⋅ product[A](List.nil[A]) = product[A](List.cons(last, List.nil[A]))","product[A](initial) ⋅ product[A](List.singleton(last)) != product[A](initial) ⋅ last","product[A](List.singleton(last)) != last"]}
{"goal":"product_singleton","proof":["product[A](List.nil[A]) ⋅ x = product[A](List.nil[A].append(x))","List.nil[A] + List.singleton(x) = List.nil[A].append(x)","A.1 ⋅ x = x ⋅ A.1","List.nil[A] != List.nil[A] or product[A](List.nil[A]) = A.1","List.cons(x, List.nil[A]) = List.singleton(x)","x ⋅ A.1 = x","List.nil[A] + List.cons(x, List.nil[A]) = List.cons(x, List.nil[A])","product[A](List.nil[A]) = A.1"]}
{"goal":"partial_product[A](f, 1) = product[A](1.range.map(f))","proof":["product[A](1.range.map(f)) = partial_product[A](f, 1)"]}
{"goal":"1.range = List.singleton(0)","proof":["0.until(0.suc) = 0.upto(0)","0.upto(0) = 0.suc.range","0.until(0.suc) = List.singleton(0)","0 + 1 = 0.suc","0 + 1 = 1"]}
{"goal":"List.singleton(0).map(f) = List.singleton(f(0))","proof":["List.singleton(0).map(f) = List.singleton(f(0))"]}
{"goal":"partial_one","proof":["List.singleton(0).map(f) = List.singleton(f(0))","product[A](List.singleton(f(0))) = f(0)"]}
