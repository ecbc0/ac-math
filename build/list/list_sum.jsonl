{"goal":"sum[A](List.nil[A] + right) = sum[A](right)","proof":["List.nil[A] + right != right","List.nil[A] != List.nil[A] or List.nil[A] + right = right"]}
{"goal":"sum[A](List.nil[A]) = A.0","proof":["List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0"]}
{"goal":"A.0 + sum[A](right) = sum[A](right)","proof":["sum[A](right) + A.0 = A.0 + sum[A](right)","sum[A](right) + A.0 != sum[A](right)","sum[A](right) + A.0 = sum[A](right)"]}
{"goal":"p(List.nil[A])","proof":["sum[A](List.nil[A]) + sum[A](right) != sum[A](List.nil[A] + right) or p(List.nil[A])","sum[A](List.nil[A]) + sum[A](right) != sum[A](List.nil[A] + right)"]}
{"goal":"sum[A](List.cons(head, tail) + right) = sum[A](List.cons(head, tail + right))","proof":["List.cons(head, tail) + right != List.cons(head, tail + right)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)"]}
{"goal":"sum[A](List.cons(head, tail + right)) = head + sum[A](tail + right)","proof":["List.cons(head, tail + right) != List.cons(head, tail + right) or head + sum[A](tail + right) = sum[A](List.cons(head, tail + right))"]}
{"goal":"head + sum[A](tail + right) = head + (sum[A](tail) + sum[A](right))","proof":["not p(tail) or sum[A](tail) + sum[A](right) = sum[A](tail + right)","sum[A](tail) + sum[A](right) != sum[A](tail + right)","sum[A](tail) + sum[A](right) = sum[A](tail + right)"]}
{"goal":"sum[A](List.cons(head, tail)) = head + sum[A](tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head + sum[A](tail) = sum[A](List.cons(head, tail))"]}
{"goal":"sum[A](List.cons(head, tail)) + sum[A](right) = head + sum[A](tail) + sum[A](right)","proof":["head + sum[A](tail) != sum[A](List.cons(head, tail))"]}
{"goal":"head + sum[A](tail) + sum[A](right) = head + (sum[A](tail) + sum[A](right))","proof":["head + sum[A](tail) + sum[A](right) = head + (sum[A](tail) + sum[A](right))"]}
{"goal":"sum[A](List.cons(head, tail) + right) = sum[A](List.cons(head, tail)) + sum[A](right)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["sum[A](List.cons(head, tail)) + sum[A](right) != sum[A](List.cons(head, tail) + right) or p(List.cons(head, tail))","sum[A](List.cons(head, tail)) + sum[A](right) != sum[A](List.cons(head, tail) + right)"]}
{"goal":"sum_add","proof":["let (s0: (List[A] -> Bool) -> A, s1: (List[A] -> Bool) -> List[A]) satisfy { forall(x0: List[A] -> Bool, x1: List[A]) { not x0(List.nil[A]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[A] -> Bool, x3: List[A]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[A]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(left) or sum[A](left) + sum[A](right) = sum[A](left + right)","not p(left)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[A]) or p(left)","not p(List.nil[A]) or p(s1(p)) or p(left)","p(s1(p)) or p(left)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(left)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"sum_append","proof":["List.cons(last, List.nil[A]) != List.cons(last, List.nil[A]) or last + sum[A](List.nil[A]) = sum[A](List.cons(last, List.nil[A]))","sum[A](initial) + sum[A](List.singleton(last)) = sum[A](initial + List.singleton(last))","initial + List.singleton(last) = initial.append(last)","List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0","List.cons(last, List.nil[A]) = List.singleton(last)","last + A.0 = last","sum[A](List.nil[A]) = A.0","sum[A](initial + List.singleton(last)) != sum[A](initial) + last","last + sum[A](List.nil[A]) = sum[A](List.cons(last, List.nil[A]))","sum[A](initial) + sum[A](List.singleton(last)) != sum[A](initial) + last","sum[A](List.singleton(last)) != last"]}
{"goal":"sum_singleton","proof":["sum[A](List.nil[A]) + x = sum[A](List.nil[A].append(x))","List.nil[A] + List.singleton(x) = List.nil[A].append(x)","A.0 + x = x + A.0","List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0","List.cons(x, List.nil[A]) = List.singleton(x)","x + A.0 = x","List.nil[A] + List.cons(x, List.nil[A]) = List.cons(x, List.nil[A])","sum[A](List.nil[A]) = A.0"]}
{"goal":"partial_sum[A](f, 0, 0) = sum[A](0.upto(0).map(f))","proof":["sum[A](0.upto(0).map(f)) = partial_sum[A](f, 0, 0)"]}
{"goal":"0.upto(0) = List.singleton(0)","proof":["0.until(0.suc) = 0.upto(0)","0.until(0.suc) = List.singleton(0)"]}
{"goal":"List.singleton(0).map(f) = List.singleton(f(0))","proof":["List.singleton(0).map(f) = List.singleton(f(0))"]}
{"goal":"partial_one","proof":["List.singleton(0).map(f) = List.singleton(f(0))","sum[A](List.singleton(f(0))) = f(0)"]}
{"goal":"sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) = A.0 + A.0","proof":["sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) = sum[A](List.nil[T].map(f) + List.nil[T].map(g))","List.nil[T] != List.nil[T] or List.nil[T].map(f) = List.nil[A]","List.nil[T] != List.nil[T] or List.nil[T].map(g) = List.nil[A]","List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0","A.0 + A.0 = A.0","List.nil[A] + List.nil[T].map(g) = List.nil[T].map(g)","sum[A](List.nil[A]) = A.0","List.nil[T].map(f) = List.nil[A]","List.nil[T].map(g) = List.nil[A]"]}
{"goal":"A.0 + A.0 = A.0","proof":["A.0 + A.0 = A.0"]}
{"goal":"sum[A](List.nil[T].map(add_fn[T, A](f, g))) = A.0","proof":["List.nil[T] != List.nil[T] or List.nil[T].map(add_fn[T, A](f, g)) = List.nil[A]","List.nil[T].map(add_fn[T, A](f, g)) != List.nil[A] or sum[A](List.nil[T].map(add_fn[T, A](f, g))) = A.0","List.nil[T].map(add_fn[T, A](f, g)) != List.nil[A]"]}
{"goal":"p(List.nil[T])","proof":["sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) != sum[A](List.nil[T].map(add_fn[T, A](f, g))) or p(List.nil[T])","A.0 + A.0 = A.0","sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) = A.0","sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) != sum[A](List.nil[T].map(add_fn[T, A](f, g)))","sum[A](List.nil[T].map(f)) + sum[A](List.nil[T].map(g)) = sum[A](List.nil[T].map(add_fn[T, A](f, g)))"]}
{"goal":"sum[A](List.cons(head, tail).map(f)) = sum[A](List.cons(f(head), tail.map(f)))","proof":["List.cons(f(head), tail.map(f)) != List.cons(head, tail).map(f)","List.cons(head, tail) != List.cons(head, tail) or List.cons(f(head), tail.map(f)) = List.cons(head, tail).map(f)"]}
{"goal":"sum[A](List.cons(f(head), tail.map(f))) = f(head) + sum[A](tail.map(f))","proof":["List.cons(f(head), tail.map(f)) != List.cons(f(head), tail.map(f)) or f(head) + sum[A](tail.map(f)) = sum[A](List.cons(f(head), tail.map(f)))"]}
{"goal":"sum[A](List.cons(head, tail).map(g)) = sum[A](List.cons(g(head), tail.map(g)))","proof":["List.cons(g(head), tail.map(g)) != List.cons(head, tail).map(g)","List.cons(head, tail) != List.cons(head, tail) or List.cons(g(head), tail.map(g)) = List.cons(head, tail).map(g)"]}
{"goal":"sum[A](List.cons(g(head), tail.map(g))) = g(head) + sum[A](tail.map(g))","proof":["List.cons(g(head), tail.map(g)) != List.cons(g(head), tail.map(g)) or g(head) + sum[A](tail.map(g)) = sum[A](List.cons(g(head), tail.map(g)))"]}
{"goal":"List.cons(head, tail).map(add_fn[T, A](f, g)) = List.cons(add_fn[T, A](f, g)(head), tail.map(add_fn[T, A](f, g)))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(add_fn[T, A](f, g, head), tail.map(add_fn[T, A](f, g))) = List.cons(head, tail).map(add_fn[T, A](f, g))","List.cons(add_fn[T, A](f, g, head), tail.map(add_fn[T, A](f, g))) = List.cons(head, tail).map(add_fn[T, A](f, g))"]}
{"goal":"add_fn[T, A](f, g)(head) = f(head) + g(head)","proof":["f(head) + g(head) = add_fn[T, A](f, g, head)"]}
{"goal":"sum[A](List.cons(head, tail).map(add_fn[T, A](f, g))) = sum[A](List.cons(f(head) + g(head), tail.map(add_fn[T, A](f, g))))","proof":[]}
{"goal":"sum[A](List.cons(f(head) + g(head), tail.map(add_fn[T, A](f, g)))) = f(head) + g(head) + sum[A](tail.map(add_fn[T, A](f, g)))","proof":["List.cons(f(head) + g(head), tail.map(add_fn[T, A](f, g))) != List.cons(f(head) + g(head), tail.map(add_fn[T, A](f, g))) or f(head) + g(head) + sum[A](tail.map(add_fn[T, A](f, g))) = sum[A](List.cons(f(head) + g(head), tail.map(add_fn[T, A](f, g))))"]}
{"goal":"sum[A](tail.map(f)) + sum[A](tail.map(g)) = sum[A](tail.map(add_fn[T, A](f, g)))","proof":["not p(tail) or sum[A](tail.map(f)) + sum[A](tail.map(g)) = sum[A](tail.map(add_fn[T, A](f, g)))"]}
{"goal":"f(head) + sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))) = f(head) + g(head) + sum[A](tail.map(add_fn[T, A](f, g)))","proof":["f(head) + g(head) + sum[A](tail.map(add_fn[T, A](f, g))) = f(head) + (g(head) + sum[A](tail.map(add_fn[T, A](f, g))))","f(head) + sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))) = f(head) + (sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))))","g(head) + sum[A](tail.map(g)) + sum[A](tail.map(f)) = g(head) + (sum[A](tail.map(g)) + sum[A](tail.map(f)))","g(head) + sum[A](tail.map(add_fn[T, A](f, g))) + f(head) = f(head) + (g(head) + sum[A](tail.map(add_fn[T, A](f, g))))","sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))) + f(head) = f(head) + (sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))))","sum[A](tail.map(f)) + (g(head) + sum[A](tail.map(g))) = g(head) + sum[A](tail.map(g)) + sum[A](tail.map(f))","sum[A](tail.map(g)) + sum[A](tail.map(f)) = sum[A](tail.map(f)) + sum[A](tail.map(g))"]}
{"goal":"p(List.cons(head, tail))","proof":["sum[A](List.cons(head, tail).map(f)) + sum[A](List.cons(head, tail).map(g)) != sum[A](List.cons(head, tail).map(add_fn[T, A](f, g))) or p(List.cons(head, tail))","sum[A](List.cons(head, tail).map(f)) + sum[A](List.cons(head, tail).map(g)) != sum[A](List.cons(head, tail).map(add_fn[T, A](f, g)))"]}
{"goal":"map_sum_add","proof":["let (s0: (List[T] -> Bool) -> T, s1: (List[T] -> Bool) -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(list) or sum[A](list.map(f)) + sum[A](list.map(g)) = sum[A](list.map(add_fn[T, A](f, g)))","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(list)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"partial_sum[A](f, n, m) = sum[A](n.upto(m).map(f))","proof":["sum[A](n.upto(m).map(f)) = partial_sum[A](f, n, m)"]}
{"goal":"partial_sum[A](g, n, m) = sum[A](n.upto(m).map(g))","proof":["sum[A](n.upto(m).map(g)) = partial_sum[A](g, n, m)"]}
{"goal":"partial_sum[A](add_fn[ℕ, A](f, g), n, m) = sum[A](n.upto(m).map(add_fn[ℕ, A](f, g)))","proof":["sum[A](n.upto(m).map(add_fn[ℕ, A](f, g))) = partial_sum[A](add_fn[ℕ, A](f, g), n, m)"]}
{"goal":"sum[A](n.upto(m).map(f)) + sum[A](n.upto(m).map(g)) = sum[A](n.upto(m).map(add_fn[ℕ, A](f, g)))","proof":["sum[A](n.upto(m).map(f)) + sum[A](n.upto(m).map(g)) = sum[A](n.upto(m).map(add_fn[ℕ, A](f, g)))"]}
{"goal":"partial_add","proof":[]}
{"goal":"sum[S](List.nil[S]) = S.0","proof":["List.nil[S] != List.nil[S] or sum[S](List.nil[S]) = S.0"]}
{"goal":"c ⋅ S.0 = S.0","proof":["S.0 ⋅ c = c ⋅ S.0","S.0 ⋅ c != S.0","S.0 ⋅ c = S.0"]}
{"goal":"List.nil[S].map(scalar_mul(c)) = List.nil[S]","proof":["List.nil[S] != List.nil[S] or List.nil[S].map(scalar_mul(c)) = List.nil[S]"]}
{"goal":"sum[S](List.nil[S]) = S.0","proof":[]}
{"goal":"p(List.nil[S])","proof":["sum[S](List.nil[S].map(scalar_mul(c))) != c ⋅ sum[S](List.nil[S]) or p(List.nil[S])","sum[S](List.nil[S].map(scalar_mul(c))) != c ⋅ sum[S](List.nil[S])"]}
{"goal":"sum[S](List.cons(head, tail)) = head + sum[S](tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or sum[S](List.cons(head, tail)) = head + sum[S](tail)"]}
{"goal":"c ⋅ sum[S](List.cons(head, tail)) = c ⋅ (head + sum[S](tail))","proof":["sum[S](List.cons(head, tail)) != head + sum[S](tail)"]}
{"goal":"c ⋅ (head + sum[S](tail)) = c ⋅ head + c ⋅ sum[S](tail)","proof":["c ⋅ head + c ⋅ sum[S](tail) = c ⋅ (head + sum[S](tail))"]}
{"goal":"c ⋅ sum[S](tail) = sum[S](tail.map(scalar_mul(c)))","proof":["not p(tail) or sum[S](tail.map(scalar_mul(c))) = c ⋅ sum[S](tail)"]}
{"goal":"c ⋅ head + c ⋅ sum[S](tail) = c ⋅ head + sum[S](tail.map(scalar_mul(c)))","proof":["sum[S](tail.map(scalar_mul(c))) != c ⋅ sum[S](tail)"]}
{"goal":"List.cons(head, tail).map(scalar_mul(c)) = List.cons(scalar_mul(c)(head), tail.map(scalar_mul(c)))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(scalar_mul(c, head), tail.map(scalar_mul(c))) = List.cons(head, tail).map(scalar_mul(c))","List.cons(scalar_mul(c, head), tail.map(scalar_mul(c))) = List.cons(head, tail).map(scalar_mul(c))"]}
{"goal":"scalar_mul(c)(head) = c ⋅ head","proof":["scalar_mul(c, head) = c ⋅ head"]}
{"goal":"List.cons(head, tail).map(scalar_mul(c)) = List.cons(c ⋅ head, tail.map(scalar_mul(c)))","proof":["List.cons(scalar_mul(c, head), tail.map(scalar_mul(c))) != List.cons(head, tail).map(scalar_mul(c))"]}
{"goal":"sum[S](List.cons(head, tail).map(scalar_mul(c))) = c ⋅ head + sum[S](tail.map(scalar_mul(c)))","proof":["List.cons(c ⋅ head, tail.map(scalar_mul(c))) != List.cons(head, tail).map(scalar_mul(c)) or c ⋅ head + sum[S](tail.map(scalar_mul(c))) = sum[S](List.cons(head, tail).map(scalar_mul(c)))"]}
{"goal":"c ⋅ sum[S](List.cons(head, tail)) = sum[S](List.cons(head, tail).map(scalar_mul(c)))","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["sum[S](List.cons(head, tail).map(scalar_mul(c))) != c ⋅ sum[S](List.cons(head, tail)) or p(List.cons(head, tail))","sum[S](List.cons(head, tail).map(scalar_mul(c))) != c ⋅ sum[S](List.cons(head, tail))"]}
{"goal":"sum_scalar_mul","proof":["let (s0: (List[S] -> Bool) -> S, s1: (List[S] -> Bool) -> List[S]) satisfy { forall(x0: List[S] -> Bool, x1: List[S]) { not x0(List.nil[S]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[S] -> Bool, x3: List[S]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[S]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(list) or sum[S](list.map(scalar_mul(c))) = c ⋅ sum[S](list)","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[S]) or p(list)","not p(List.nil[S]) or p(s1(p)) or p(list)","p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(list)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"partial_sum[S](f, n, m) = sum[S](n.upto(m).map(f))","proof":["sum[S](n.upto(m).map(f)) = partial_sum[S](f, n, m)"]}
{"goal":"c ⋅ partial_sum[S](f, n, m) = c ⋅ sum[S](n.upto(m).map(f))","proof":["sum[S](n.upto(m).map(f)) != partial_sum[S](f, n, m)"]}
{"goal":"c ⋅ sum[S](n.upto(m).map(f)) = sum[S](n.upto(m).map(f).map(scalar_mul(c)))","proof":["sum[S](n.upto(m).map(f).map(scalar_mul(c))) = c ⋅ sum[S](n.upto(m).map(f))"]}
{"goal":"n.upto(m).map(f).map(scalar_mul(c)) = n.upto(m).map(compose[ℕ, S, S](scalar_mul(c), f))","proof":["n.upto(m).map(compose[ℕ, S, S](scalar_mul(c), f)) = n.upto(m).map(f).map(scalar_mul(c))"]}
{"goal":"compose[ℕ, S, S](scalar_mul(c), f)(k) = scalar_mul(c)(f(k))","proof":["compose[ℕ, S, S](scalar_mul(c), f, k) = scalar_mul(c, f(k))"]}
{"goal":"scalar_mul(c)(f(k)) = c ⋅ f(k)","proof":["scalar_mul(c, f(k)) = c ⋅ f(k)"]}
{"goal":"mul_fn[ℕ, S](c, f)(k) = c ⋅ f(k)","proof":["mul_fn(c, f, k) = c ⋅ f(k)"]}
{"goal":"compose[ℕ, S, S](scalar_mul(c), f)(k) = mul_fn[ℕ, S](c, f)(k)","proof":[]}
{"goal":"compose[ℕ, S, S](scalar_mul(c), f) = mul_fn[ℕ, S](c, f)","proof":["let s0: ℕ satisfy { compose[ℕ, S, S](scalar_mul(c), f, s0) != mul_fn(c, f, s0) }","compose[ℕ, S, S](scalar_mul(c), f, s0) = mul_fn(c, f, s0)"]}
{"goal":"n.upto(m).map(compose[ℕ, S, S](scalar_mul(c), f)) = n.upto(m).map(mul_fn[ℕ, S](c, f))","proof":["compose[ℕ, S, S](scalar_mul(c), f) != mul_fn[ℕ, S](c, f)"]}
{"goal":"sum[S](n.upto(m).map(f).map(scalar_mul(c))) = sum[S](n.upto(m).map(mul_fn[ℕ, S](c, f)))","proof":[]}
{"goal":"partial_sum[S](mul_fn[ℕ, S](c, f), n, m) = sum[S](n.upto(m).map(mul_fn[ℕ, S](c, f)))","proof":["sum[S](n.upto(m).map(mul_fn[ℕ, S](c, f))) = partial_sum[S](mul_fn[ℕ, S](c, f), n, m)"]}
{"goal":"partial_scalar_mul","proof":[]}
