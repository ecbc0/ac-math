{"goal":"not_contains_is_not_contains","proof":["item ∉ list != item ∈ list"]}
{"goal":"add_nil_right","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) + List.nil[T] != List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) or add_nil_right[T](List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])))","List.nil[T] + List.nil[T] != List.nil[T] or add_nil_right[T](List.nil[T])","not add_nil_right[T](list) or list + List.nil[T] = list","not add_nil_right[T](s1(add_nil_right[T])) or s1(add_nil_right[T]) + List.nil[T] = s1(add_nil_right[T])","not add_nil_right[T](list)","List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) != List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) or List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) + List.nil[T] = List.cons(s0(add_nil_right[T]), s1(add_nil_right[T]) + List.nil[T])","not add_nil_right[T](List.cons(s0(add_nil_right[T]), s1(add_nil_right[T]))) or not add_nil_right[T](List.nil[T]) or add_nil_right[T](list)","not add_nil_right[T](List.nil[T]) or add_nil_right[T](s1(add_nil_right[T])) or add_nil_right[T](list)","List.nil[T] != List.nil[T] or List.nil[T] + List.nil[T] = List.nil[T]","List.nil[T] + List.nil[T] = List.nil[T]","add_nil_right[T](List.nil[T])","List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) + List.nil[T] = List.cons(s0(add_nil_right[T]), s1(add_nil_right[T]) + List.nil[T])","add_nil_right[T](s1(add_nil_right[T]))","not add_nil_right[T](List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])))","s1(add_nil_right[T]) + List.nil[T] = s1(add_nil_right[T])","List.cons(s0(add_nil_right[T]), s1(add_nil_right[T])) + List.nil[T] != List.cons(s0(add_nil_right[T]), s1(add_nil_right[T]))"]}
{"goal":"add_nil_left","proof":["List.nil[T] != List.nil[T] or List.nil[T] + list = list"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] or f(List.nil[T])","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"f(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail) or f(List.cons(head, tail))","not item ∈ List.cons(head, tail) + right or f(List.cons(head, tail))","not item ∈ tail or not f(tail) or item ∈ tail + right","not item ∈ tail + right or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","item ∈ List.cons(head, tail)","List.cons(head, tail + right) != List.cons(head, tail + right) or head != item or item ∈ List.cons(head, tail + right)","not item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail + right)","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail) or item ∈ tail or head = item","not item ∈ tail + right or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail + right)","item ∈ tail or head = item","head != item","item ∈ tail","not item ∈ tail + right","item ∈ tail + right"]}
{"goal":"add_contains_left","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not item ∈ left or not f(left) or item ∈ left + right","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] + right = f(List.nil[T])","not item ∈ List.nil[T] + right","List.nil[T] + right = right"]}
{"goal":"f(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail) + right = f(List.cons(head, tail))","item ∈ tail + right = f(tail)","not item ∈ tail + right or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ List.cons(head, tail + right) or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","List.cons(head, tail + right) != List.cons(head, tail + right) or head != item or item ∈ List.cons(head, tail + right)","not item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail + right)","item ∈ tail + right","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ tail + right or item ∈ List.cons(head, tail + right) or head = item","not item ∈ List.cons(head, tail + right)","head != item","head = item"]}
{"goal":"add_contains_right","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","item ∈ left + right = f(left)","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"f(List.nil[T])","proof":["item ∈ List.nil[T] + right or f(List.nil[T])","item ∈ List.nil[T] + right","item ∉ right != item ∈ right","List.nil[T] + right = right","item ∈ right","not item ∉ right or not item ∈ right"]}
{"goal":"f(List.cons(head, tail))","proof":["not item ∈ List.cons(head, tail) or f(List.cons(head, tail))","item ∈ List.cons(head, tail) + right or f(List.cons(head, tail))","not item ∈ tail + right or not f(tail) or item ∈ tail","not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or head = item","not item ∈ List.cons(head, tail + right) or List.cons(head, tail + right) != List.cons(head, tail + right) or item ∈ tail + right or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail)","List.cons(head, tail) != List.cons(head, tail) or head != item or item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail) + right","head != item or item ∈ List.cons(head, tail)","List.cons(head, tail) + right = List.cons(head, tail + right)","not item ∈ List.cons(head, tail + right) or item ∈ tail + right or head = item","not item ∈ tail or item ∈ List.cons(head, tail) or head = item","item ∈ List.cons(head, tail + right)","head != item","not item ∈ tail","item ∈ tail + right","not item ∈ tail + right"]}
{"goal":"not_contains_add","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not item ∈ left + right or not f(left) or item ∈ left","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(s1(f))","item ∉ left != item ∈ left","item ∉ left + right != item ∈ left + right","item ∉ left + right or item ∈ left + right","item ∈ left + right","not item ∉ left or not item ∈ left","not item ∈ left","f(s1(f)) or f(s1(f))","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(left)","f(List.cons(s0(f), s1(f)))"]}
{"goal":"contains_add","proof":["not item ∉ left or not item ∉ right or item ∉ left + right","item ∉ left + right != item ∈ left + right","item ∉ left != item ∈ left","item ∉ right != item ∈ right","item ∉ left or item ∈ left","item ∉ right or item ∈ right","item ∉ right","item ∉ left","not item ∉ left + right or not item ∈ left + right","not item ∉ left + right"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].length + right.length != (List.nil[T] + right).length or f(List.nil[T])","List.nil[T] != List.nil[T] or List.nil[T].length = 0","List.nil[T] + right = right","0 + right.length = right.length","List.nil[T].length = 0","List.nil[T].length + right.length != (List.nil[T] + right).length"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).length + right.length != (List.cons(head, tail) + right).length or f(List.cons(head, tail))","not f(tail) or tail.length + right.length = (tail + right).length","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)","tail.length.suc != tail.length.suc or right.length + tail.length.suc = (right.length + tail.length).suc","List.cons(head, tail + right) != List.cons(head, tail + right) or List.cons(head, tail + right).length = (tail + right).length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail).length + right.length = right.length + List.cons(head, tail).length","tail.length + right.length = right.length + tail.length","List.cons(head, tail + right).length = (tail + right).length.suc","List.cons(head, tail).length = tail.length.suc","right.length + tail.length.suc = (right.length + tail.length).suc","List.cons(head, tail) + right = List.cons(head, tail + right)","List.cons(head, tail).length + right.length != (List.cons(head, tail) + right).length","tail.length + right.length = (tail + right).length"]}
{"goal":"add_length","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(left) or left.length + right.length = (left + right).length","not f(left)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(left)","not f(List.nil[T]) or f(s1(f)) or f(left)","f(s1(f)) or f(left)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(left)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"singleton_unique","proof":["List.cons(item, List.nil[T]) != List.singleton(item) or List.cons(item, List.nil[T].unique) = List.singleton(item).unique or item ∈ List.nil[T]","List.singleton(item).unique != List.singleton(item) or List.singleton(item).is_unique","List.singleton(item).unique != List.singleton(item)","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.cons(item, List.nil[T]) = List.singleton(item)","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]","not item ∈ List.nil[T]","List.nil[T].unique = List.nil[T]","List.singleton(item).unique != List.cons(item, List.nil[T])","List.cons(item, List.nil[T].unique) != List.singleton(item).unique"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].unique.length <= List.nil[T].length = f(List.nil[T])","not List.nil[T].unique.length <= List.nil[T].length","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].length != List.nil[T].length or List.nil[T].length <= List.nil[T].length","List.nil[T].length <= List.nil[T].length","List.nil[T].unique = List.nil[T]"]}
{"goal":"tail.unique.length <= tail.length","proof":["tail.unique.length <= tail.length = f(tail)"]}
{"goal":"List.cons(head, tail).length = tail.length.suc","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.length <= List.cons(head, tail).length = f(List.cons(head, tail))","tail.unique.length < tail.length + 1 = tail.unique.length <= tail.length","not tail.unique.length < tail.length.suc or tail.unique.length <= tail.length.suc","tail.length + 1 = tail.length.suc","not List.cons(head, tail).unique.length <= List.cons(head, tail).length","not tail.unique.length <= List.cons(head, tail).length","not tail.unique.length <= tail.length.suc","tail.unique.length < tail.length + 1","not tail.unique.length < tail.length.suc","tail.unique.length < tail.length.suc"]}
{"goal":"List.cons(head, tail).unique.length = tail.unique.length.suc","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique) or List.cons(head, tail).unique.length = tail.unique.length.suc","List.cons(head, tail).unique != List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.length <= List.cons(head, tail).length = f(List.cons(head, tail))","tail.unique.length < tail.length + 1 = tail.unique.length <= tail.length","tail.unique.length + 1 <= tail.length + 1 = tail.unique.length < tail.length + 1","tail.length + 1 = tail.length.suc","tail.unique.length + 1 = tail.unique.length.suc"]}
{"goal":"f(List.cons(head, tail))","proof":[]}
{"goal":"unique_length","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","list.unique.length <= list.length = f(list)","not f(list)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(list)","not f(List.nil[T]) or f(s1(f)) or f(list)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"head ∈ tail implies List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) != List.cons(head, tail) or not head ∈ tail"]}
{"goal":"unique_decomposition","proof":["not head ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique)"]}
{"goal":"head = item or item ∈ tail implies item ∈ List.cons(head, tail)","proof":["not item ∈ tail or List.cons(head, tail) != List.cons(head, tail) or item ∈ List.cons(head, tail) or item = head","List.cons(head, tail) != List.cons(head, tail) or item != head or item ∈ List.cons(head, tail)","List.cons(head, tail) != List.cons(head, tail) or item != head","item != head","item ∈ tail","not item ∈ tail or item ∈ List.cons(head, tail) or item = head"]}
{"goal":"contains_decomposition","proof":["item != head","not item ∈ tail","item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail) or List.cons(head, tail) != List.cons(head, tail) or item ∈ tail or item = head","not item ∈ List.cons(head, tail) or item ∈ tail or item = head"]}
{"goal":"contains_decomposition_neg_dual","proof":["item != head","not item ∈ tail","not item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail)"]}
{"goal":"item ∈ List.cons(head, tail) implies item ∈ tail","proof":["not item ∈ List.cons(head, tail) or item ∈ tail or item = head"]}
{"goal":"contains_when_head_not_eq_item","proof":["item ∈ List.cons(head, tail) or item ∈ tail","item ∈ tail","not item ∈ List.cons(head, tail)","not item ∈ tail or item ∈ List.cons(head, tail)"]}
{"goal":"item ∈ tail","proof":[]}
{"goal":"item ∈ List.cons(head, tail)","proof":["not head ∈ List.cons(head, tail)","not head ∈ tail or head ∈ List.cons(head, tail)"]}
{"goal":"item ∈ List.cons(head, tail) implies item ∈ tail","proof":["not item ∈ List.cons(head, tail) or item ∈ tail or item = head"]}
{"goal":"item ∈ List.cons(head, tail) = item ∈ tail","proof":["item ∈ List.cons(head, tail) = item ∈ tail or item = head"]}
{"goal":"contains_when_tail_contains_head","proof":["not item ∈ tail","not head ∈ tail"]}
{"goal":"contains_when_tail_not_contains_head","proof":["not item ∈ List.cons(head, tail)","not head ∈ List.cons(head, tail)","head != head or head ∈ List.cons(head, tail)"]}
{"goal":"p(List.nil[T])","proof":["item ∈ List.nil[T].unique != item ∈ List.nil[T] or p(List.nil[T])","List.nil[T].unique != List.nil[T] or p(List.nil[T])","List.nil[T].unique != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail).unique = tail.unique"]}
{"goal":"item ∈ List.cons(head, tail) = item ∈ tail","proof":["not head ∈ tail or item ∈ List.cons(head, tail) = item ∈ tail"]}
{"goal":"item ∈ tail.unique = item ∈ tail","proof":["not p(tail) or item ∈ tail.unique = item ∈ tail"]}
{"goal":"p(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail) or p(List.cons(head, tail))","item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","head ∈ tail","head ∉ tail != head ∈ tail","not head ∉ tail or not head ∈ tail"]}
{"goal":"item ∈ List.cons(head, tail) = (head = item)","proof":["not item ∈ List.cons(head, tail)","not item ∈ List.cons(item, tail)","item ∉ tail","not item ∉ tail or item != item or item ∈ List.cons(item, tail)"]}
{"goal":"item ∈ List.cons(head, tail.unique) = (head = item)","proof":["not item ∈ List.cons(head, tail.unique)","not item ∈ List.cons(item, tail.unique)","item != item or item ∈ List.cons(item, tail.unique)"]}
{"goal":"p(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail) or p(List.cons(head, tail))","not item ∈ List.cons(head, tail).unique or not item ∈ List.cons(head, tail) or p(List.cons(head, tail))","item ∈ List.cons(head, tail).unique","not item ∈ List.cons(head, tail).unique"]}
{"goal":"item ∈ List.cons(head, tail) = item ∈ tail","proof":["item ∈ List.cons(head, tail) = item ∈ tail or head = item"]}
{"goal":"item ∈ List.cons(head, tail.unique) = item ∈ tail.unique","proof":["item ∈ List.cons(head, tail.unique) = item ∈ tail.unique or head = item"]}
{"goal":"item ∈ tail.unique = item ∈ tail","proof":["not p(tail) or item ∈ tail.unique = item ∈ tail"]}
{"goal":"p(List.cons(head, tail))","proof":["item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail) or p(List.cons(head, tail))","item ∈ List.cons(head, tail).unique != item ∈ List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["head ∉ tail != head ∈ tail","head ∉ tail or head ∈ tail"]}
{"goal":"unique_preserves_contains","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(list) or item ∈ list.unique = item ∈ list","not p(list)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(list)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"f(List.nil[T])","proof":["List.nil[T].unique.unique != List.nil[T].unique or f(List.nil[T])","List.nil[T].unique.unique != List.nil[T].unique","List.nil[T].unique != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]"]}
{"goal":"tail.unique.unique = tail.unique","proof":["not f(tail) or tail.unique.unique = tail.unique"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail).unique = tail.unique"]}
{"goal":"List.cons(head, tail).unique.unique = tail.unique.unique","proof":["List.cons(head, tail).unique != tail.unique"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.unique != List.cons(head, tail).unique or f(List.cons(head, tail))","List.cons(head, tail).unique.unique = tail.unique","List.cons(head, tail).unique.unique != List.cons(head, tail).unique","List.cons(head, tail).unique.unique = List.cons(head, tail).unique"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","head ∈ tail","head ∉ tail != head ∈ tail","not head ∉ tail or not head ∈ tail"]}
{"goal":"head ∉ tail.unique","proof":["head ∈ tail.unique = head ∈ tail","head ∉ tail != head ∈ tail","head ∉ tail.unique != head ∈ tail.unique","head ∉ tail.unique or head ∈ tail.unique","head ∈ tail.unique","head ∈ tail","not head ∉ tail or not head ∈ tail"]}
{"goal":"List.cons(head, tail.unique).unique = List.cons(head, tail.unique.unique)","proof":["List.cons(head, tail.unique) != List.cons(head, tail.unique) or List.cons(head, tail.unique).unique = List.cons(head, tail.unique.unique) or head ∈ tail.unique","head ∈ tail.unique","head ∈ tail.unique = head ∈ tail","head ∈ tail","head ∉ tail != head ∈ tail","not head ∉ tail or not head ∈ tail"]}
{"goal":"f(List.cons(head, tail))","proof":["List.cons(head, tail).unique.unique != List.cons(head, tail).unique or f(List.cons(head, tail))","List.cons(head, tail).unique.unique != List.cons(head, tail).unique"]}
{"goal":"f(List.cons(head, tail))","proof":["head ∉ tail != head ∈ tail","head ∉ tail or head ∈ tail"]}
{"goal":"unique_indemp","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(list) or list.unique.unique = list.unique","not f(list)","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(list)","not f(List.nil[T]) or f(s1(f)) or f(list)","f(s1(f)) or f(list)","f(s1(f))","not f(List.cons(s0(f), s1(f))) or f(list)","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"unique_list_is_unique","proof":["list.unique.unique != list.unique or list.unique.is_unique","list.unique.unique != list.unique","list.unique.unique = list.unique"]}
{"goal":"List.cons(head, tail).unique = tail.unique","proof":["not head ∈ tail or List.cons(head, tail).unique = tail.unique"]}
{"goal":"List.cons(head, tail).length = tail.length + 1","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","tail.length + 1 = 1 + tail.length","1 + tail.length != List.cons(head, tail).length","1 + tail.length = tail.length.suc","List.cons(head, tail).length != tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique.length < List.cons(head, tail).length","proof":["List.cons(head, tail).unique.length < tail.length + 1 = List.cons(head, tail).unique.length <= tail.length","tail.unique.length <= tail.length","not List.cons(head, tail).unique.length < tail.length + 1","not List.cons(head, tail).unique.length <= tail.length"]}
{"goal":"not List.cons(head, tail).is_unique","proof":["not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","not List.cons(head, tail).length < List.cons(head, tail).length","List.cons(head, tail).unique = List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).unique = List.cons(head, tail.unique)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail"]}
{"goal":"unique_implies_tail_unique","proof":["List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","List.cons(head, tail.unique) != List.cons(head, tail) or tail.unique = tail","tail.unique != tail or tail.is_unique","tail.unique != tail","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail).unique = List.cons(head, tail)","List.cons(head, tail).unique = List.cons(head, tail.unique)","List.cons(head, tail.unique) = List.cons(head, tail)"]}
{"goal":"count_increas","proof":["List.cons(item, tail) != List.cons(item, tail) or item != item or 1 + tail.count(item) = List.cons(item, tail).count(item)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or item = head","tail.count(item) + 0.suc != List.cons(head, tail).count(item) or tail.count(item) < List.cons(head, tail).count(item) or 0.suc = 0","List.cons(head, tail).count(item) >= tail.count(item) = tail.count(item) <= List.cons(head, tail).count(item)","not tail.count(item) <= List.cons(head, tail).count(item)","not tail.count(item) < List.cons(head, tail).count(item) or tail.count(item) <= List.cons(head, tail).count(item)","tail.count(item) + 1 = 1 + tail.count(item)","List.cons(head, tail).count(item) != tail.count(item) or tail.count(item) <= List.cons(head, tail).count(item)","0.suc != 0","List.cons(head, tail).count(item) != tail.count(item)","List.cons(head, tail).count(item) = tail.count(item) or item = head","item != item or 1 + tail.count(item) = List.cons(item, tail).count(item)","not tail.count(item) < List.cons(head, tail).count(item)","1 + tail.count(item) = List.cons(item, tail).count(item)","item = head","tail.count(item) + 0.suc != List.cons(head, tail).count(item) or 0.suc = 0","tail.count(item) + 0.suc != List.cons(head, tail).count(item)"]}
{"goal":"p(List.nil[T])","proof":["item ∈ List.nil[T] or p(List.nil[T])","item ∈ List.nil[T]","not item ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"List.cons(head, tail).count(item) = 1 + tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or 1 + tail.count(item) = List.cons(head, tail).count(item)","List.cons(head, tail) != List.cons(head, tail) or head != item"]}
{"goal":"List.cons(head, tail).count(item) >= 1","proof":["1 + tail.count(item) != List.cons(head, tail).count(item) or 1 < List.cons(head, tail).count(item) or tail.count(item) = 0","List.cons(head, tail).count(item) >= 1 = 1 <= List.cons(head, tail).count(item)","not 1 <= List.cons(head, tail).count(item)","not 1 < List.cons(head, tail).count(item) or 1 <= List.cons(head, tail).count(item)","List.cons(head, tail).count(item) != 1 or 1 <= List.cons(head, tail).count(item)","1 + tail.count(item) = tail.count(item).suc","List.cons(head, tail).count(item) != 1","not 1 < List.cons(head, tail).count(item)","tail.count(item) = 0"]}
{"goal":"item ∈ tail","proof":["not item ∈ List.cons(head, tail) or item ∈ tail or head = item"]}
{"goal":"tail.count(item) >= 1","proof":["not item ∈ tail or not p(tail) or tail.count(item) >= 1"]}
{"goal":"List.cons(head, tail).count(item) >= 1","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item)","List.cons(head, tail).count(item) = tail.count(item)"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(item) >= 1 or p(List.cons(head, tail))","not List.cons(head, tail).count(item) >= 1","List.cons(head, tail).count(item) >= 1"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","item ∈ List.cons(s0(p), s1(p)) or p(List.cons(s0(p), s1(p)))","not item ∈ List.cons(s0(p), s1(p)) or not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))","not item ∈ List.cons(s0(p), s1(p))","item ∈ List.cons(s0(p), s1(p))"]}
{"goal":"list_contains_implies_count_geq_one","proof":["not item ∈ list or not p(list) or list.count(item) >= 1"]}
{"goal":"p(List.nil[T])","proof":["List.nil[T].count(item) != 0 or p(List.nil[T])","List.nil[T].count(item) != 0","List.nil[T] != List.nil[T] or List.nil[T].count(item) = 0"]}
{"goal":"head != item and item ∉ tail","proof":["not item ∈ tail or item ∈ List.cons(head, tail)","head != item or item ∈ List.cons(head, tail)","item ∉ List.cons(head, tail) != item ∈ List.cons(head, tail)","item ∉ tail != item ∈ tail","item ∉ tail or item ∈ tail","not item ∉ List.cons(head, tail) or not item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail)","head != item","not item ∉ tail","not item ∈ tail","item ∈ tail"]}
{"goal":"List.cons(head, tail).count(item) = 0","proof":["not p(tail) or tail.count(item) = 0 or item ∈ tail","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","item ∉ tail != item ∈ tail","not item ∉ tail or not item ∈ tail","not item ∈ tail","tail.count(item) = 0","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item)","List.cons(head, tail).count(item) = tail.count(item)"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).count(item) != 0 or p(List.cons(head, tail))"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not item ∈ List.cons(s0(p), s1(p)) or p(List.cons(s0(p), s1(p)))","not item ∉ List.cons(s0(p), s1(p)) or not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","item ∉ List.cons(s0(p), s1(p)) != item ∈ List.cons(s0(p), s1(p))","not p(List.cons(s0(p), s1(p)))","item ∉ List.cons(s0(p), s1(p)) or item ∈ List.cons(s0(p), s1(p))","not item ∈ List.cons(s0(p), s1(p))","not item ∉ List.cons(s0(p), s1(p))","item ∉ List.cons(s0(p), s1(p))"]}
{"goal":"list_not_contains_iff_count_zero","proof":["not p(list) or list.count(item) = 0 or item ∈ list","not list.count(item) <= 0 or not 0 < list.count(item) or 0 < 0","not item ∈ list or list.count(item) >= 1","0 + 1 <= list.count(item) = 0 < list.count(item)","list.count(item) >= 0 + 1 = 0 + 1 <= list.count(item)","list.count(item) != 0 or list.count(item) <= 0","0 + 1 = 1","not 0 < 0","not 0 + 1 <= list.count(item) or 0 < list.count(item)","list.count(item) = 0 or item ∈ list","item ∈ list","list.count(item) = 0","list.count(item) <= 0","list.count(item) >= 1","not 0 < list.count(item)","list.count(item) >= 0 + 1","0 + 1 <= list.count(item)"]}
{"goal":"p(List.nil[T])","proof":["not List.nil[T].count(item) <= 1 or p(List.nil[T])","not List.nil[T].count(item) <= 1","0 < 1 or 1 < 0 or 1 = 0","List.nil[T] != List.nil[T] or List.nil[T].count(item) = 0","not 0 < 1 or 0 <= 1","List.nil[T].count(item) != 1 or List.nil[T].count(item) <= 1","not 1 < 0","List.nil[T].count(item) = 0","not 0 <= 1","List.nil[T].count(item) != 1","1 != 0","not 0 < 1","0 < 1"]}
{"goal":"head = item or item ∈ tail","proof":["not item ∈ List.cons(head, tail) or item ∈ tail or head = item"]}
{"goal":"head ∉ tail","proof":["List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).unique.length = tail.length.suc","not head ∈ tail or List.cons(head, tail).unique = tail.unique","not List.cons(head, tail).is_unique or tail.is_unique","head ∉ tail != head ∈ tail","tail.is_unique","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","not tail.is_unique or tail.unique = tail","tail.length.suc != tail.length","head ∉ tail or head ∈ tail","head ∈ tail","List.cons(head, tail).unique = List.cons(head, tail)","tail.unique = tail","List.cons(head, tail).unique = tail.unique","List.cons(head, tail).unique.length = tail.length.suc","tail.unique.length = tail.length.suc"]}
{"goal":"List.cons(head, tail).count(item) = 1 + tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != item or 1 + tail.count(item) = List.cons(head, tail).count(item)","List.cons(head, tail) != List.cons(head, tail) or head != item"]}
{"goal":"tail.count(item) = 0","proof":["item ∉ tail","tail.count(item) = 0 or item ∈ tail","item ∈ tail","item ∉ tail != item ∈ tail","not item ∉ tail or not item ∈ tail"]}
{"goal":"List.cons(head, tail).count(item) <= 1","proof":["tail.count(item) + 1 = 1 + tail.count(item)","List.cons(head, tail).count(item) != 1 or List.cons(head, tail).count(item) <= 1","List.cons(head, tail).count(item) != 1","0 + 1 = 1"]}
{"goal":"List.cons(head, tail).count(item) = tail.count(item)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(item) = tail.count(item) or head = item","List.cons(head, tail) != List.cons(head, tail) or head = item"]}
{"goal":"List.cons(head, tail).count(item) <= 1","proof":["not tail.is_unique or not p(tail) or tail.count(item) <= 1","not tail.count(item) <= 1","not tail.is_unique","not List.cons(head, tail).is_unique or tail.is_unique"]}
{"goal":"p(List.cons(head, tail))","proof":["not List.cons(head, tail).count(item) <= 1 or p(List.cons(head, tail))"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).is_unique or p(List.cons(head, tail))"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not List.cons(s0(p), s1(p)).count(item) <= 1 or p(List.cons(s0(p), s1(p)))","not List.nil[T].unique.is_unique or not p(List.nil[T].unique) or List.nil[T].unique.count(item) <= 1","not item ∈ List.cons(s0(p), s1(p)) or not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","List.cons(s0(p), s1(p)).count(item) = 0 or item ∈ List.cons(s0(p), s1(p))","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","List.nil[T] != List.nil[T] or List.nil[T].count(item) = 0","not p(List.cons(s0(p), s1(p)))","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].unique.is_unique","List.nil[T].unique = List.nil[T]","List.nil[T].count(item) = 0","p(List.nil[T].unique)","not item ∈ List.cons(s0(p), s1(p))","not List.cons(s0(p), s1(p)).count(item) <= 1","List.nil[T].unique.count(item) <= 1","List.nil[T].count(item) <= 1","0 <= 1","List.cons(s0(p), s1(p)).count(item) = 0"]}
{"goal":"unique_implies_no_duplicate","proof":["not list.is_unique or not p(list) or list.count(item) <= 1"]}
{"goal":"list.no_duplicate implies not list.duplicate","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0.duplicate or x0.count(s0(x0)) > 1 } and forall(x1: List[T], x2: T) { not x1.count(x2) > 1 or x1.duplicate } }","not list.count(s0(list)) <= 1 or not 1 < list.count(s0(list)) or 1 < 1","not list.duplicate or list.count(s0(list)) > 1","not list.no_duplicate or list.count(s0(list)) <= 1","list.count(s0(list)) > 1 = 1 < list.count(s0(list))","list.count(s0(list)) > 1","not 1 < 1","1 < list.count(s0(list))","list.count(s0(list)) <= 1","not list.count(s0(list)) <= 1 or 1 < 1"]}
{"goal":"no_duplicate_is_not_duplicate","proof":["not list.duplicate or list.no_duplicate","not list.no_duplicate or list.duplicate","not list.no_duplicate","not list.duplicate","let s0: List[T] -> T satisfy { forall(x0: List[T], x1: T) { not x0.no_duplicate or x0.count(x1) <= 1 } and forall(x2: List[T]) { not x2.count(s0(x2)) <= 1 or x2.no_duplicate } }","not list.count(s0(list)) <= 1 or list.no_duplicate","1 < list.count(s0(list)) or list.count(s0(list)) < 1 or list.count(s0(list)) = 1","not list.count(s0(list)) > 1 or list.duplicate","list.count(s0(list)) > 1 = 1 < list.count(s0(list))","not list.count(s0(list)) < 1 or list.count(s0(list)) <= 1","list.count(s0(list)) != 1 or list.count(s0(list)) <= 1","not list.count(s0(list)) > 1","not 1 < list.count(s0(list)) or list.count(s0(list)) > 1","not list.count(s0(list)) <= 1","list.count(s0(list)) != 1","not list.count(s0(list)) < 1","not 1 < list.count(s0(list))"]}
{"goal":"p(List.nil[T])","proof":["not List.nil[T].is_unique or p(List.nil[T])","not List.nil[T].is_unique","List.nil[T] != List.nil[T] or List.nil[T].unique = List.nil[T]","List.nil[T].unique != List.nil[T] or List.nil[T].is_unique","List.nil[T].unique = List.nil[T]","List.nil[T].unique != List.nil[T]"]}
{"goal":"forall(x0: T) { x0 ∈ tail implies tail.count(x0) <= 1 }","proof":["let s0: T satisfy { s0 ∈ tail and not tail.count(s0) <= 1 }","List.cons(head, tail).count(s0) <= 1","List.cons(s0, tail) != List.cons(s0, tail) or s0 != s0 or List.cons(s0, tail).count(s0) = 1 + tail.count(s0)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(s0) = tail.count(s0) or s0 = head","not tail.count(s0) <= List.cons(head, tail).count(s0) or not List.cons(head, tail).count(s0) <= 1 or tail.count(s0) <= 1","not List.cons(head, tail).count(s0) <= 1 or not 1 < List.cons(head, tail).count(s0) or 1 < 1","List.cons(s0, tail).count(s0) != 1 + tail.count(s0) or 1 < List.cons(s0, tail).count(s0) or tail.count(s0) = 0","tail.count(s0) != 0 or not s0 ∈ tail","tail.count(s0) != 0","List.cons(head, tail).count(s0) != tail.count(s0) or tail.count(s0) <= List.cons(head, tail).count(s0)","not 1 < 1","not tail.count(s0) <= List.cons(head, tail).count(s0) or not List.cons(head, tail).count(s0) <= 1","List.cons(head, tail).count(s0) = tail.count(s0) or s0 = head","s0 != s0 or List.cons(s0, tail).count(s0) = 1 + tail.count(s0)","not tail.count(s0) <= List.cons(head, tail).count(s0)","not 1 < List.cons(head, tail).count(s0) or 1 < 1","not 1 < List.cons(head, tail).count(s0)","List.cons(s0, tail).count(s0) = 1 + tail.count(s0)","List.cons(s0, tail).count(s0) != 1 + tail.count(s0) or 1 < List.cons(s0, tail).count(s0)","List.cons(head, tail).count(s0) != tail.count(s0)","1 < List.cons(s0, tail).count(s0)","s0 = head"]}
{"goal":"tail.is_unique","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0.count(s0(x0)) <= 1 or not p(x0) or x0.is_unique } and forall(x1: List[T], x2: T) { x1.count(x2) <= 1 or p(x1) } and forall(x3: List[T]) { not x3.is_unique or p(x3) } }","not s0(tail) ∈ tail or tail.count(s0(tail)) <= 1","not tail.count(s0(tail)) <= 1 or not p(tail) or tail.is_unique","tail.count(s0(tail)) < 0 + 1 = tail.count(s0(tail)) <= 0","tail.count(s0(tail)) = 0 or s0(tail) ∈ tail","not tail.count(s0(tail)) < 0 + 1 or tail.count(s0(tail)) <= 0 + 1","not tail.count(s0(tail)) <= 1","tail.count(s0(tail)) != 0 or tail.count(s0(tail)) <= 0","0 + 1 = 1","not s0(tail) ∈ tail","not tail.count(s0(tail)) <= 0 + 1","tail.count(s0(tail)) = 0","not tail.count(s0(tail)) < 0 + 1","tail.count(s0(tail)) <= 0","not tail.count(s0(tail)) <= 0"]}
{"goal":"head ∉ tail","proof":["List.cons(head, tail).count(head) <= 1","List.cons(head, tail) != List.cons(head, tail) or head != head or 1 + tail.count(head) = List.cons(head, tail).count(head)","not List.cons(head, tail).count(head) <= 1 or not 1 < List.cons(head, tail).count(head) or 1 < 1","not head ∈ tail or tail.count(head) >= 1","tail.count(head) + 1 > 1 = tail.count(head) >= 1","head ∉ tail != head ∈ tail","List.cons(head, tail).count(head) > 1 = 1 < List.cons(head, tail).count(head)","tail.count(head) + 1 = 1 + tail.count(head)","not 1 < 1","not List.cons(head, tail).count(head) > 1 or 1 < List.cons(head, tail).count(head)","head ∉ tail or head ∈ tail","head ∈ tail","head != head or 1 + tail.count(head) = List.cons(head, tail).count(head)","not 1 < List.cons(head, tail).count(head) or 1 < 1","not 1 < List.cons(head, tail).count(head)","1 + tail.count(head) = List.cons(head, tail).count(head)","tail.count(head) >= 1","tail.count(head) + 1 > 1","not List.cons(head, tail).count(head) > 1","1 + tail.count(head) > 1"]}
{"goal":"List.cons(head, tail).is_unique","proof":["List.cons(head, tail).unique = List.cons(head, tail.unique) or head ∈ tail","head ∉ tail != head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).is_unique","not tail.is_unique or tail.unique = tail","List.cons(head, tail).unique != List.cons(head, tail)","tail.unique = tail","not head ∉ tail or not head ∈ tail","not head ∈ tail","List.cons(head, tail).unique != List.cons(head, tail.unique)","List.cons(head, tail).unique = List.cons(head, tail.unique)"]}
{"goal":"p(List.cons(head, tail))","proof":["let s0: T satisfy { not List.cons(head, tail).count(s0) <= 1 or List.cons(head, tail).is_unique }","not List.cons(head, tail).is_unique or p(List.cons(head, tail))","List.cons(head, tail).count(s0) <= 1 or p(List.cons(head, tail))","not List.cons(head, tail).is_unique","List.cons(head, tail).count(s0) <= 1"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"no_duplicate_implies_unique","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T]) { not x0.count(s0(x0)) <= 1 or not p(x0) or x0.is_unique } and forall(x1: List[T], x2: T) { x1.count(x2) <= 1 or p(x1) } and forall(x3: List[T]) { not x3.is_unique or p(x3) } }","not list.count(s0(list)) <= 1 or not p(list) or list.is_unique","not list.no_duplicate or list.count(s0(list)) <= 1","not list.count(s0(list)) <= 1"]}
{"goal":"list.is_unique implies list.no_duplicate","proof":["let s0: List[T] -> T satisfy { forall(x0: List[T], x1: T) { not x0.no_duplicate or x0.count(x1) <= 1 } and forall(x2: List[T]) { not x2.count(s0(x2)) <= 1 or x2.no_duplicate } }","not list.count(s0(list)) <= 1 or list.no_duplicate","not list.is_unique or list.count(s0(list)) <= 1","not list.count(s0(list)) <= 1"]}
{"goal":"no_duplicate_iff_unique","proof":["list.no_duplicate or list.is_unique","not list.no_duplicate or not list.is_unique","not list.is_unique","list.no_duplicate","not list.no_duplicate or list.is_unique"]}
{"goal":"duplicate_iff_not_unique","proof":["list.no_duplicate = list.is_unique","list.no_duplicate = list.duplicate","list.no_duplicate != list.duplicate"]}
{"goal":"p(List.nil[T])","proof":["List.nil[T].filter(not_expect(elem)) != List.nil[T] ∖ elem or p(List.nil[T])","List.nil[T] != List.nil[T] or List.nil[T] ∖ elem = List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].filter(not_expect(elem)) = List.nil[T]","List.nil[T].filter(not_expect(elem)) != List.nil[T] ∖ elem","List.nil[T].filter(not_expect(elem)) = List.nil[T]","List.nil[T] ∖ elem != List.nil[T]"]}
{"goal":"tail ∖ elem = tail.filter(not_expect(elem))","proof":["not p(tail) or tail.filter(not_expect(elem)) = tail ∖ elem"]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem) or head = elem"]}
{"goal":"not_expect(elem, head) = true","proof":["not_expect(elem, head) or head = elem"]}
{"goal":"List.cons(head, tail).filter(not_expect(elem)) = List.cons(head, tail.filter(not_expect(elem)))","proof":["List.cons(head, tail) != List.cons(head, tail) or not not_expect(elem, head) or List.cons(head, tail).filter(not_expect(elem)) = List.cons(head, tail.filter(not_expect(elem)))"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).filter(not_expect(elem)) != List.cons(head, tail) ∖ elem or p(List.cons(head, tail))","List.cons(head, tail).filter(not_expect(elem)) = List.cons(head, tail ∖ elem)","List.cons(head, tail).filter(not_expect(elem)) != List.cons(head, tail) ∖ elem","List.cons(head, tail).filter(not_expect(elem)) = List.cons(head, tail) ∖ elem"]}
{"goal":"List.cons(head, tail) ∖ elem = tail ∖ elem","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail) ∖ elem = tail ∖ elem","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"not_expect(elem, head) = false","proof":["not_expect(elem, elem)","not not_expect(elem, elem) or elem != elem"]}
{"goal":"List.cons(head, tail).filter(not_expect(elem)) = tail.filter(not_expect(elem))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).filter(not_expect(elem)) = tail.filter(not_expect(elem)) or not_expect(elem, head)","List.cons(head, tail) != List.cons(head, tail) or not_expect(elem, head)"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).filter(not_expect(elem)) != List.cons(head, tail) ∖ elem or p(List.cons(head, tail))","List.cons(head, tail).filter(not_expect(elem)) = tail ∖ elem","List.cons(head, tail).filter(not_expect(elem)) != List.cons(head, tail) ∖ elem","List.cons(head, tail).filter(not_expect(elem)) = List.cons(head, tail) ∖ elem"]}
{"goal":"p(List.cons(head, tail))","proof":[]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"remove_elem_is_filter","proof":["not p(list) or list.filter(not_expect(elem)) = list ∖ elem"]}
{"goal":"p(List.nil[T])","proof":["elem ∉ List.nil[T] ∖ elem = p(List.nil[T])","not elem ∉ List.nil[T] ∖ elem","elem ∉ List.nil[T] != elem ∈ List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T] ∖ elem = List.nil[T]","not elem ∈ List.nil[T] or List.nil[T] != List.nil[T]","not elem ∈ List.nil[T]","List.nil[T] ∖ elem = List.nil[T]","not elem ∉ List.nil[T]","elem ∉ List.nil[T] or elem ∈ List.nil[T]"]}
{"goal":"elem ∉ tail ∖ elem","proof":["elem ∉ tail ∖ elem = p(tail)"]}
{"goal":"List.cons(head, tail) ∖ elem = tail ∖ elem","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail) ∖ elem = tail ∖ elem","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem) or head = elem"]}
{"goal":"elem ∉ List.cons(head, tail) ∖ elem","proof":["not elem ∉ List.cons(head, tail ∖ elem)","not elem ∈ List.cons(head, tail ∖ elem) or List.cons(head, tail ∖ elem) != List.cons(head, tail ∖ elem) or elem ∈ tail ∖ elem or head = elem","elem ∉ List.cons(head, tail ∖ elem) != elem ∈ List.cons(head, tail ∖ elem)","elem ∉ tail ∖ elem != elem ∈ tail ∖ elem","not elem ∉ tail ∖ elem or not elem ∈ tail ∖ elem","elem ∉ List.cons(head, tail ∖ elem) or elem ∈ List.cons(head, tail ∖ elem)","not elem ∈ List.cons(head, tail ∖ elem) or elem ∈ tail ∖ elem or head = elem","elem ∈ List.cons(head, tail ∖ elem)","not elem ∈ tail ∖ elem","elem ∈ tail ∖ elem"]}
{"goal":"p(List.cons(head, tail))","proof":["elem ∉ List.cons(head, tail) ∖ elem = p(List.cons(head, tail))","not elem ∉ List.cons(head, tail) ∖ elem","head = elem","List.cons(head, tail) ∖ elem = tail ∖ elem"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"remove_elem_does_remove","proof":["elem ∉ list ∖ elem = p(list)"]}
{"goal":"p(List.nil[T])","proof":["(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length != elem ∈ List.nil[T] ∖ elem or List.nil[T] ∖ elem ∖ elem != List.nil[T] ∖ elem or not elem ∉ List.nil[T] ∖ elem or p(List.nil[T] ∖ elem)","List.nil[T] != List.nil[T] or List.nil[T] ∖ elem = List.nil[T]","not elem ∈ List.nil[T] or List.nil[T] != List.nil[T]","elem ∉ List.nil[T] ∖ elem","not (List.nil[T] ∖ elem).length < (List.nil[T] ∖ elem).length","not elem ∈ List.nil[T]","List.nil[T] ∖ elem = List.nil[T]","not p(List.nil[T] ∖ elem)","(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length != elem ∈ List.nil[T] ∖ elem or List.nil[T] ∖ elem ∖ elem != List.nil[T] ∖ elem or p(List.nil[T] ∖ elem)","(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length != elem ∈ List.nil[T] ∖ elem or List.nil[T] ∖ elem != List.nil[T] or p(List.nil[T] ∖ elem)","(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length != elem ∈ List.nil[T] ∖ elem","(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length != elem ∈ List.nil[T]","(List.nil[T] ∖ elem ∖ elem).length < (List.nil[T] ∖ elem).length"]}
{"goal":"List.cons(head, tail) ∖ elem = tail ∖ elem","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail) ∖ elem = tail ∖ elem","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"(tail ∖ elem).length <= tail.length","proof":["not elem ∉ tail or not p(tail) or tail ∖ elem = tail","not p(tail) or (tail ∖ elem).length < tail.length = elem ∈ tail","elem ∉ tail != elem ∈ tail","not (tail ∖ elem).length < tail.length or (tail ∖ elem).length <= tail.length","(tail ∖ elem).length != tail.length or (tail ∖ elem).length <= tail.length","(tail ∖ elem).length != tail.length","tail ∖ elem != tail","not elem ∉ tail","not (tail ∖ elem).length < tail.length","not elem ∈ tail or not p(tail) or (tail ∖ elem).length < tail.length","not elem ∈ tail","elem ∉ tail or elem ∈ tail"]}
{"goal":"(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length","proof":["List.cons(elem, tail) != List.cons(elem, tail) or List.cons(elem, tail).length = tail.length.suc","(tail ∖ elem).length < tail.length + 1 = (tail ∖ elem).length <= tail.length","tail.length + 1 = tail.length.suc","List.cons(elem, tail).length = tail.length.suc"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or elem ∉ List.cons(head, tail) or p(List.cons(head, tail))","head != elem or elem ∈ List.cons(head, tail)","elem ∉ List.cons(head, tail) != elem ∈ List.cons(head, tail)","not List.cons(head, tail).length < List.cons(head, tail).length","not elem ∉ List.cons(head, tail) or not elem ∈ List.cons(head, tail)","not (List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or elem ∉ List.cons(head, tail) or p(List.cons(head, tail))","elem ∈ List.cons(head, tail)","List.cons(head, tail) ∖ elem = List.cons(head, tail) or elem ∉ List.cons(head, tail)","not elem ∉ List.cons(head, tail)","List.cons(head, tail) ∖ elem = List.cons(head, tail)"]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem) or head = elem"]}
{"goal":"elem ∈ tail","proof":["not elem ∈ List.cons(head, tail) or elem ∈ tail or head = elem"]}
{"goal":"(tail ∖ elem).length < tail.length","proof":["not p(tail) or (tail ∖ elem).length < tail.length = elem ∈ tail","not elem ∈ tail or not p(tail) or (tail ∖ elem).length < tail.length"]}
{"goal":"(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length","proof":["List.cons(head, tail ∖ elem) != List.cons(head, tail ∖ elem) or List.cons(head, tail ∖ elem).length = (tail ∖ elem).length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","(tail ∖ elem).length + 1 < tail.length + 1 = (tail ∖ elem).length + 1 <= tail.length","(tail ∖ elem).length + 1 <= tail.length = (tail ∖ elem).length < tail.length","(tail ∖ elem).length + 1 = (tail ∖ elem).length.suc","tail.length + 1 = tail.length.suc","List.cons(head, tail ∖ elem).length = (tail ∖ elem).length.suc","List.cons(head, tail).length = tail.length.suc"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or elem ∉ List.cons(head, tail) or p(List.cons(head, tail))","elem ∉ List.cons(head, tail) != elem ∈ List.cons(head, tail)","not List.cons(head, tail).length < List.cons(head, tail).length","not elem ∉ List.cons(head, tail) or not elem ∈ List.cons(head, tail)","not (List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or elem ∉ List.cons(head, tail) or p(List.cons(head, tail))","not elem ∉ List.cons(head, tail)","List.cons(head, tail) ∖ elem = List.cons(head, tail)"]}
{"goal":"elem ∉ tail","proof":["not elem ∈ tail or elem ∈ List.cons(head, tail)","elem ∉ List.cons(head, tail) != elem ∈ List.cons(head, tail)","elem ∉ tail != elem ∈ tail","elem ∉ tail or elem ∈ tail","elem ∈ tail","not elem ∉ List.cons(head, tail) or not elem ∈ List.cons(head, tail)","not elem ∈ List.cons(head, tail)"]}
{"goal":"tail ∖ elem = tail","proof":["not elem ∉ tail or not p(tail) or tail ∖ elem = tail"]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail)","proof":["List.cons(head, tail) ∖ elem != List.cons(head, tail ∖ elem)"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem != List.cons(head, tail) or not elem ∉ List.cons(head, tail) or p(List.cons(head, tail))","not List.cons(head, tail).length < List.cons(head, tail).length","(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail)","(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length"]}
{"goal":"p(List.cons(head, tail))","proof":["elem ∉ List.cons(head, tail) != elem ∈ List.cons(head, tail)","elem ∉ List.cons(head, tail) or elem ∈ List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail) or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or p(List.cons(head, tail))","head != elem or elem ∈ List.cons(head, tail)","not List.cons(head, tail).length < List.cons(head, tail).length","not (List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or p(List.cons(head, tail))","elem ∈ List.cons(head, tail)","List.cons(head, tail) ∖ elem = List.cons(head, tail)"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"remove_decrease_or_nothing","proof":["list ∖ elem != list or not p(list) or elem ∉ list","not elem ∉ list or not p(list) or list ∖ elem = list","not p(list) or (list ∖ elem).length < list.length = elem ∈ list","not elem ∉ list or list ∖ elem = list","list ∖ elem != list or elem ∉ list","(list ∖ elem).length < list.length = elem ∈ list","list ∖ elem != list or not elem ∉ list","not elem ∉ list","list ∖ elem != list","list ∖ elem = list"]}
{"goal":"p(List.nil[T])","proof":["item ∉ List.nil[T] or p(List.nil[T])","not item ∉ List.nil[T] ∖ elem or p(List.nil[T])","item ∉ List.nil[T]","not item ∉ List.nil[T] ∖ elem","List.nil[T] != List.nil[T] or List.nil[T] ∖ elem = List.nil[T]","List.nil[T] ∖ elem = List.nil[T]"]}
{"goal":"head != item","proof":["item ∉ List.cons(item, tail)","item != item or item ∈ List.cons(item, tail)","item ∉ List.cons(item, tail) != item ∈ List.cons(item, tail)","item ∈ List.cons(item, tail)","not item ∉ List.cons(item, tail) or not item ∈ List.cons(item, tail)"]}
{"goal":"item ∉ tail","proof":["not item ∈ tail or item ∈ List.cons(head, tail)","item ∉ List.cons(head, tail) != item ∈ List.cons(head, tail)","item ∉ tail != item ∈ tail","item ∉ tail or item ∈ tail","item ∈ tail","not item ∉ List.cons(head, tail) or not item ∈ List.cons(head, tail)","not item ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail) ∖ elem = tail ∖ elem","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail) ∖ elem = tail ∖ elem","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"item ∉ tail ∖ elem","proof":["not item ∉ tail or not p(tail) or item ∉ tail ∖ elem"]}
{"goal":"item ∉ List.cons(head, tail) ∖ elem","proof":[]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem) or head = elem"]}
{"goal":"item ∉ List.cons(head, tail) ∖ elem","proof":["not item ∉ tail or not p(tail) or item ∉ tail ∖ elem","not item ∉ List.cons(head, tail ∖ elem)","not item ∈ List.cons(head, tail ∖ elem) or List.cons(head, tail ∖ elem) != List.cons(head, tail ∖ elem) or item ∈ tail ∖ elem or head = item","item ∉ List.cons(head, tail ∖ elem) != item ∈ List.cons(head, tail ∖ elem)","item ∉ tail ∖ elem != item ∈ tail ∖ elem","not item ∉ tail ∖ elem or not item ∈ tail ∖ elem","item ∉ List.cons(head, tail ∖ elem) or item ∈ List.cons(head, tail ∖ elem)","item ∉ tail ∖ elem","not item ∈ List.cons(head, tail ∖ elem) or item ∈ tail ∖ elem or head = item","item ∈ List.cons(head, tail ∖ elem)","not item ∈ tail ∖ elem","item ∈ tail ∖ elem"]}
{"goal":"item ∉ List.cons(head, tail) ∖ elem","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["not item ∉ List.cons(head, tail) ∖ elem or p(List.cons(head, tail))"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","item ∉ List.cons(s0(p), s1(p)) or p(List.cons(s0(p), s1(p)))","not item ∉ List.cons(s0(p), s1(p)) or not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))","not item ∉ List.cons(s0(p), s1(p))","item ∉ List.cons(s0(p), s1(p))"]}
{"goal":"remove_preserve_not_conatins","proof":["not item ∉ list or not p(list) or item ∉ list ∖ elem"]}
{"goal":"p(List.nil[T])","proof":["elem ∈ List.nil[T] or p(List.nil[T])","elem ∈ List.nil[T]","not elem ∈ List.nil[T] or List.nil[T] != List.nil[T]"]}
{"goal":"elem ∉ tail","proof":["not elem ∈ tail or List.cons(elem, tail).unique = tail.unique","List.cons(head, tail).unique != List.cons(head, tail) or List.cons(head, tail).unique.length = tail.length.suc","not List.cons(head, tail).is_unique or tail.is_unique","elem ∉ tail != elem ∈ tail","tail.is_unique","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","not tail.is_unique or tail.unique = tail","tail.length.suc != tail.length","elem ∉ tail or elem ∈ tail","elem ∈ tail","List.cons(head, tail).unique = List.cons(head, tail)","tail.unique = tail","List.cons(elem, tail).unique = tail.unique","List.cons(head, tail).unique.length = tail.length.suc","List.cons(elem, tail).unique.length = tail.length.suc","tail.unique.length = tail.length.suc"]}
{"goal":"List.cons(head, tail) ∖ elem = tail","proof":["List.cons(elem, tail) ∖ elem != tail","List.cons(elem, tail) != List.cons(elem, tail) or elem != elem or List.cons(elem, tail) ∖ elem = tail ∖ elem","not elem ∉ tail or tail ∖ elem = tail","tail ∖ elem = tail","elem != elem or List.cons(elem, tail) ∖ elem = tail ∖ elem","List.cons(elem, tail) ∖ elem = tail ∖ elem"]}
{"goal":"tail.is_unique","proof":["List.cons(elem, tail).is_unique","not List.cons(elem, tail).is_unique or tail.is_unique"]}
{"goal":"tail.length + 1 = List.cons(head, tail).length","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","tail.length + 1 = 1 + tail.length","1 + tail.length != List.cons(head, tail).length","1 + tail.length = tail.length.suc","List.cons(head, tail).length != tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length + 1 != List.cons(head, tail).length or not (List.cons(head, tail) ∖ elem).is_unique or p(List.cons(head, tail))","(List.cons(head, tail) ∖ elem).is_unique","(List.cons(head, tail) ∖ elem).length + 1 = List.cons(head, tail).length","(List.cons(head, tail) ∖ elem).length + 1 != List.cons(head, tail).length"]}
{"goal":"elem ∈ tail","proof":["not elem ∈ List.cons(head, tail) or elem ∈ tail or head = elem"]}
{"goal":"tail.is_unique","proof":["not List.cons(head, tail).is_unique or tail.is_unique"]}
{"goal":"List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail ∖ elem) or head = elem"]}
{"goal":"(tail ∖ elem).is_unique","proof":["not elem ∈ tail or not tail.is_unique or not p(tail) or (tail ∖ elem).is_unique"]}
{"goal":"(tail ∖ elem).length + 1 = tail.length","proof":["not elem ∈ tail or not tail.is_unique or not p(tail) or (tail ∖ elem).length + 1 = tail.length"]}
{"goal":"head ∉ tail","proof":["List.cons(elem, List.cons(elem, List.cons(head, tail))) != List.cons(elem, List.cons(elem, List.cons(head, tail))) or elem != elem or List.cons(elem, List.cons(elem, List.cons(head, tail))) ∖ elem = List.cons(elem, List.cons(head, tail)) ∖ elem","List.cons(elem, List.cons(elem, tail)) != List.cons(elem, List.cons(elem, tail)) or elem != elem or List.cons(elem, List.cons(elem, tail)) ∖ elem = List.cons(elem, tail) ∖ elem","List.cons(elem, List.cons(head, tail)) != List.cons(elem, List.cons(head, tail)) or elem != elem or List.cons(elem, List.cons(head, tail)) ∖ elem = List.cons(head, tail) ∖ elem","List.cons(elem, tail) != List.cons(elem, tail) or elem != elem or List.cons(elem, tail) ∖ elem = tail ∖ elem","(tail ∖ elem).length < tail.length = elem ∈ tail","not head ∈ tail or List.cons(head, tail).unique = tail.unique","List.cons(head, tail) ∖ elem != List.cons(head, tail ∖ elem) or (List.cons(head, tail) ∖ elem).length = (tail ∖ elem).length.suc","head ∉ tail != head ∈ tail","not tail.length < (tail ∖ elem).length or not (tail ∖ elem).length < tail.length","not List.cons(head, tail).is_unique or List.cons(head, tail).unique = List.cons(head, tail)","not tail.is_unique or tail.unique = tail","(tail ∖ elem).length + 1 = (tail ∖ elem).length.suc","tail.unique = tail","head ∉ tail or head ∈ tail","head ∈ tail","elem != elem or List.cons(elem, List.cons(elem, List.cons(head, tail))) ∖ elem = List.cons(elem, List.cons(head, tail)) ∖ elem","elem != elem or List.cons(elem, List.cons(elem, tail)) ∖ elem = List.cons(elem, tail) ∖ elem","elem != elem or List.cons(elem, List.cons(head, tail)) ∖ elem = List.cons(head, tail) ∖ elem","elem != elem or List.cons(elem, tail) ∖ elem = tail ∖ elem","List.cons(head, tail).unique = List.cons(head, tail)","(tail ∖ elem).length < tail.length","List.cons(elem, List.cons(elem, List.cons(head, tail))) ∖ elem = List.cons(elem, List.cons(head, tail)) ∖ elem","List.cons(elem, List.cons(elem, tail)) ∖ elem = List.cons(elem, tail) ∖ elem","List.cons(elem, List.cons(head, tail)) ∖ elem = List.cons(head, tail) ∖ elem","List.cons(elem, tail) ∖ elem = tail ∖ elem","(List.cons(head, tail) ∖ elem).length = (tail ∖ elem).length.suc","List.cons(head, tail).unique = tail.unique","not tail.length < (tail ∖ elem).length"]}
{"goal":"head ∉ tail ∖ elem","proof":["not head ∉ tail or head ∉ tail ∖ elem"]}
{"goal":"List.cons(head, tail ∖ elem).is_unique","proof":["List.cons(head, tail ∖ elem).unique = List.cons(head, (tail ∖ elem).unique) or head ∈ tail ∖ elem","head ∉ tail ∖ elem != head ∈ tail ∖ elem","List.cons(head, tail ∖ elem).unique != List.cons(head, tail ∖ elem) or List.cons(head, tail ∖ elem).is_unique","not (tail ∖ elem).is_unique or (tail ∖ elem).unique = tail ∖ elem","not head ∉ tail ∖ elem or not head ∈ tail ∖ elem","List.cons(head, tail ∖ elem).unique != List.cons(head, tail ∖ elem)","not head ∈ tail ∖ elem","(tail ∖ elem).unique = tail ∖ elem","List.cons(head, tail ∖ elem).unique = List.cons(head, (tail ∖ elem).unique)","List.cons(head, tail ∖ elem).unique != List.cons(head, (tail ∖ elem).unique)"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length + 1 != List.cons(head, tail).length or not (List.cons(head, tail) ∖ elem).is_unique or p(List.cons(head, tail))","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) ∖ elem != List.cons(head, tail ∖ elem) or (List.cons(head, tail) ∖ elem).length = (tail ∖ elem).length.suc","(List.cons(head, tail) ∖ elem).length + 1 = (List.cons(head, tail) ∖ elem).length.suc","(tail ∖ elem).length + 1 = (tail ∖ elem).length.suc","List.cons(head, tail).length = tail.length.suc","(List.cons(head, tail) ∖ elem).is_unique","(List.cons(head, tail) ∖ elem).length + 1 != List.cons(head, tail).length","(List.cons(head, tail) ∖ elem).length = (tail ∖ elem).length.suc"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length != elem ∈ List.cons(head, tail) or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or p(List.cons(head, tail))","not List.cons(head, tail).length < List.cons(head, tail).length","not (List.cons(head, tail) ∖ elem).length < List.cons(head, tail).length or not elem ∈ List.cons(head, tail) or List.cons(head, tail) ∖ elem = List.cons(head, tail) or p(List.cons(head, tail))","List.cons(head, tail) ∖ elem = List.cons(head, tail)"]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail).is_unique or p(List.cons(head, tail))","elem ∈ List.cons(head, tail) or p(List.cons(head, tail))","List.cons(head, tail).is_unique","elem ∈ List.cons(head, tail)","not elem ∈ List.cons(head, tail)"]}
{"goal":"p(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(list)","not p(List.nil[T]) or p(s1(p)) or p(list)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"remove_unique","proof":["not elem ∈ list or not list.is_unique or not p(list) or (list ∖ elem).is_unique","not elem ∈ list or not list.is_unique or not p(list) or (list ∖ elem).length + 1 = list.length","(list ∖ elem).is_unique","(list ∖ elem).length + 1 = list.length","(list ∖ elem).length + 1 != list.length"]}
{"goal":"0.range = List.nil[Nat]","proof":["0 != 0 or 0.range = List.nil[Nat]"]}
{"goal":"List.nil[Nat].length = 0","proof":["List.nil[Nat] != List.nil[Nat] or List.nil[Nat].length = 0"]}
{"goal":"f(0)","proof":["0.range.length != 0 or f(0)","0.range.length = 0","0.range.length != 0"]}
{"goal":"(x + 1).range = x.range.append(x)","proof":["x + 1 != x.suc or (x + 1).range = x.range.append(x)","x + 1 != x.suc","x + 1 = 1 + x","1 + x = x.suc"]}
{"goal":"(x + 1).range = x.range + List.singleton(x)","proof":["x.range + List.singleton(x) != x.range.append(x)","x.range + List.singleton(x) = x.range.append(x)"]}
{"goal":"(x + 1).range.length = x.range.length + List.singleton(x).length","proof":["x.range.length + List.singleton(x).length = (x.range + List.singleton(x)).length"]}
{"goal":"x.range.length = x","proof":["not f(x) or x.range.length = x"]}
{"goal":"List.singleton(x).length = 1","proof":["List.cons(x, List.nil[Nat]) != List.cons(x, List.nil[Nat]) or List.cons(x, List.nil[Nat]).length = List.nil[Nat].length.suc","List.cons(x, List.nil[Nat]) = List.singleton(x)","List.cons(x, List.nil[Nat]).length != 1","List.nil[Nat].length.suc = 1","List.cons(x, List.nil[Nat]).length = List.nil[Nat].length.suc"]}
{"goal":"(x + 1).range.length = x + 1","proof":[]}
{"goal":"f(x + 1)","proof":["(x + 1).range.length != x + 1 or f(x + 1)","(x + 1).range.length != x + 1"]}
{"goal":"f(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(n)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"length_range","proof":["not f(n) or n.range.length = n"]}
{"goal":"n ∈ List.singleton(n)","proof":["n != n or n ∈ List.cons(n, List.nil[Nat])","List.cons(n, List.nil[Nat]) = List.singleton(n)","not n ∈ List.cons(n, List.nil[Nat])"]}
{"goal":"(n + 1).range = n.range + List.singleton(n)","proof":["1 + n != n.suc or (1 + n).range = n.range.append(n)","n.range + List.singleton(n) = n.range.append(n)","n + 1 = 1 + n","n.range + List.singleton(n) != (1 + n).range","(1 + n).range != n.range.append(n)","1 + n = n.suc"]}
{"goal":"n ∈ (n + 1).range","proof":["not n ∈ List.singleton(n) or n ∈ n.range + List.singleton(n)","not n ∈ n.range + List.singleton(n)"]}
{"goal":"suc_range_contains","proof":[]}
{"goal":"p(0)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or not p(x1) or x0 ∈ x1.range } and forall(x2: Nat) { s0(x2) < x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∈ x3.range or p(x3) } }","s0(0) < 0 or p(0)","s0(0) < 0","not s0(0) < 0"]}
{"goal":"x ∈ m.range","proof":["not x < m or not p(m) or x ∈ m.range"]}
{"goal":"x ∈ (m + 1).range","proof":["m.suc != m.suc or m.range.append(m) = m.suc.range","not x ∈ m.range or x ∈ m.range + List.singleton(m)","m.range + List.singleton(m) = m.range.append(m)","m + 1 = 1 + m","not x ∈ (1 + m).range","1 + m = m.suc","not x ∈ m.suc.range","m.range.append(m) = m.suc.range","not x ∈ m.range.append(m)","x ∈ m.range + List.singleton(m)"]}
{"goal":"x = m","proof":["x < m + 1 = x <= m","not x <= m or x < m or x = m","not x <= m","m + 1 = 1 + m","1 + m = m.suc"]}
{"goal":"m ∈ (m + 1).range","proof":["m ∈ (m + 1).range"]}
{"goal":"x ∈ (m + 1).range","proof":["not m ∈ (m + 1).range"]}
{"goal":"x ∈ (m + 1).range","proof":["x < m + 1 = x <= m","x <= m","not x <= m or x < m or x = m"]}
{"goal":"p(m + 1)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or not p(x1) or x0 ∈ x1.range } and forall(x2: Nat) { s0(x2) < x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∈ x3.range or p(x3) } }","s0(m + 1) < m + 1 or p(m + 1)","not s0(m + 1) ∈ (m + 1).range or p(m + 1)","not s0(m + 1) < m + 1 or s0(m + 1) ∈ (m + 1).range","s0(m + 1) < m + 1","not s0(m + 1) ∈ (m + 1).range","s0(m + 1) ∈ (m + 1).range"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not p(s0(p)) or p(s0(p) + 1)","not p(s0(p).suc) or not p(0) or p(n)","not p(s0(p).suc)","not p(0) or p(s0(p)) or p(n)","p(s0(p))","s0(p) + 1 = s0(p).suc","p(s0(p) + 1)","not p(s0(p) + 1)"]}
{"goal":"range_contains_all_leq","proof":["let s0: Nat satisfy { s0 < n and not s0 ∈ n.range }","not s0 < n or not p(n) or s0 ∈ n.range"]}
{"goal":"p(0)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 >= x1 or not p(x1) or x0 ∉ x1.range } and forall(x2: Nat) { s0(x2) >= x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∉ x3.range or p(x3) } }","not s0(0) ∉ 0.range or p(0)","not s0(0) ∉ 0.range","s0(0) ∉ List.nil[Nat] != s0(0) ∈ List.nil[Nat]","not s0(0) ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","0 != 0 or 0.range = List.nil[Nat]","0.range = List.nil[Nat]","not s0(0) ∉ List.nil[Nat]","not s0(0) ∈ List.nil[Nat]","s0(0) ∉ List.nil[Nat] or s0(0) ∈ List.nil[Nat]"]}
{"goal":"(x + 1).range = x.range + List.singleton(x)","proof":["1 + x != x.suc or (1 + x).range = x.range.append(x)","x.range + List.singleton(x) = x.range.append(x)","x + 1 = 1 + x","x.range + List.singleton(x) != (1 + x).range","(1 + x).range != x.range.append(x)","1 + x = x.suc"]}
{"goal":"y > x","proof":["x + 1 <= y = x < y","y >= x.suc = x.suc <= y","y > x = x < y","x + 1 = x.suc"]}
{"goal":"y ∉ x.range","proof":["not y >= x or not p(x) or y ∉ x.range","not y >= x","x + 1 <= y = x < y","y >= x + 1 = x + 1 <= y","y >= x = x <= y","not x <= y","x + 1 <= y","x < y","not x < y or x <= y"]}
{"goal":"y ∉ List.singleton(x)","proof":["List.cons(x, List.nil[Nat]) != List.cons(x, List.nil[Nat]) or not y ∈ List.cons(x, List.nil[Nat]) or y ∈ List.nil[Nat] or y = x","not y <= x or not x < y or x < x","x + 1 <= y = x < y","y ∉ List.cons(x, List.nil[Nat]) != y ∈ List.cons(x, List.nil[Nat])","y >= x + 1 = x + 1 <= y","x + 1 <= y","x < y","not y ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","List.cons(x, List.nil[Nat]) = List.singleton(x)","not y ∉ List.cons(x, List.nil[Nat])","y != x or y <= x","not x < x","not y ∈ List.nil[Nat]","y ∉ List.cons(x, List.nil[Nat]) or y ∈ List.cons(x, List.nil[Nat])","not y ∈ List.cons(x, List.nil[Nat]) or y ∈ List.nil[Nat] or y = x","not y <= x or x < x","not y <= x","y ∈ List.cons(x, List.nil[Nat])","y != x","y = x"]}
{"goal":"y ∉ (x + 1).range","proof":["not y ∉ x.range or not y ∉ List.singleton(x) or y ∉ x.range + List.singleton(x)","not y ∉ x.range + List.singleton(x)"]}
{"goal":"p(x + 1)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 >= x1 or not p(x1) or x0 ∉ x1.range } and forall(x2: Nat) { s0(x2) >= x2 or p(x2) } and forall(x3: Nat) { not s0(x3) ∉ x3.range or p(x3) } }","s0(x + 1) >= x + 1 or p(x + 1)","not s0(x + 1) ∉ (x + 1).range or p(x + 1)","not s0(x + 1) >= x + 1 or s0(x + 1) ∉ (x + 1).range","s0(x + 1) >= x + 1","not s0(x + 1) ∉ (x + 1).range","s0(x + 1) ∉ (x + 1).range"]}
{"goal":"range_does_not_contain_geq","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not p(s0(p)) or p(s0(p) + 1)","not n >= m or not p(m) or n ∉ m.range","not p(m)","not p(s0(p).suc) or not p(0) or p(m)","not p(0) or p(s0(p)) or p(m)","s0(p) + 1 = s0(p).suc","p(s0(p)) or p(m)","p(s0(p))","not p(s0(p).suc) or p(m)","not p(s0(p).suc)","p(s0(p) + 1)","not p(s0(p) + 1)"]}
{"goal":"x < n implies x ∈ n.range","proof":["not x < n or x ∈ n.range"]}
{"goal":"not x < n implies x ∉ n.range","proof":["x < n or n < x or n = x","not x >= n or x ∉ n.range","not x >= n","x >= n = n <= x","not n <= x","not n < x or n <= x","n != x or n <= x","n != x","not n < x","n < x"]}
{"goal":"x < n = x ∈ n.range","proof":["x ∈ n.range or x < n","not x ∈ n.range or not x < n","not x < n","x ∈ n.range","x ∉ n.range","x ∉ n.range != x ∈ n.range","not x ∉ n.range or not x ∈ n.range"]}
{"goal":"range_iff_contains_all_leq","proof":["let s0: Nat satisfy { s0 ∈ n.range != s0 < n }","s0 ∈ n.range = s0 < n"]}
{"goal":"sum[A](List.nil[A] + right) = sum[A](right)","proof":["List.nil[A] + right != right","List.nil[A] != List.nil[A] or List.nil[A] + right = right"]}
{"goal":"sum[A](List.nil[A]) = A.0","proof":["List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0"]}
{"goal":"A.0 + sum[A](right) = sum[A](right)","proof":["sum[A](right) + A.0 = A.0 + sum[A](right)","sum[A](right) + A.0 != sum[A](right)","sum[A](right) + A.0 = sum[A](right)"]}
{"goal":"p(List.nil[A])","proof":["sum[A](List.nil[A]) + sum[A](right) != sum[A](List.nil[A] + right) or p(List.nil[A])","sum[A](List.nil[A]) + sum[A](right) != sum[A](List.nil[A] + right)"]}
{"goal":"sum[A](List.cons(head, tail) + right) = sum[A](List.cons(head, tail + right))","proof":["List.cons(head, tail) + right != List.cons(head, tail + right)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + right = List.cons(head, tail + right)"]}
{"goal":"sum[A](List.cons(head, tail + right)) = head + sum[A](tail + right)","proof":["List.cons(head, tail + right) != List.cons(head, tail + right) or head + sum[A](tail + right) = sum[A](List.cons(head, tail + right))"]}
{"goal":"head + sum[A](tail + right) = head + (sum[A](tail) + sum[A](right))","proof":["not p(tail) or sum[A](tail) + sum[A](right) = sum[A](tail + right)","sum[A](tail) + sum[A](right) != sum[A](tail + right)","sum[A](tail) + sum[A](right) = sum[A](tail + right)"]}
{"goal":"sum[A](List.cons(head, tail)) = head + sum[A](tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head + sum[A](tail) = sum[A](List.cons(head, tail))"]}
{"goal":"sum[A](List.cons(head, tail)) + sum[A](right) = head + sum[A](tail) + sum[A](right)","proof":["head + sum[A](tail) != sum[A](List.cons(head, tail))"]}
{"goal":"head + sum[A](tail) + sum[A](right) = head + (sum[A](tail) + sum[A](right))","proof":["head + sum[A](tail) + sum[A](right) = head + (sum[A](tail) + sum[A](right))"]}
{"goal":"sum[A](List.cons(head, tail) + right) = sum[A](List.cons(head, tail)) + sum[A](right)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["sum[A](List.cons(head, tail)) + sum[A](right) != sum[A](List.cons(head, tail) + right) or p(List.cons(head, tail))","sum[A](List.cons(head, tail)) + sum[A](right) != sum[A](List.cons(head, tail) + right)"]}
{"goal":"sum_add","proof":["let (s0: List[A] -> Bool -> A, s1: List[A] -> Bool -> List[A]) satisfy { forall(x0: List[A] -> Bool, x1: List[A]) { not x0(List.nil[A]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[A] -> Bool, x3: List[A]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[A]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(left) or sum[A](left) + sum[A](right) = sum[A](left + right)","not p(left)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[A]) or p(left)","not p(List.nil[A]) or p(s1(p)) or p(left)","p(s1(p)) or p(left)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(left)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"sum_append","proof":["List.cons(last, List.nil[A]) != List.cons(last, List.nil[A]) or last + sum[A](List.nil[A]) = sum[A](List.cons(last, List.nil[A]))","sum[A](initial) + sum[A](List.singleton(last)) = sum[A](initial + List.singleton(last))","initial + List.singleton(last) = initial.append(last)","List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0","List.cons(last, List.nil[A]) = List.singleton(last)","last + A.0 = last","sum[A](List.nil[A]) = A.0","sum[A](initial + List.singleton(last)) != sum[A](initial) + last","last + sum[A](List.nil[A]) = sum[A](List.cons(last, List.nil[A]))","sum[A](initial) + sum[A](List.singleton(last)) != sum[A](initial) + last","sum[A](List.singleton(last)) != last"]}
{"goal":"sum_singleton","proof":["sum[A](List.nil[A].append(x)) = sum[A](List.nil[A]) + x","List.nil[A] + List.singleton(x) = List.nil[A].append(x)","A.0 + x = x + A.0","List.nil[A] != List.nil[A] or sum[A](List.nil[A]) = A.0","List.cons(x, List.nil[A]) = List.singleton(x)","x + A.0 = x","List.nil[A] + List.cons(x, List.nil[A]) = List.cons(x, List.nil[A])","sum[A](List.nil[A]) = A.0"]}
{"goal":"List.nil[T] + b + c = b + c","proof":["List.nil[T] + b != b","List.nil[T] != List.nil[T] or List.nil[T] + b = b"]}
{"goal":"List.nil[T] + (b + c) = b + c","proof":["List.nil[T] != List.nil[T] or List.nil[T] + (b + c) = b + c"]}
{"goal":"p(List.nil[T])","proof":["List.nil[T] + b + c != List.nil[T] + (b + c) or p(List.nil[T])","List.nil[T] + b + c = List.nil[T] + (b + c)","List.nil[T] + b + c != List.nil[T] + (b + c)"]}
{"goal":"List.cons(head, tail) + b + c = List.cons(head, tail + b) + c","proof":["List.cons(head, tail) + b != List.cons(head, tail + b)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + b = List.cons(head, tail + b)"]}
{"goal":"List.cons(head, tail + b) + c = List.cons(head, tail + b + c)","proof":["List.cons(head, tail + b) != List.cons(head, tail + b) or List.cons(head, tail + b) + c = List.cons(head, tail + b + c)"]}
{"goal":"List.cons(head, tail + b + c) = List.cons(head, tail + (b + c))","proof":["not p(tail) or tail + b + c = tail + (b + c)","tail + b + c != tail + (b + c)","tail + b + c = tail + (b + c)"]}
{"goal":"List.cons(head, tail) + (b + c) = List.cons(head, tail + (b + c))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + (b + c) = List.cons(head, tail + (b + c))"]}
{"goal":"List.cons(head, tail) + b + c = List.cons(head, tail) + (b + c)","proof":[]}
{"goal":"p(List.cons(head, tail))","proof":["List.cons(head, tail) + b + c != List.cons(head, tail) + (b + c) or p(List.cons(head, tail))","List.cons(head, tail) + b + c != List.cons(head, tail) + (b + c)"]}
{"goal":"add_assoc","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(a) or a + b + c = a + (b + c)","not p(a)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(a)","not p(List.nil[T]) or p(s1(p)) or p(a)","p(s1(p)) or p(a)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(a)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"tail_cancels_cons","proof":["List.cons(a, b) != List.cons(a, b) or List.cons(a, b).tail = b","List.cons(a, b) != List.cons(a, b)"]}
{"goal":"drop_zero","proof":["0 != 0 or a.drop(0) = a"]}
{"goal":"drop_one","proof":["0.suc != 1 or a.tail.drop(0) = a.drop(1)","a.tail.drop(0) = a.tail","a.tail.drop(0) != a.drop(1)"]}
{"goal":"(List.nil[T] + b).drop(List.nil[T].length) = b.drop(0)","proof":["List.nil[T] != List.nil[T] or List.nil[T].length = 0","List.nil[T] + b = b","b.drop(List.nil[T].length) != b.drop(0)","List.nil[T].length = 0","List.nil[T].length != 0"]}
{"goal":"b.drop(0) = b","proof":["0 != 0 or b.drop(0) = b"]}
{"goal":"p(List.nil[T])","proof":["(List.nil[T] + b).drop(List.nil[T].length) != b or p(List.nil[T])","(List.nil[T] + b).drop(List.nil[T].length) = b","(List.nil[T] + b).drop(List.nil[T].length) != b"]}
{"goal":"(List.cons(head, tail) + b).drop(List.cons(head, tail).length) = List.cons(head, tail + b).drop(tail.length.suc)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + b = List.cons(head, tail + b)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail).length = tail.length.suc","(List.cons(head, tail) + b).drop(tail.length.suc) != List.cons(head, tail + b).drop(tail.length.suc)","List.cons(head, tail) + b != List.cons(head, tail + b)"]}
{"goal":"List.cons(head, tail + b).drop(tail.length.suc) = (tail + b).drop(tail.length)","proof":["tail.length.suc != tail.length.suc or List.cons(head, tail + b).tail.drop(tail.length) = List.cons(head, tail + b).drop(tail.length.suc)","List.cons(head, tail + b).tail = tail + b","List.cons(head, tail + b).tail.drop(tail.length) = List.cons(head, tail + b).drop(tail.length.suc)","List.cons(head, tail + b).tail.drop(tail.length) != List.cons(head, tail + b).drop(tail.length.suc)"]}
{"goal":"(tail + b).drop(tail.length) = b","proof":["not p(tail) or (tail + b).drop(tail.length) = b"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) + b).drop(List.cons(head, tail).length) != b or p(List.cons(head, tail))","List.cons(head, tail + b).drop(tail.length.suc) = b","(List.cons(head, tail) + b).drop(List.cons(head, tail).length) != b","(List.cons(head, tail) + b).drop(List.cons(head, tail).length) = b"]}
{"goal":"drop_cancels_add","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(a) or (a + b).drop(a.length) = b","not p(a)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(a)","not p(List.nil[T]) or p(s1(p)) or p(a)","p(s1(p)) or p(a)","p(s1(p))","not p(List.cons(s0(p), s1(p))) or p(a)","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"l.drop(0) = l","proof":["0 != 0 or l.drop(0) = l"]}
{"goal":"l.drop(0).drop(k) = l.drop(k)","proof":["l.drop(0) != l"]}
{"goal":"0 + k = k","proof":["k + 0 = 0 + k","k + 0 != k","0 != 0 or k + 0 = k"]}
{"goal":"l.drop(0 + k) = l.drop(k)","proof":["0 + k != k"]}
{"goal":"f(0)","proof":["let (s0: Nat -> List[T], s1: Nat -> Nat) satisfy { forall(x0: Nat, x1: List[T], x2: Nat) { not f(x0) or x1.drop(x0).drop(x2) = x1.drop(x0 + x2) } and forall(x3: Nat) { s0(x3).drop(x3).drop(s1(x3)) != s0(x3).drop(x3 + s1(x3)) or f(x3) } }","s0(0).drop(0 + s1(0)) = s0(0).drop(s1(0))","s0(0).drop(0).drop(s1(0)) != s0(0).drop(0 + s1(0)) or f(0)","s0(0).drop(0) = s0(0)","s0(0).drop(0).drop(s1(0)) != s0(0).drop(0 + s1(0))"]}
{"goal":"l.drop(x + 1).drop(k) = l.tail.drop(x).drop(k)","proof":["1 + x != x.suc or l.drop(1 + x) = l.tail.drop(x)","x + 1 = 1 + x","l.drop(1 + x).drop(k) != l.tail.drop(x).drop(k)","l.drop(1 + x) != l.tail.drop(x)","1 + x = x.suc"]}
{"goal":"f(x)","proof":[]}
{"goal":"l.tail.drop(x).drop(k) = l.tail.drop(x + k)","proof":["not f(x) or l.tail.drop(x).drop(k) = l.tail.drop(x + k)"]}
{"goal":"x + 1 + k = (x + k).suc","proof":["1 + x + k = 1 + (x + k)","x + 1 = 1 + x","1 + x + k != (x + k).suc","1 + (x + k) != (x + k).suc","1 + (x + k) = (x + k).suc"]}
{"goal":"l.drop(x + 1 + k) = l.drop((x + k).suc)","proof":["x + 1 + k != (x + k).suc"]}
{"goal":"l.drop((x + k).suc) = l.tail.drop(x + k)","proof":["(x + k).suc != (x + k).suc or l.tail.drop(x + k) = l.drop((x + k).suc)"]}
{"goal":"l.drop(x + 1).drop(k) = l.drop(x + 1 + k)","proof":[]}
{"goal":"f(x + 1)","proof":["let (s0: Nat -> List[T], s1: Nat -> Nat) satisfy { forall(x0: Nat, x1: List[T], x2: Nat) { not f(x0) or x1.drop(x0).drop(x2) = x1.drop(x0 + x2) } and forall(x3: Nat) { s0(x3).drop(x3).drop(s1(x3)) != s0(x3).drop(x3 + s1(x3)) or f(x3) } }","s0(x + 1).drop(x + 1).drop(s1(x + 1)) = s0(x + 1).drop(x + 1 + s1(x + 1))","s0(x + 1).drop(x + 1).drop(s1(x + 1)) != s0(x + 1).drop(x + 1 + s1(x + 1)) or f(x + 1)"]}
{"goal":"f(m)","proof":["let s0: Nat satisfy { forall(x0: Nat) { not f(0) or f(s0) or f(x0) } and forall(x1: Nat) { not f(s0.suc) or not f(0) or f(x1) } }","not f(0) or f(s0) or f(m)","f(s0) or f(m)","f(s0)","not f(s0.suc) or not f(0) or f(m)","not f(s0.suc) or f(m)","not f(s0.suc)","not f(s0) or f(s0 + 1)","f(s0 + 1)","s0 + 1 = 1 + s0","1 + s0 = s0.suc"]}
{"goal":"drop_twice","proof":["not f(m) or a.drop(m).drop(n) = a.drop(m + n)"]}
{"goal":"q(List.nil[T])","proof":["List.nil[T].drop_last(0) != List.nil[T] or q(List.nil[T])","List.nil[T].drop_last(0) != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].drop_last(0) = List.nil[T]"]}
{"goal":"List.cons(head, tail).drop_last(0) = List.cons(head, tail.drop_last(0))","proof":["List.cons(head, tail) != List.cons(head, tail) or tail.length < 0 or List.cons(head, tail).drop_last(0) = List.cons(head, tail.drop_last(0))","tail.length < 0","not tail.length < 0"]}
{"goal":"List.cons(head, tail.drop_last(0)) = List.cons(head, tail)","proof":["not q(tail) or tail.drop_last(0) = tail","tail.drop_last(0) != tail","tail.drop_last(0) = tail"]}
{"goal":"q(List.cons(head, tail))","proof":["List.cons(head, tail).drop_last(0) != List.cons(head, tail) or q(List.cons(head, tail))","List.cons(head, tail).drop_last(0) != List.cons(head, tail)","List.cons(head, tail).drop_last(0) = List.cons(head, tail)"]}
{"goal":"q(a)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not q(s1(q)) or q(List.cons(s0(q), s1(q)))","not q(List.cons(s0(q), s1(q))) or not q(List.nil[T]) or q(a)","not q(List.nil[T]) or q(s1(q)) or q(a)","q(s1(q))","not q(List.cons(s0(q), s1(q)))"]}
{"goal":"drop_last_zero","proof":["not q(a) or a.drop_last(0) = a"]}
{"goal":"r(List.nil[T])","proof":["List.nil[T].drop_last(List.nil[T].length) != List.nil[T] or r(List.nil[T])","List.nil[T].drop_last(List.nil[T].length) != List.nil[T]","List.nil[T] != List.nil[T] or List.nil[T].drop_last(List.nil[T].length) = List.nil[T]"]}
{"goal":"List.cons(head, tail).drop_last(List.cons(head, tail).length) = List.cons(head, tail).drop_last(tail.length.suc)","proof":["List.cons(head, tail).length != tail.length.suc","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).length = tail.length.suc","List.cons(head, tail) != List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).drop_last(tail.length.suc) = List.nil[T]","proof":["not tail.length < tail.length.suc or List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).drop_last(tail.length.suc) = List.nil[T]","tail.length < tail.length + 1 = tail.length <= tail.length","tail.length != tail.length or tail.length <= tail.length","tail.length + 1 = tail.length.suc","tail.length <= tail.length","not tail.length <= tail.length or tail.length < tail.length + 1","not tail.length < tail.length.suc or List.cons(head, tail).drop_last(tail.length.suc) = List.nil[T]","not tail.length < tail.length.suc","not tail.length < tail.length + 1"]}
{"goal":"r(List.cons(head, tail))","proof":["List.cons(head, tail).drop_last(List.cons(head, tail).length) != List.nil[T] or r(List.cons(head, tail))","List.cons(head, tail).drop_last(List.cons(head, tail).length) != List.nil[T]","List.cons(head, tail).drop_last(List.cons(head, tail).length) = List.nil[T]"]}
{"goal":"r(l)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not r(s1(r)) or r(List.cons(s0(r), s1(r)))","not r(List.cons(s0(r), s1(r))) or not r(List.nil[T]) or r(l)","not r(List.nil[T]) or r(s1(r)) or r(l)","r(s1(r))","not r(List.cons(s0(r), s1(r)))"]}
{"goal":"drop_last_all","proof":["not r(l) or l.drop_last(l.length) = List.nil[T]"]}
{"goal":"p(List.nil[T])","proof":["(List.nil[T] + b).drop_last(b.length) != List.nil[T] or p(List.nil[T])","List.nil[T] + b = b","(List.nil[T] + b).drop_last(b.length) != List.nil[T]","(List.nil[T] + b).drop_last(b.length) = List.nil[T]"]}
{"goal":"exists(k0: Nat) { b.length + k0 = (tail + b).length }","proof":["b.length + tail.length != (tail + b).length","tail.length + b.length = b.length + tail.length"]}
{"goal":"c = tail.length","proof":["tail.length + b.length = (tail + b).length","tail.length + b.length != c + b.length or tail.length = c","b.length + c = c + b.length","c + b.length = (tail + b).length","tail.length + b.length != c + b.length"]}
{"goal":"b.length <= (tail + b).length","proof":["let s0: Nat satisfy { b.length + s0 = (tail + b).length }","b.length + s0 != (tail + b).length or b.length < (tail + b).length or s0 = 0","not b.length < (tail + b).length or b.length <= (tail + b).length","s0 + b.length = b.length + s0","(tail + b).length != b.length or b.length <= (tail + b).length","(tail + b).length != b.length","0 + b.length = b.length","not b.length < (tail + b).length","s0 = 0"]}
{"goal":"(List.cons(head, tail) + b).drop_last(b.length) = List.cons(head, tail + b).drop_last(b.length)","proof":["List.cons(head, tail) + b != List.cons(head, tail + b)","List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) + b = List.cons(head, tail + b)"]}
{"goal":"List.cons(head, tail + b).drop_last(b.length) = List.cons(head, (tail + b).drop_last(b.length))","proof":["List.cons(head, tail + b) != List.cons(head, tail + b) or List.cons(head, tail + b).drop_last(b.length) = List.cons(head, (tail + b).drop_last(b.length)) or (tail + b).length < b.length","not b.length <= (tail + b).length or not (tail + b).length < b.length or (tail + b).length < (tail + b).length","not (tail + b).length < (tail + b).length","(tail + b).length < b.length","not (tail + b).length < b.length or (tail + b).length < (tail + b).length"]}
{"goal":"p(tail)","proof":[]}
{"goal":"List.cons(head, (tail + b).drop_last(b.length)) = List.cons(head, tail)","proof":["not p(tail) or (tail + b).drop_last(b.length) = tail","(tail + b).drop_last(b.length) != tail","(tail + b).drop_last(b.length) = tail"]}
{"goal":"p(List.cons(head, tail))","proof":["(List.cons(head, tail) + b).drop_last(b.length) != List.cons(head, tail) or p(List.cons(head, tail))","List.cons(head, tail + b).drop_last(b.length) = List.cons(head, tail)","(List.cons(head, tail) + b).drop_last(b.length) != List.cons(head, tail)","(List.cons(head, tail) + b).drop_last(b.length) = List.cons(head, tail)"]}
{"goal":"p(a)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","not p(List.cons(s0(p), s1(p))) or not p(List.nil[T]) or p(a)","not p(List.nil[T]) or p(s1(p)) or p(a)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"drop_last_cancels_add","proof":["not p(a) or (a + b).drop_last(b.length) = a"]}
{"goal":"zero_until","proof":["n.range.drop(0) = 0.until(n)"]}
{"goal":"n.range.length = n","proof":["n.range.length = n"]}
{"goal":"until_self","proof":["n.range.drop(n) = n.until(n)","n.range + List.nil[Nat] = n.range"]}
{"goal":"n.suc.range = n.range + List.singleton(n)","proof":["n.suc != n.suc or n.range.append(n) = n.suc.range","n.range + List.singleton(n) = n.range.append(n)","n.range.append(n) != n.suc.range"]}
{"goal":"n.range.length = n","proof":["n.range.length = n"]}
{"goal":"until_suc","proof":["n.suc.range.drop(n) = n.until(n.suc)"]}
{"goal":"zero_upto","proof":["0.until(n.suc) = 0.upto(n)","0.until(n.suc) = n.suc.range"]}
{"goal":"upto_self","proof":["n.until(n.suc) = n.upto(n)","n.until(n.suc) = List.singleton(n)"]}
{"goal":"exists(k0: Nat) { a + k0 = b }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 0 != b","a + s0(a, b) != b","not a < b or a + s0(a, b) = b","not a < b","not a <= b or a < b or b = a","b = a","a + 0 = a"]}
{"goal":"f(0)","proof":["a.range + a.until(a + 0) != (a + 0).range or f(0)","a + 0 = a","a.range + a.until(a + 0) != (a + 0).range"]}
{"goal":"a.until(a + x.suc) = (a + x.suc).range.drop(a)","proof":["(a + x.suc).range.drop(a) = a.until(a + x.suc)"]}
{"goal":"(a + x.suc).range = (a + x).range + List.singleton(a + x)","proof":["x.suc != x.suc or a + x.suc = (a + x).suc","(a + x).suc != (a + x).suc or (a + x).range.append(a + x) = (a + x).suc.range","(a + x).range + List.singleton(a + x) = (a + x).range.append(a + x)","(a + x).range.append(a + x) != (a + x.suc).range","(a + x).range.append(a + x) = (a + x).suc.range","(a + x.suc).range != (a + x).suc.range","a + x.suc != (a + x).suc"]}
{"goal":"a.until(a + x.suc) = ((a + x).range + List.singleton(a + x)).drop(a)","proof":[]}
{"goal":"f(x)","proof":[]}
{"goal":"(a + x).range = a.range + a.until(a + x)","proof":["not f(x) or a.range + a.until(a + x) = (a + x).range"]}
{"goal":"a.until(a + x.suc) = (a.range + a.until(a + x) + List.singleton(a + x)).drop(a)","proof":["((a + x).range + List.singleton(a + x)).drop(a) != a.until(a + x.suc)"]}
{"goal":"a.range.length = a","proof":["a.range.length = a"]}
{"goal":"a.until(a + x.suc) = a.until(a + x) + List.singleton(a + x)","proof":["a.range + a.until(a + x) + List.singleton(a + x) = a.range + (a.until(a + x) + List.singleton(a + x))"]}
{"goal":"a.range + a.until(a + x.suc) = a.range + (a.until(a + x) + List.singleton(a + x))","proof":["a.until(a + x) + List.singleton(a + x) != a.until(a + x.suc)"]}
{"goal":"a.range + a.until(a + x) + List.singleton(a + x) = (a + x).range + List.singleton(a + x)","proof":["a.range + a.until(a + x) != (a + x).range"]}
{"goal":"f(x)","proof":[]}
{"goal":"(a + x).range + List.singleton(a + x) = (a + x).suc.range","proof":["(a + x.suc).range != (a + x).suc.range","x.suc != x.suc or a + x.suc = (a + x).suc","a + x.suc != (a + x).suc"]}
{"goal":"f(x.suc)","proof":["a.range + a.until(a + x.suc) != (a + x.suc).range or f(x.suc)","a.range + a.until(a + x.suc) != (a + x.suc).range"]}
{"goal":"f(k)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(0) or f(k)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(k)","not f(s0(f))","f(s0(f))"]}
{"goal":"a + k = b","proof":[]}
{"goal":"range_add_until","proof":["not f(k) or a.range + a.until(a + k) = (a + k).range","a.range + a.until(b) != (a + k).range","a.range + a.until(a + k) = (a + k).range","a.range + a.until(a + k) != (a + k).range"]}
{"goal":"length_zero_imp_nil","proof":["list.drop_last(list.length) = List.nil[T]","list.drop_last(0) = list","list.drop_last(0) != List.nil[T]"]}
{"goal":"add_to_nil","proof":["a.length + b.length = (a + b).length","a.length + b.length != 0 or b.length = 0","a.length + b.length != 0 or a.length = 0","a.length != 0 or List.nil[T] = a","b.length != 0 or List.nil[T] = b","a + b != List.nil[T] or (a + b).length = 0","(a + b).length = 0","a.length + b.length = 0","a.length = 0","b.length = 0","List.nil[T] = b","List.nil[T] = a","List.nil[T] != a"]}
{"goal":"append_not_nil","proof":["a + List.singleton(t) = a.append(t)","a + List.singleton(t) = List.nil[T]","a + List.singleton(t) != List.nil[T] or List.singleton(t) = List.nil[T]","List.cons(t, List.nil[T]) = List.singleton(t)","List.cons(t, List.nil[T]) != List.nil[T]","List.singleton(t) = List.nil[T]"]}
{"goal":"m >= max_list(List.cons(head, tail))","proof":["List.cons(head + 0, tail) != List.cons(head + 0, tail) or (head + 0).max(max_list(tail)) = max_list(List.cons(head + 0, tail))","m >= max_list(List.cons(head, tail)) = max_list(List.cons(head, tail)) <= m","not max_list(List.cons(head, tail)) <= m","max_list(List.cons(head, tail)) != m or max_list(List.cons(head, tail)) <= m","head + 0 = head","max_list(List.cons(head, tail)) != m","(head + 0).max(max_list(tail)) = max_list(List.cons(head + 0, tail))"]}
{"goal":"m >= max_list(tail)","proof":["order.Partial_Order.gte[Nat](m, k)","not order.Partial_Order.lte[Nat](k, m) or k < m or m = k","order.Partial_Order.gte[Nat](m, k) = order.Partial_Order.lte[Nat](k, m)","order.Partial_Order.lte[Nat](k, m)","m >= max_list(tail) = max_list(tail) <= m","not max_list(tail) <= m","not k <= m","not max_list(tail) < m or max_list(tail) <= m","not max_list(tail) < m","not k < m","m != k or k <= m","m = k","m != k"]}
{"goal":"head = x implies x <= m","proof":["not head <= m","order.Partial_Order.gte[Nat](m, head)","not order.Partial_Order.lte[Nat](head, m) or head < m or head = m","order.Partial_Order.gte[Nat](m, head) = order.Partial_Order.lte[Nat](head, m)","order.Partial_Order.lte[Nat](head, m)","not x < m or x <= m","not x < m","not head < m","head != m or head <= m","head = m","head != m"]}
{"goal":"x ∈ tail implies x <= m","proof":["not x ∈ tail or not f(tail) or x <= max_list(tail)","not x <= max_list(tail) or not max_list(tail) <= m or x <= m","m >= max_list(tail) = max_list(tail) <= m","max_list(tail) <= m","not x <= max_list(tail) or not max_list(tail) <= m","x <= max_list(tail)","not x <= max_list(tail)"]}
{"goal":"x ∈ List.cons(head, tail) implies x <= m","proof":["not x ∈ List.cons(head, tail) or x ∈ tail or x = head"]}
{"goal":"f(List.cons(head, tail))","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not x1 ∈ x0 or not f(x0) or x1 <= max_list(x0) } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or f(x2) } and forall(x3: List[Nat]) { not s0(x3) <= max_list(x3) or f(x3) } }","s0(List.cons(head, tail)) ∈ List.cons(head, tail) or f(List.cons(head, tail))","not s0(List.cons(head, tail)) <= max_list(List.cons(head, tail)) or f(List.cons(head, tail))","not s0(List.cons(head, tail)) ∈ List.cons(head, tail) or s0(List.cons(head, tail)) <= m","List.cons(head, tail) != List.cons(head, tail) or head.max(max_list(tail)) = max_list(List.cons(head, tail))","s0(List.cons(head, tail)) ∈ List.cons(head, tail)","not s0(List.cons(head, tail)) <= max_list(List.cons(head, tail))","head.max(max_list(tail)) = max_list(List.cons(head, tail))","s0(List.cons(head, tail)) <= m"]}
{"goal":"f(list)","proof":["let (s0: List[Nat] -> Bool -> Nat, s1: List[Nat] -> Bool -> List[Nat]) satisfy { forall(x0: List[Nat] -> Bool, x1: List[Nat]) { not x0(List.nil[Nat]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[Nat] -> Bool, x3: List[Nat]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[Nat]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","let s2: List[Nat] -> Nat satisfy { forall(x4: List[Nat], x5: Nat) { not x5 ∈ x4 or not f(x4) or x5 <= max_list(x4) } and forall(x6: List[Nat]) { s2(x6) ∈ x6 or f(x6) } and forall(x7: List[Nat]) { not s2(x7) <= max_list(x7) or f(x7) } }","s2(List.nil[Nat]) ∈ List.nil[Nat] or f(List.nil[Nat])","not f(List.cons(s0(f), s1(f))) or not f(List.nil[Nat]) or f(list)","not f(List.nil[Nat]) or f(s1(f)) or f(list)","not f(List.nil[Nat]) or f(s1(f))","not s2(List.nil[Nat]) ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","not s2(List.nil[Nat]) ∈ List.nil[Nat]","f(List.nil[Nat])","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"list_has_max","proof":["let s0: Nat satisfy { s0 ∈ list and not s0 <= max_list(list) }","not s0 ∈ list or not f(list) or s0 <= max_list(list)"]}
{"goal":"no_list_contains_nat","proof":["not max_list(list) + 1 ∉ list","max_list(list) + 1 <= max_list(list) = max_list(list) < max_list(list)","not max_list(list) + 1 ∈ list or max_list(list) + 1 <= max_list(list)","max_list(list) + 1 ∉ list != max_list(list) + 1 ∈ list","not max_list(list) < max_list(list)","max_list(list) + 1 ∉ list or max_list(list) + 1 ∈ list","max_list(list) + 1 ∈ list","not max_list(list) + 1 <= max_list(list) or max_list(list) < max_list(list)","max_list(list) + 1 <= max_list(list)","max_list(list) < max_list(list)"]}
{"goal":"self_permutation","proof":["let s0: (List[T], List[T]) -> T satisfy { forall(x0: List[T], x1: List[T], x2: T) { not x0.is_permutation(x1) or x0.count(x2) = x1.count(x2) } and forall(x3: List[T], x4: List[T]) { x3.count(s0(x3, x4)) != x4.count(s0(x3, x4)) or x3.is_permutation(x4) } }","list.count(s0(list, list)) != list.count(s0(list, list)) or list.is_permutation(list)"]}
{"goal":"f(List.nil[T])","proof":["remove_first_is_sublist(item, List.nil[T], elem) = f(List.nil[T])","item ∈ List.nil[T].remove_first(elem) or remove_first_is_sublist(item, List.nil[T], elem)","not remove_first_is_sublist(item, List.nil[T], elem)","List.nil[T] != List.nil[T] or List.nil[T].remove_first(elem) = List.nil[T]","not item ∈ List.nil[T].remove_first(elem) or List.nil[T].remove_first(elem) != List.nil[T]","List.nil[T].remove_first(elem) = List.nil[T]","item ∈ List.nil[T].remove_first(elem)"]}
{"goal":"List.cons(head, tail).remove_first(elem) = tail","proof":["List.cons(head, tail) != List.cons(head, tail) or head != elem or List.cons(head, tail).remove_first(elem) = tail","List.cons(head, tail) != List.cons(head, tail) or head != elem"]}
{"goal":"item ∈ List.cons(head, tail)","proof":["not item ∈ List.cons(elem, tail)","item ∈ tail","not item ∈ tail or item ∈ List.cons(elem, tail)"]}
{"goal":"List.cons(head, tail).remove_first(elem) = List.cons(head, tail.remove_first(elem))","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).remove_first(elem) = List.cons(head, tail.remove_first(elem)) or head = elem"]}
{"goal":"item ∈ List.cons(head, tail)","proof":["not item ∈ List.cons(item, tail)","item != item or item ∈ List.cons(item, tail)"]}
{"goal":"item ∈ tail.remove_first(elem)","proof":["not item ∈ List.cons(head, tail.remove_first(elem)) or item ∈ tail.remove_first(elem) or head = item","item ∈ List.cons(head, tail.remove_first(elem))"]}
{"goal":"item ∈ tail","proof":["remove_first_is_sublist(item, tail, elem) = f(tail)","not item ∈ tail.remove_first(elem) or not remove_first_is_sublist(item, tail, elem) or item ∈ tail","remove_first_is_sublist(item, tail, elem)","not remove_first_is_sublist(item, tail, elem)"]}
{"goal":"item ∈ List.cons(head, tail)","proof":["not item ∈ tail or item ∈ List.cons(head, tail)"]}
{"goal":"item ∈ List.cons(head, tail)","proof":["head = item","not item ∈ List.cons(item, tail)","item != item or item ∈ List.cons(item, tail)"]}
{"goal":"f(List.cons(head, tail))","proof":["remove_first_is_sublist(item, List.cons(head, tail), elem) = f(List.cons(head, tail))","not item ∈ List.cons(head, tail) or remove_first_is_sublist(item, List.cons(head, tail), elem)","item ∈ List.cons(head, tail).remove_first(elem) or remove_first_is_sublist(item, List.cons(head, tail), elem)","not remove_first_is_sublist(item, List.cons(head, tail), elem)","not item ∈ List.cons(head, tail)","item ∈ List.cons(head, tail).remove_first(elem)","not item ∈ List.cons(head, tail).remove_first(elem)"]}
{"goal":"f(list)","proof":["let (s0: List[T] -> Bool -> T, s1: List[T] -> Bool -> List[T]) satisfy { forall(x0: List[T] -> Bool, x1: List[T]) { not x0(List.nil[T]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[T] -> Bool, x3: List[T]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[T]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(List.cons(s0(f), s1(f))) or not f(List.nil[T]) or f(list)","not f(List.nil[T]) or f(s1(f)) or f(list)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"remove_first_is_sublist","proof":["remove_first_is_sublist(item, list, elem) = f(list)","not item ∈ list.remove_first(elem) or not remove_first_is_sublist(item, list, elem) or item ∈ list","remove_first_is_sublist(item, list, elem)","not remove_first_is_sublist(item, list, elem)"]}
