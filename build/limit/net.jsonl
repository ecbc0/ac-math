{"goal":"subset_eq_is_transitive","proof":["let (s0: ((Set[K], Set[K]) -> Bool) -> Set[K], s1: ((Set[K], Set[K]) -> Bool) -> Set[K], s2: ((Set[K], Set[K]) -> Bool) -> Set[K]) satisfy { forall(x0: (Set[K], Set[K]) -> Bool, x1: Set[K], x2: Set[K], x3: Set[K]) { not is_transitive[Set[K]](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Set[K], Set[K]) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Set[K]](x4) } and forall(x5: (Set[K], Set[K]) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Set[K]](x5) } and forall(x6: (Set[K], Set[K]) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Set[K]](x6) } }","not s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K]) or not s1(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains) or s0(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains)","not s0(Set.subset_eq[K]) ⊆ s2(Set.subset_eq[K]) or is_transitive[Set[K]](Set.subset_eq[K])","not s0(Set.subset_eq[K]) ⊆ s2(Set.subset_eq[K])","s1(Set.subset_eq[K]) ⊆ s2(Set.subset_eq[K]) or is_transitive[Set[K]](Set.subset_eq[K])","s1(Set.subset_eq[K]) ⊆ s2(Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K]) or is_transitive[Set[K]](Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K])","Set.new[K](s2(Set.subset_eq[K]).contains) = s2(Set.subset_eq[K])","s1(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains)","not s0(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains)","not s1(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains) or s0(Set.subset_eq[K]) ⊆ Set.new[K](s2(Set.subset_eq[K]).contains)"]}
{"goal":"subset_eq_is_reflexive","proof":["let s0: ((Set[K], Set[K]) -> Bool) -> Set[K] satisfy { forall(x0: (Set[K], Set[K]) -> Bool, x1: Set[K]) { not is_reflexive[Set[K]](x0) or x0(x1, x1) } and forall(x2: (Set[K], Set[K]) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[Set[K]](x2) } }","let s1: (Set[K], Set[K]) -> K satisfy { forall(x3: Set[K], x4: Set[K], x5: K) { not x3 ⊆ x4 or not x5 ∈ x3 or x5 ∈ x4 } and forall(x6: Set[K], x7: Set[K]) { s1(x6, x7) ∈ x6 or x6 ⊆ x7 } and forall(x8: Set[K], x9: Set[K]) { not s1(x9, x8) ∈ x8 or x9 ⊆ x8 } }","not s1(s0(Set.subset_eq[K]), s0(Set.subset_eq[K])) ∈ s0(Set.subset_eq[K]) or s0(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K])","s1(s0(Set.subset_eq[K]), s0(Set.subset_eq[K])) ∈ s0(Set.subset_eq[K]) or s0(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K])","not s0(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K]) or is_reflexive[Set[K]](Set.subset_eq[K])","not s0(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K])","not s1(s0(Set.subset_eq[K]), s0(Set.subset_eq[K])) ∈ s0(Set.subset_eq[K])","s1(s0(Set.subset_eq[K]), s0(Set.subset_eq[K])) ∈ s0(Set.subset_eq[K])"]}
{"goal":"subset_eq_is_antisymmetric","proof":["let (s0: ((Set[K], Set[K]) -> Bool) -> Set[K], s1: ((Set[K], Set[K]) -> Bool) -> Set[K]) satisfy { forall(x0: (Set[K], Set[K]) -> Bool, x1: Set[K], x2: Set[K]) { not is_antisymmetric[Set[K]](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (Set[K], Set[K]) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[Set[K]](x3) } and forall(x4: (Set[K], Set[K]) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[Set[K]](x4) } and forall(x5: (Set[K], Set[K]) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[Set[K]](x5) } }","not s0(Set.subset_eq[K]) ⊇ s1(Set.subset_eq[K]) or not s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K]) or s1(Set.subset_eq[K]) = s0(Set.subset_eq[K])","s1(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K]) or is_antisymmetric[Set[K]](Set.subset_eq[K])","s1(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K]) or is_antisymmetric[Set[K]](Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊆ s1(Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊇ s1(Set.subset_eq[K]) = s1(Set.subset_eq[K]) ⊆ s0(Set.subset_eq[K])","s1(Set.subset_eq[K]) != s0(Set.subset_eq[K]) or is_antisymmetric[Set[K]](Set.subset_eq[K])","s1(Set.subset_eq[K]) != s0(Set.subset_eq[K])","s0(Set.subset_eq[K]) ⊇ s1(Set.subset_eq[K])","not s0(Set.subset_eq[K]) ⊇ s1(Set.subset_eq[K])"]}
{"goal":"a ⊆ b implies lte_from[Set[K]](Set.subset[K])(a, b)","proof":["not a ⊆ b or a ⊂ b or b = a","not a ⊂ b or lte_from(Set.subset[K], a, b)","not a ⊂ b","b = a","b != a or lte_from(Set.subset[K], a, b)"]}
{"goal":"a ⊆ b = lte_from[Set[K]](Set.subset[K])(a, b)","proof":["lte_from(Set.subset[K], a, b) or a ⊆ b","not lte_from(Set.subset[K], a, b) or not a ⊆ b","not a ⊆ b","lte_from(Set.subset[K], a, b)","not lte_from(Set.subset[K], a, b) or b = a or a ⊂ b","not a ⊂ b or a ⊆ b","not a ⊂ b","b ⊇ a = a ⊆ b","not b ⊇ a","b != a or b ⊇ a","b = a","b != a"]}
{"goal":"subset_eq_is_lte_from_subset","proof":["let (s0: Set[K], s1: Set[K]) satisfy { lte_from(Set.subset[K], s0, s1) != s0 ⊆ s1 }","lte_from(Set.subset[K], s0, s1) = s0 ⊆ s1"]}
{"goal":"subset_is_nonreflexive","proof":["let s0: ((Set[K], Set[K]) -> Bool) -> Set[K] satisfy { forall(x0: (Set[K], Set[K]) -> Bool, x1: Set[K]) { not is_nonreflexive[Set[K]](x0) or not x0(x1, x1) } and forall(x2: (Set[K], Set[K]) -> Bool) { x2(s0(x2), s0(x2)) or is_nonreflexive[Set[K]](x2) } }","s0(Set.subset[K]) ⊂ s0(Set.subset[K]) or is_nonreflexive[Set[K]](Set.subset[K])","s0(Set.subset[K]) ⊂ s0(Set.subset[K])","not s0(Set.subset[K]) ⊂ s0(Set.subset[K]) or s0(Set.subset[K]) != s0(Set.subset[K])"]}
{"goal":"subset_is_partial_order","proof":["not is_antisymmetric[Set[K]](lte_from[Set[K]](Set.subset[K])) or not is_nonreflexive[Set[K]](Set.subset[K]) or is_acyclic[Set[K]](Set.subset[K])","not is_antisymmetric[Set[K]](lte_from[Set[K]](Set.subset[K])) or not is_nonreflexive[Set[K]](Set.subset[K])","not is_antisymmetric[Set[K]](lte_from[Set[K]](Set.subset[K]))"]}
{"goal":"exists(k0: K) { true }","proof":[]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"s != empty[K]","proof":["empty[K] != s or s.is_empty","s.is_empty","not Set.singleton(x).is_empty"]}
{"goal":"a != empty[K]","proof":["not a.is_empty or not x ∈ a","not a.is_empty","empty[K] != a or a.is_empty"]}
{"goal":"no_empty[K](n.contains)","proof":["let s0: (Set[K] -> Bool) -> Set[K] satisfy { forall(x0: Set[K] -> Bool, x1: Set[K]) { not no_empty[K](x0) or empty[K] != x1 or not x0(x1) } and forall(x2: Set[K] -> Bool) { no_empty[K](x2) or x2(s0(x2)) } and forall(x3: Set[K] -> Bool) { no_empty[K](x3) or empty[K] = s0(x3) } }","not s0(n.contains) ∈ n or s0(n.contains) != empty[K]","no_empty[K](n.contains) or s0(n.contains) = empty[K]","s0(n.contains) = empty[K]","no_empty[K](n.contains) or s0(n.contains) ∈ n","not s0(n.contains) ∈ n","s0(n.contains) ∈ n"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"s ∈ n","proof":[]}
{"goal":"s ⊆ a1 ∩ a2","proof":["not a1 ⊇ s or a1 ∩ s = s","a1 != s or a1 ⊇ s","a1 ∩ a2 != s or s ⊆ a1 ∩ a2","a1 ∩ a2 != s","a1 ∩ s != s","a1 ⊇ s","not a1 ⊇ s"]}
{"goal":"s ∈ n and s ⊆ a1 ∩ a2","proof":["not s ⊆ a1 ∩ a2"]}
{"goal":"subset_two_intersection[K](n.contains)","proof":["let (s0: (Set[K] -> Bool, Set[K], Set[K]) -> Set[K], s1: (Set[K] -> Bool) -> Set[K], s2: (Set[K] -> Bool) -> Set[K]) satisfy { forall(x0: Set[K] -> Bool, x1: Set[K], x2: Set[K]) { not subset_two_intersection[K](x0) or not x0(x1) or not x0(x2) or x0(s0(x0, x1, x2)) } and forall(x3: Set[K] -> Bool, x4: Set[K], x5: Set[K]) { not subset_two_intersection[K](x3) or not x3(x4) or not x3(x5) or s0(x3, x4, x5) ⊆ x4 ∩ x5 } and forall(x6: Set[K] -> Bool) { subset_two_intersection[K](x6) or x6(s1(x6)) } and forall(x7: Set[K] -> Bool) { subset_two_intersection[K](x7) or x7(s2(x7)) } and forall(x8: Set[K], x9: Set[K] -> Bool) { not x8 ⊆ s1(x9) ∩ s2(x9) or not x9(x8) or subset_two_intersection[K](x9) } }","not s2(n.contains) ∈ n or not s2(n.contains) ∈ n or s ∈ n","not s1(n.contains) ∈ n or not s2(n.contains) ∈ n or s ⊆ s1(n.contains) ∩ s2(n.contains)","not s ⊆ s1(n.contains) ∩ s2(n.contains) or not s ∈ n or subset_two_intersection[K](n.contains)","subset_two_intersection[K](n.contains) or s2(n.contains) ∈ n","s2(n.contains) ∈ n","subset_two_intersection[K](n.contains) or s1(n.contains) ∈ n","s1(n.contains) ∈ n","not s2(n.contains) ∈ n or s ∈ n","s ∈ n","not s ⊆ s1(n.contains) ∩ s2(n.contains) or not s ∈ n","not s2(n.contains) ∈ n or s ⊆ s1(n.contains) ∩ s2(n.contains)","not s ⊆ s1(n.contains) ∩ s2(n.contains)","s ⊆ s1(n.contains) ∩ s2(n.contains)"]}
{"goal":"exists(k0: Set[K] -> Bool) { is_net[K](k0) }","proof":["not is_net[K](n.contains)","not no_empty[K](n.contains) or not subset_two_intersection[K](n.contains) or is_net[K](n.contains)","not no_empty[K](n.contains) or not subset_two_intersection[K](n.contains)","not no_empty[K](n.contains)"]}
{"goal":"elem_in_seq_tail(f, s1, x)","proof":["x ∈ Set.new[K](elem_in_seq_tail[K](f, s1)) = elem_in_seq_tail(f, s1, x)"]}
{"goal":"exists(k0: ℕ) { x = seq_tail[K](s1, f)(k0) }","proof":["let s0: (ℕ -> K, ℕ, K) -> ℕ satisfy { forall(x0: ℕ -> K, x1: ℕ, x2: K) { not elem_in_seq_tail(x0, x1, x2) or seq_tail[K](x1, x0, s0(x0, x1, x2)) = x2 } and forall(x3: ℕ, x4: ℕ -> K, x5: ℕ, x6: K) { seq_tail[K](x3, x4, x5) != x6 or elem_in_seq_tail(x4, x3, x6) } }","seq_tail[K](s1, f, s0(f, s1, x)) != x","not elem_in_seq_tail(f, s1, x) or seq_tail[K](s1, f, s0(f, s1, x)) = x"]}
{"goal":"exists(k0: ℕ) { s1 = s2 + k0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","s2 + 0 != s1","s2 + s0(s2, s1) != s1","not s2 < s1 or s2 + s0(s2, s1) = s1","not s2 < s1","not s2 <= s1 or s2 < s1 or s2 = s1","s1 >= s2 = s2 <= s1","s2 <= s1","s2 = s1","s2 + 0 = s2"]}
{"goal":"f(s1 + n) = f(s2 + m + n)","proof":[]}
{"goal":"seq_tail[K](s1, f)(n) = seq_tail[K](s2, f)(m + n)","proof":["s2 + (m + n) = s2 + m + n","seq_tail[K](s1, f, n) = f(s1 + n)","seq_tail[K](s2, f, m + n) = f(s2 + (m + n))"]}
{"goal":"elem_in_seq_tail(f, s2, x)","proof":["seq_tail[K](s2, f, m + n) != seq_tail[K](s1, f, n) or elem_in_seq_tail(f, s2, seq_tail[K](s1, f, n))","not elem_in_seq_tail(f, s2, seq_tail[K](s1, f, n))","elem_in_seq_tail(f, s2, seq_tail[K](s1, f, n))"]}
{"goal":"x ∈ Set.new[K](elem_in_seq_tail[K](f, s2))","proof":["x ∈ Set.new[K](elem_in_seq_tail[K](f, s2)) = elem_in_seq_tail(f, s2, x)"]}
{"goal":"shift_gte_imp_subset","proof":["let s0: (Set[K], Set[K]) -> K satisfy { forall(x0: Set[K], x1: Set[K], x2: K) { not x0 ⊆ x1 or not x2 ∈ x0 or x2 ∈ x1 } and forall(x3: Set[K], x4: Set[K]) { s0(x3, x4) ∈ x3 or x3 ⊆ x4 } and forall(x5: Set[K], x6: Set[K]) { not s0(x6, x5) ∈ x5 or x6 ⊆ x5 } }","not s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s1)) or s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s2))","not s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s2)) or Set.new[K](elem_in_seq_tail[K](f, s1)) ⊆ Set.new[K](elem_in_seq_tail[K](f, s2))","s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s1)) or Set.new[K](elem_in_seq_tail[K](f, s1)) ⊆ Set.new[K](elem_in_seq_tail[K](f, s2))","s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s1))","not s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s2))","s0(Set.new[K](elem_in_seq_tail[K](f, s1)), Set.new[K](elem_in_seq_tail[K](f, s2))) ∈ Set.new[K](elem_in_seq_tail[K](f, s2))"]}
{"goal":"exists(k0: ℕ) { a = Set.new[K](elem_in_seq_tail[K](f, k0)) }","proof":["let s0: (ℕ -> K, Set[K]) -> ℕ satisfy { forall(x0: ℕ -> K, x1: Set[K]) { not elem_in_seq_to_net[K](x0, x1) or Set.new[K](elem_in_seq_tail[K](x0, s0(x0, x1))) = x1 } and forall(x2: ℕ -> K, x3: ℕ, x4: Set[K]) { Set.new[K](elem_in_seq_tail[K](x2, x3)) != x4 or elem_in_seq_to_net[K](x2, x4) } }","Set.new[K](elem_in_seq_tail[K](f, s0(f, a))) != a","not elem_in_seq_to_net[K](f, a) or Set.new[K](elem_in_seq_tail[K](f, s0(f, a))) = a"]}
{"goal":"exists(k0: K) { k0 = seq_tail[K](shift, f)(0) }","proof":["seq_tail[K](shift, f, 0) != seq_tail[K](shift, f, 0)"]}
{"goal":"x = f(shift)","proof":["seq_tail[K](shift, f, 0) = f(shift + 0)","shift + 0 = 0 + shift","shift^1 = shift","shift^1 - 0 = shift^1","1 ⋅ (shift - 0) = shift - 0","0 + 1 ⋅ shift = 1 ⋅ shift"]}
{"goal":"x ∈ a","proof":["seq_tail[K](shift, f, 0) != x or elem_in_seq_tail(f, shift, x)","x ∈ Set.new[K](elem_in_seq_tail[K](f, shift)) = elem_in_seq_tail(f, shift, x)","not x ∈ Set.new[K](elem_in_seq_tail[K](f, shift))","elem_in_seq_tail(f, shift, x)","not elem_in_seq_tail(f, shift, x)"]}
{"goal":"a != empty[K]","proof":["not a.is_empty or not x ∈ a","not a.is_empty","empty[K] != a or a.is_empty"]}
{"goal":"no_empty[K](elem_in_seq_to_net[K](f))","proof":["let s0: (Set[K] -> Bool) -> Set[K] satisfy { forall(x0: Set[K] -> Bool, x1: Set[K]) { not no_empty[K](x0) or empty[K] != x1 or not x0(x1) } and forall(x2: Set[K] -> Bool) { no_empty[K](x2) or x2(s0(x2)) } and forall(x3: Set[K] -> Bool) { no_empty[K](x3) or s0(x3) = empty[K] } }","not elem_in_seq_to_net[K](f, s0(elem_in_seq_to_net[K](f))) or s0(elem_in_seq_to_net[K](f)) != empty[K]","no_empty[K](elem_in_seq_to_net[K](f)) or s0(elem_in_seq_to_net[K](f)) = empty[K]","s0(elem_in_seq_to_net[K](f)) = empty[K]","no_empty[K](elem_in_seq_to_net[K](f)) or elem_in_seq_to_net[K](f, s0(elem_in_seq_to_net[K](f)))","not elem_in_seq_to_net[K](f, s0(elem_in_seq_to_net[K](f)))","elem_in_seq_to_net[K](f, s0(elem_in_seq_to_net[K](f)))"]}
{"goal":"exists(k0: ℕ) { a1 = Set.new[K](elem_in_seq_tail[K](f, k0)) }","proof":["let s0: (ℕ -> K, Set[K]) -> ℕ satisfy { forall(x0: ℕ -> K, x1: Set[K]) { not elem_in_seq_to_net[K](x0, x1) or Set.new[K](elem_in_seq_tail[K](x0, s0(x0, x1))) = x1 } and forall(x2: ℕ -> K, x3: ℕ, x4: Set[K]) { Set.new[K](elem_in_seq_tail[K](x2, x3)) != x4 or elem_in_seq_to_net[K](x2, x4) } }","Set.new[K](elem_in_seq_tail[K](f, s0(f, a1))) != a1","not elem_in_seq_to_net[K](f, a1) or Set.new[K](elem_in_seq_tail[K](f, s0(f, a1))) = a1"]}
{"goal":"exists(k0: ℕ) { a2 = Set.new[K](elem_in_seq_tail[K](f, k0)) }","proof":["let s0: (ℕ -> K, Set[K]) -> ℕ satisfy { forall(x0: ℕ -> K, x1: Set[K]) { not elem_in_seq_to_net[K](x0, x1) or Set.new[K](elem_in_seq_tail[K](x0, s0(x0, x1))) = x1 } and forall(x2: ℕ -> K, x3: ℕ, x4: Set[K]) { Set.new[K](elem_in_seq_tail[K](x2, x3)) != x4 or elem_in_seq_to_net[K](x2, x4) } }","Set.new[K](elem_in_seq_tail[K](f, s0(f, a2))) != a2","not elem_in_seq_to_net[K](f, a2) or Set.new[K](elem_in_seq_tail[K](f, s0(f, a2))) = a2"]}
{"goal":"shift_1 <= shift","proof":["shift_1.max(shift_2) = shift_1 or shift_1.max(shift_2) = shift_2","shift_1.max(shift_2) = shift_1 or shift_1 < shift_2","not shift_1 < shift or shift_1 <= shift","not shift_1 < shift","shift != shift_1 or shift_1 <= shift","shift != shift_1","shift_1.max(shift_2) != shift_1","not shift_1 < shift_1.max(shift_2)","shift_1 < shift_2","shift_1.max(shift_2) = shift_2"]}
{"goal":"shift_2 <= shift","proof":["not shift_1 <= shift or not shift_2 < shift_1 or shift_2 < shift","shift_1.max(shift_2) = shift_2 or Partial_Order.gt[ℕ](shift_1, shift_2)","Partial_Order.gt[ℕ](shift_1, shift_2) = shift_2 < shift_1","not shift_2 < shift or shift_2 <= shift","not shift_2 < shift","shift != shift_2 or shift_2 <= shift","shift != shift_2","not shift_2 < shift_1 or shift_2 < shift","shift_1.max(shift_2) != shift_2","not shift_2 < shift_1","Partial_Order.gt[ℕ](shift_1, shift_2)","not Partial_Order.gt[ℕ](shift_1, shift_2)"]}
{"goal":"b ⊆ a1","proof":["not shift >= shift_1 or Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ Set.new[K](elem_in_seq_tail[K](f, shift_1))","shift >= shift_1 = shift_1 <= shift","not Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ a1","shift >= shift_1","not Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ Set.new[K](elem_in_seq_tail[K](f, shift_1))"]}
{"goal":"b ⊆ a2","proof":["not shift >= shift_2 or Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ Set.new[K](elem_in_seq_tail[K](f, shift_2))","shift >= shift_2 = shift_2 <= shift","not Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ a2","shift >= shift_2","not Set.new[K](elem_in_seq_tail[K](f, shift)) ⊆ Set.new[K](elem_in_seq_tail[K](f, shift_2))"]}
{"goal":"b ⊆ a1 ∩ a2","proof":["not a1 ⊇ b or not a2 ⊇ b or a1 ∩ a2 ⊇ b","a1 ∩ a2 ⊇ b = b ⊆ a1 ∩ a2","a1 ⊇ b = b ⊆ a1","a2 ⊇ b = b ⊆ a2","not a1 ∩ a2 ⊇ b","a2 ⊇ b","a1 ⊇ b","not a1 ⊇ b"]}
{"goal":"elem_in_seq_to_net[K](f)(b)","proof":["Set.new[K](elem_in_seq_tail[K](f, shift)) != b or elem_in_seq_to_net[K](f, b)"]}
{"goal":"elem_in_seq_to_net[K](f)(b) and b ⊆ a1 ∩ a2","proof":["not b ⊆ a1 ∩ a2"]}
{"goal":"subset_two_intersection[K](elem_in_seq_to_net[K](f))","proof":["let (s0: (Set[K] -> Bool, Set[K], Set[K]) -> Set[K], s1: (Set[K] -> Bool) -> Set[K], s2: (Set[K] -> Bool) -> Set[K]) satisfy { forall(x0: Set[K] -> Bool, x1: Set[K], x2: Set[K]) { not subset_two_intersection[K](x0) or not x0(x1) or not x0(x2) or x0(s0(x0, x1, x2)) } and forall(x3: Set[K] -> Bool, x4: Set[K], x5: Set[K]) { not subset_two_intersection[K](x3) or not x3(x4) or not x3(x5) or s0(x3, x4, x5) ⊆ x4 ∩ x5 } and forall(x6: Set[K] -> Bool) { subset_two_intersection[K](x6) or x6(s1(x6)) } and forall(x7: Set[K] -> Bool) { subset_two_intersection[K](x7) or x7(s2(x7)) } and forall(x8: Set[K], x9: Set[K] -> Bool) { not x8 ⊆ s1(x9) ∩ s2(x9) or not x9(x8) or subset_two_intersection[K](x9) } }","let s3: (Set[K], Set[K]) -> Set[K] satisfy { forall(x10: Set[K], x11: Set[K]) { not elem_in_seq_to_net[K](f, x10) or not elem_in_seq_to_net[K](f, x11) or elem_in_seq_to_net[K](f, s3(x10, x11)) } and forall(x12: Set[K], x13: Set[K]) { not elem_in_seq_to_net[K](f, x12) or not elem_in_seq_to_net[K](f, x13) or s3(x12, x13) ⊆ x12 ∩ x13 } }","not elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f))) or not elem_in_seq_to_net[K](f, s2(elem_in_seq_to_net[K](f))) or elem_in_seq_to_net[K](f, s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))))","not elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f))) or not elem_in_seq_to_net[K](f, s2(elem_in_seq_to_net[K](f))) or s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f))","not s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f)) or not elem_in_seq_to_net[K](f, s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f)))) or subset_two_intersection[K](elem_in_seq_to_net[K](f))","subset_two_intersection[K](elem_in_seq_to_net[K](f)) or elem_in_seq_to_net[K](f, s2(elem_in_seq_to_net[K](f)))","elem_in_seq_to_net[K](f, s2(elem_in_seq_to_net[K](f)))","subset_two_intersection[K](elem_in_seq_to_net[K](f)) or elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))","elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))","not s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f)) or not elem_in_seq_to_net[K](f, s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))))","not elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f))) or elem_in_seq_to_net[K](f, s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))))","elem_in_seq_to_net[K](f, s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))))","not elem_in_seq_to_net[K](f, s2(elem_in_seq_to_net[K](f))) or s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f))","not s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f))","s3(s1(elem_in_seq_to_net[K](f)), s2(elem_in_seq_to_net[K](f))) ⊆ s1(elem_in_seq_to_net[K](f)) ∩ s2(elem_in_seq_to_net[K](f))"]}
{"goal":"seq_to_net_is_net","proof":["not subset_two_intersection[K](elem_in_seq_to_net[K](f)) or not no_empty[K](elem_in_seq_to_net[K](f)) or is_net[K](elem_in_seq_to_net[K](f))"]}
{"goal":"exists(k0: Set[K] -> Bool) { is_net[K](k0) }","proof":["not is_net[K](lib(set).constant_false[Set[K]])","let (s0: (Set[K] -> Bool, Set[K], Set[K]) -> Set[K], s1: (Set[K] -> Bool) -> Set[K], s2: (Set[K] -> Bool) -> Set[K], s3: (Set[K] -> Bool) -> Set[K]) satisfy { forall(x0: Set[K] -> Bool, x1: Set[K]) { not is_net[K](x0) or empty[K] != x1 or not x0(x1) } and forall(x2: Set[K] -> Bool, x3: Set[K], x4: Set[K]) { not is_net[K](x2) or not x2(x3) or not x2(x4) or x2(s0(x2, x3, x4)) } and forall(x5: Set[K] -> Bool, x6: Set[K], x7: Set[K]) { not is_net[K](x5) or not x5(x6) or not x5(x7) or s0(x5, x6, x7) ⊆ x6 ∩ x7 } and forall(x8: Set[K] -> Bool) { is_net[K](x8) or x8(s2(x8)) or x8(s1(x8)) } and forall(x9: Set[K] -> Bool) { is_net[K](x9) or x9(s3(x9)) or x9(s1(x9)) } and forall(x10: Set[K], x11: Set[K] -> Bool) { not x10 ⊆ s2(x11) ∩ s3(x11) or not x11(x10) or is_net[K](x11) or x11(s1(x11)) } and forall(x12: Set[K] -> Bool) { is_net[K](x12) or x12(s2(x12)) or s1(x12) = empty[K] } and forall(x13: Set[K] -> Bool) { is_net[K](x13) or x13(s3(x13)) or s1(x13) = empty[K] } and forall(x14: Set[K], x15: Set[K] -> Bool) { not x14 ⊆ s2(x15) ∩ s3(x15) or not x15(x14) or is_net[K](x15) or s1(x15) = empty[K] } }","is_net[K](lib(set).constant_false[Set[K]]) or lib(set).constant_false(s3(lib(set).constant_false[Set[K]])) or lib(set).constant_false(s1(lib(set).constant_false[Set[K]]))","lib(set).constant_false(s3(lib(set).constant_false[Set[K]])) or lib(set).constant_false(s1(lib(set).constant_false[Set[K]]))","not lib(set).constant_false(s1(lib(set).constant_false[Set[K]]))","not lib(set).constant_false(s3(lib(set).constant_false[Set[K]]))"]}
{"goal":"exists(k0: Set[K] -> Bool) { is_net[K](k0) }","proof":["not is_net[K](Set.is_singleton[K])","let (s1: (Set[K] -> Bool, Set[K], Set[K]) -> Set[K], s2: (Set[K] -> Bool) -> Set[K], s3: (Set[K] -> Bool) -> Set[K], s4: (Set[K] -> Bool) -> Set[K]) satisfy { forall(x0: Set[K] -> Bool, x1: Set[K]) { not is_net[K](x0) or empty[K] != x1 or not x0(x1) } and forall(x2: Set[K] -> Bool, x3: Set[K], x4: Set[K]) { not is_net[K](x2) or not x2(x3) or not x2(x4) or s1(x2, x3, x4) ⊆ x3 ∩ x4 } and forall(x5: Set[K] -> Bool) { is_net[K](x5) or x5(s3(x5)) or x5(s2(x5)) } and forall(x6: Set[K] -> Bool) { is_net[K](x6) or x6(s4(x6)) or x6(s2(x6)) } and forall(x7: Set[K], x8: Set[K] -> Bool) { not x7 ⊆ s3(x8) ∩ s4(x8) or is_net[K](x8) or x8(s2(x8)) } and forall(x9: Set[K] -> Bool) { is_net[K](x9) or x9(s3(x9)) or s2(x9) = empty[K] } and forall(x10: Set[K] -> Bool) { is_net[K](x10) or x10(s4(x10)) or s2(x10) = empty[K] } and forall(x11: Set[K], x12: Set[K] -> Bool) { not x11 ⊆ s3(x12) ∩ s4(x12) or is_net[K](x12) or s2(x12) = empty[K] } }","let s0: Set[K] satisfy { true }","not s0 ∩ (s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])) ⊆ s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K]) or is_net[K](Set.is_singleton[K]) or s2(Set.is_singleton[K]) = empty[K]","not s0 ∩ (s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])) ⊆ s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K]) or s2(Set.is_singleton[K]) = empty[K]","not s0 ∩ (s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])) ⊆ s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K]) or is_net[K](Set.is_singleton[K]) or s2(Set.is_singleton[K]).is_singleton","not s0 ∩ (s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])) ⊆ s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K]) or s2(Set.is_singleton[K]).is_singleton","let s5: Set[K] -> K satisfy { forall(x13: Set[K]) { not x13.is_singleton or Set.singleton(s5(x13)) = x13 } and forall(x14: K, x15: Set[K]) { Set.singleton(x14) != x15 or x15.is_singleton } }","not s2(Set.is_singleton[K]).is_singleton or Set.singleton(s5(s2(Set.is_singleton[K]))) = s2(Set.is_singleton[K])","s0 ∩ (s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])) ⊆ s3(Set.is_singleton[K]) ∩ s4(Set.is_singleton[K])","s2(Set.is_singleton[K]).is_singleton","s2(Set.is_singleton[K]) = empty[K]","Set.singleton(s5(s2(Set.is_singleton[K]))) != empty[K] or Set.singleton(s5(s2(Set.is_singleton[K]))).is_empty","not Set.singleton(s5(s2(Set.is_singleton[K]))).is_empty","Set.singleton(s5(s2(Set.is_singleton[K]))) = s2(Set.is_singleton[K])","Set.singleton(s5(s2(Set.is_singleton[K]))) = empty[K]"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a = s","proof":["a ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a) or a = s","not lib(set).singleton_fn(s, a)","a ∈ s.singleton","not a ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a)","a ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"elem_in_seq_to_net[K](f)(a1) and elem_in_seq_to_net[K](f)(a2) implies exists(k0: Set[K]) { elem_in_seq_to_net[K](f)(k0) and k0 ⊆ a1 ∩ a2 }","proof":["let s0: (Set[K], Set[K]) -> Set[K] satisfy { forall(x0: Set[K], x1: Set[K]) { not elem_in_seq_to_net[K](f, x0) or not elem_in_seq_to_net[K](f, x1) or elem_in_seq_to_net[K](f, s0(x0, x1)) } and forall(x2: Set[K], x3: Set[K]) { not elem_in_seq_to_net[K](f, x2) or not elem_in_seq_to_net[K](f, x3) or s0(x2, x3) ⊆ x2 ∩ x3 } }","not s0(a1, a2) ⊆ a1 ∩ a2 or not elem_in_seq_to_net[K](f, s0(a1, a2))","not elem_in_seq_to_net[K](f, a1) or not elem_in_seq_to_net[K](f, a2) or elem_in_seq_to_net[K](f, s0(a1, a2))","not elem_in_seq_to_net[K](f, a1) or not elem_in_seq_to_net[K](f, a2) or s0(a1, a2) ⊆ a1 ∩ a2","not elem_in_seq_to_net[K](f, a1) or elem_in_seq_to_net[K](f, s0(a1, a2))","elem_in_seq_to_net[K](f, s0(a1, a2))","not elem_in_seq_to_net[K](f, a1) or s0(a1, a2) ⊆ a1 ∩ a2","not s0(a1, a2) ⊆ a1 ∩ a2","s0(a1, a2) ⊆ a1 ∩ a2"]}
{"goal":"elem_in_seq_to_net[K](f)(a1) and elem_in_seq_to_net[K](f)(a2) implies exists(k0: Set[K]) { elem_in_seq_to_net[K](f)(k0) and k0 ⊆ a1 ∩ a2 }","proof":["let s0: Set[K] satisfy { not elem_in_seq_to_net[K](f, a2) or not elem_in_seq_to_net[K](f, a1) or elem_in_seq_to_net[K](f, s0) and (not elem_in_seq_to_net[K](f, a2) or not elem_in_seq_to_net[K](f, a1) or s0 ⊆ a1 ∩ a2) }","not s0 ⊆ a1 ∩ a2 or not elem_in_seq_to_net[K](f, s0)","not s0 ⊆ a1 ∩ a2"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a1 = s","proof":["a1 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a1)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a1) or a1 = s","not lib(set).singleton_fn(s, a1)","a1 ∈ s.singleton","not a1 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a1)","a1 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"seq_to_net_is_net","proof":["let s0: ℕ satisfy { true }","not elem_in_seq_to_net[K](f, Set.new[K](elem_in_seq_tail[K](f, s0))) or is_net[K](elem_in_seq_to_net[K](f))","not elem_in_seq_to_net[K](f, Set.new[K](elem_in_seq_tail[K](f, s0)))","Set.new[K](elem_in_seq_tail[K](f, s0)) != Set.new[K](elem_in_seq_tail[K](f, s0)) or elem_in_seq_to_net[K](f, Set.new[K](elem_in_seq_tail[K](f, s0)))","Set.new[K](elem_in_seq_tail[K](f, s0)) != Set.new[K](elem_in_seq_tail[K](f, s0))"]}
{"goal":"seq_to_net_is_net","proof":["let (s0: (Set[K] -> Bool, Set[K], Set[K]) -> Set[K], s1: (Set[K] -> Bool) -> Set[K], s2: (Set[K] -> Bool) -> Set[K], s3: (Set[K] -> Bool) -> Set[K]) satisfy { forall(x0: Set[K] -> Bool, x1: Set[K]) { not is_net[K](x0) or empty[K] != x1 or not x0(x1) } and forall(x2: Set[K] -> Bool, x3: Set[K], x4: Set[K]) { not is_net[K](x2) or not x2(x3) or not x2(x4) or s0(x2, x3, x4) ⊆ x3 ∩ x4 } and forall(x5: Set[K] -> Bool) { is_net[K](x5) or x5(s2(x5)) or x5(s1(x5)) } and forall(x6: Set[K] -> Bool) { is_net[K](x6) or x6(s3(x6)) or x6(s1(x6)) } and forall(x7: Set[K], x8: Set[K] -> Bool) { not x7 ⊆ s2(x8) ∩ s3(x8) or is_net[K](x8) or x8(s1(x8)) } and forall(x9: Set[K] -> Bool) { is_net[K](x9) or x9(s2(x9)) or s1(x9) = empty[K] } and forall(x10: Set[K] -> Bool) { is_net[K](x10) or x10(s3(x10)) or s1(x10) = empty[K] } and forall(x11: Set[K], x12: Set[K] -> Bool) { not x11 ⊆ s2(x12) ∩ s3(x12) or is_net[K](x12) or s1(x12) = empty[K] } }","not elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f))) or s1(elem_in_seq_to_net[K](f)) != empty[K]","not s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) ⊆ s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) or is_net[K](elem_in_seq_to_net[K](f)) or s1(elem_in_seq_to_net[K](f)) = empty[K]","not s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) ⊆ s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) or is_net[K](elem_in_seq_to_net[K](f)) or elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))","s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) ⊆ s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f))","not s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) ⊆ s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) or s1(elem_in_seq_to_net[K](f)) = empty[K]","s1(elem_in_seq_to_net[K](f)) = empty[K]","not s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) ⊆ s2(elem_in_seq_to_net[K](f)) ∩ s3(elem_in_seq_to_net[K](f)) or elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))","not elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))","elem_in_seq_to_net[K](f, s1(elem_in_seq_to_net[K](f)))"]}
{"goal":"exists(k0: Set[K]) { elem_in_seq_to_net[K](f)(k0) and k0 ⊆ a1 ∩ a2 }","proof":["not b ⊆ a1 ∩ a2 or not elem_in_seq_to_net[K](f, b)","not b ⊆ a1 ∩ a2"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"a2 = s","proof":["a2 ∈ Set[K].new(lib(set).singleton_fn(s)) = lib(set).singleton_fn(s, a2)","Set[K].new(lib(set).singleton_fn(s)) = s.singleton","not lib(set).singleton_fn(s, a2) or a2 = s","not lib(set).singleton_fn(s, a2)","a2 ∈ s.singleton","not a2 ∈ Set[K].new(lib(set).singleton_fn(s)) or lib(set).singleton_fn(s, a2)","a2 ∈ Set[K].new(lib(set).singleton_fn(s))"]}
{"goal":"forall(x0: Set[K]) { elem_in_seq_to_net[K](f)(x0) implies x0 != empty[K] }","proof":["let s0: Set[K] satisfy { elem_in_seq_to_net[K](f, s0) and s0 = empty[K] }","elem_in_seq_to_net[K](f, empty[K])","not elem_in_seq_to_net[K](f, empty[K]) or empty[K] != empty[K]"]}
