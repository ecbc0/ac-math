{"goal":"lt_and_eq_is_different_thing","proof":["not is_acyclic[P](P.lt) or not a < a or not a < a","not is_acyclic[P](P.lt)"]}
{"goal":"acyclic_and_transitive_imp_not_self","proof":["let s0: (T, T) -> Bool -> T satisfy { forall(x0: (T, T) -> Bool, x1: T) { not is_nonreflexive[T](x0) or not x0(x1, x1) } and forall(x2: (T, T) -> Bool) { x2(s0(x2), s0(x2)) or is_nonreflexive[T](x2) } }","not is_acyclic[T](lt) or not lt(s0(lt), s0(lt)) or not lt(s0(lt), s0(lt))","lt(s0(lt), s0(lt)) or is_nonreflexive[T](lt)","lt(s0(lt), s0(lt))"]}
{"goal":"x = x","proof":[]}
{"goal":"lte_from[T](lt)(x, x)","proof":["x != x or lte_from(lt, x, x)"]}
{"goal":"lte_is_reflexive","proof":["let s0: (T, T) -> Bool -> T satisfy { forall(x0: (T, T) -> Bool, x1: T) { not is_reflexive[T](x0) or x0(x1, x1) } and forall(x2: (T, T) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[T](x2) } }","lte_from(lt, s0(lte_from[T](lt)), s0(lte_from[T](lt)))","not lte_from(lt, s0(lte_from[T](lt)), s0(lte_from[T](lt))) or is_reflexive[T](lte_from[T](lt))"]}
{"goal":"lte_from[T](lt)(x, z)","proof":["not lte_from(lt, y, z)"]}
{"goal":"lte_from[T](lt)(x, z)","proof":["not lte_from(lt, x, y)"]}
{"goal":"x != y","proof":[]}
{"goal":"y != z","proof":[]}
{"goal":"lt(x, y)","proof":["not lte_from(lt, x, y) or y = x or lt(x, y)"]}
{"goal":"lt(y, z)","proof":["not lte_from(lt, y, z) or z = y or lt(y, z)"]}
{"goal":"lt(x, z)","proof":["not is_transitive[T](lt) or not lt(x, y) or not lt(y, z) or lt(x, z)","not lt(y, z) or not lt(x, y)"]}
{"goal":"lte_from[T](lt)(x, z)","proof":["not lt(x, z) or lte_from(lt, x, z)"]}
{"goal":"lt_trans_imp_lte_trans","proof":["let (s0: (T, T) -> Bool -> T, s1: (T, T) -> Bool -> T, s2: (T, T) -> Bool -> T) satisfy { forall(x0: (T, T) -> Bool, x1: T, x2: T, x3: T) { not is_transitive[T](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (T, T) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[T](x4) } and forall(x5: (T, T) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[T](x5) } and forall(x6: (T, T) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[T](x6) } }","not lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt))) or not lte_from(lt, s1(lte_from[T](lt)), s2(lte_from[T](lt))) or lte_from(lt, s0(lte_from[T](lt)), s2(lte_from[T](lt)))","not lte_from(lt, s0(lte_from[T](lt)), s2(lte_from[T](lt))) or is_transitive[T](lte_from[T](lt))","lte_from(lt, s1(lte_from[T](lt)), s2(lte_from[T](lt))) or is_transitive[T](lte_from[T](lt))","lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt))) or is_transitive[T](lte_from[T](lt))","lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt)))","lte_from(lt, s1(lte_from[T](lt)), s2(lte_from[T](lt)))","not lte_from(lt, s0(lte_from[T](lt)), s2(lte_from[T](lt)))","not lte_from(lt, s1(lte_from[T](lt)), s2(lte_from[T](lt))) or not lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt)))"]}
{"goal":"lte_from[T](lt)(x, y)","proof":["not lt(x, y) or lte_from(lt, x, y)"]}
{"goal":"lte_from[T](lt)(y, z)","proof":["not lt(y, z) or lte_from(lt, y, z)"]}
{"goal":"lte_from[T](lt)(x, z)","proof":["not is_transitive[T](lte_from[T](lt)) or not lte_from(lt, x, y) or not lte_from(lt, y, z) or lte_from(lt, x, z)","not lte_from(lt, x, y) or not lte_from(lt, y, z) or lte_from(lt, x, z)","not lte_from(lt, y, z) or not lte_from(lt, x, y)"]}
{"goal":"x != y","proof":["lt(x, x)","not is_acyclic[T](lt) or not lt(x, x) or not lt(x, x)"]}
{"goal":"y != z","proof":["lt(y, y)","not is_acyclic[T](lt) or not lt(y, y) or not lt(y, y)"]}
{"goal":"not is_acyclic[T](lt)","proof":["lt(y, x)","not is_acyclic[T](lt) or not lt(x, y) or not lt(y, x)"]}
{"goal":"false","proof":[]}
{"goal":"lt(x, z)","proof":["not lte_from(lt, x, z) or z = x or lt(x, z)"]}
{"goal":"lte_trans_imp_lt_trans","proof":["let (s0: (T, T) -> Bool -> T, s1: (T, T) -> Bool -> T, s2: (T, T) -> Bool -> T) satisfy { forall(x0: (T, T) -> Bool, x1: T, x2: T, x3: T) { not is_transitive[T](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (T, T) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[T](x4) } and forall(x5: (T, T) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[T](x5) } and forall(x6: (T, T) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[T](x6) } }","not is_transitive[T](lte_from[T](lt)) or not lt(s0(lt), s1(lt)) or not lt(s1(lt), s2(lt)) or lt(s0(lt), s2(lt))","not lt(s0(lt), s1(lt)) or not lt(s1(lt), s2(lt)) or lt(s0(lt), s2(lt))","not lt(s0(lt), s2(lt)) or is_transitive[T](lt)","not lt(s0(lt), s2(lt))","lt(s1(lt), s2(lt)) or is_transitive[T](lt)","lt(s1(lt), s2(lt))","lt(s0(lt), s1(lt)) or is_transitive[T](lt)","lt(s0(lt), s1(lt))","not lt(s1(lt), s2(lt)) or lt(s0(lt), s2(lt))"]}
{"goal":"lt(x, y) or x = y","proof":["not lte_from(lt, x, y) or y = x or lt(x, y)"]}
{"goal":"lt(y, x) or y = x","proof":["not lte_from(lt, y, x) or y = x or lt(y, x)"]}
{"goal":"x = y","proof":["not is_acyclic[T](lt) or not lt(x, y) or not lt(y, x)"]}
{"goal":"is_antisymmetric[T](lte_from[T](lt))","proof":["let (s0: (T, T) -> Bool -> T, s1: (T, T) -> Bool -> T) satisfy { forall(x0: (T, T) -> Bool, x1: T, x2: T) { not is_antisymmetric[T](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (T, T) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[T](x3) } and forall(x4: (T, T) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[T](x4) } and forall(x5: (T, T) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[T](x5) } }","not lte_from(lt, s1(lte_from[T](lt)), s0(lte_from[T](lt))) or not lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt))) or s1(lte_from[T](lt)) = s0(lte_from[T](lt))","lte_from(lt, s1(lte_from[T](lt)), s0(lte_from[T](lt))) or is_antisymmetric[T](lte_from[T](lt))","lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt))) or is_antisymmetric[T](lte_from[T](lt))","s1(lte_from[T](lt)) != s0(lte_from[T](lt)) or is_antisymmetric[T](lte_from[T](lt))","s1(lte_from[T](lt)) != s0(lte_from[T](lt))","lte_from(lt, s0(lte_from[T](lt)), s1(lte_from[T](lt)))","lte_from(lt, s1(lte_from[T](lt)), s0(lte_from[T](lt)))","not lte_from(lt, s1(lte_from[T](lt)), s0(lte_from[T](lt)))"]}
{"goal":"acyclic_imp_antisymmetric","proof":[]}
{"goal":"lte_from[T](lt)(x, y) and lte_from[T](lt)(y, x)","proof":["not lt(x, y) or lte_from(lt, x, y)","not lt(y, x) or lte_from(lt, y, x)","lte_from(lt, y, x)","lte_from(lt, x, y)","not lte_from(lt, x, y)"]}
{"goal":"x = y","proof":["not is_antisymmetric[T](lte_from[T](lt)) or not lte_from(lt, y, x) or not lte_from(lt, x, y) or y = x","not lte_from(lt, y, x) or not lte_from(lt, x, y) or not is_antisymmetric[T](lte_from[T](lt))"]}
{"goal":"lt(x, x)","proof":[]}
{"goal":"not is_nonreflexive[T](lt)","proof":["not is_nonreflexive[T](lt) or not lt(x, x)"]}
{"goal":"false","proof":[]}
{"goal":"not (lt(x, y) and lt(y, x))","proof":[]}
{"goal":"is_acyclic[T](lt)","proof":["let (s0: (T, T) -> Bool -> T, s1: (T, T) -> Bool -> T) satisfy { forall(x0: (T, T) -> Bool, x1: T, x2: T) { not is_acyclic[T](x0) or not x0(x1, x2) or not x0(x2, x1) } and forall(x3: (T, T) -> Bool) { x3(s0(x3), s1(x3)) or is_acyclic[T](x3) } and forall(x4: (T, T) -> Bool) { x4(s1(x4), s0(x4)) or is_acyclic[T](x4) } }","not lt(s1(lt), s0(lt)) or not lt(s0(lt), s1(lt))","lt(s1(lt), s0(lt)) or is_acyclic[T](lt)","lt(s1(lt), s0(lt))","lt(s0(lt), s1(lt)) or is_acyclic[T](lt)","not lt(s0(lt), s1(lt))","lt(s0(lt), s1(lt))"]}
{"goal":"antisymmetric_imp_acyclic","proof":[]}
{"goal":"equivalent_representation_of_partial_order","proof":["not is_transitive[T](lte_from[T](lt)) or not is_acyclic[T](lt) or not is_nonreflexive[T](lt) or is_transitive[T](lt)","not is_antisymmetric[T](lte_from[T](lt)) or not is_nonreflexive[T](lt) or is_acyclic[T](lt)","not is_acyclic[T](lt) or is_antisymmetric[T](lte_from[T](lt))","not is_transitive[T](lt) or is_transitive[T](lte_from[T](lt))","is_reflexive[T](lte_from[T](lt))","not is_antisymmetric[T](lte_from[T](lt)) or not is_transitive[T](lte_from[T](lt)) or not is_transitive[T](lt) or not is_acyclic[T](lt)","not is_antisymmetric[T](lte_from[T](lt)) or is_acyclic[T](lt)","is_acyclic[T](lt)","not is_transitive[T](lte_from[T](lt)) or is_transitive[T](lt)","is_transitive[T](lt)","not is_antisymmetric[T](lte_from[T](lt)) or not is_transitive[T](lte_from[T](lt))","is_antisymmetric[T](lte_from[T](lt))","is_transitive[T](lte_from[T](lt))","not is_transitive[T](lte_from[T](lt))"]}
{"goal":"a.max(b) >= a","proof":["a < b or b < a or b = a","not b <= a or a.max(b) = a","a.max(b) >= a = a <= a.max(b)","not a <= a.max(b)","not a <= b","not a < b or a <= b","not b < a or b <= a","not a < b","a.max(b) != a or a <= a.max(b)","a.max(b) != a","b != a","not b <= a","b < a","not b < a"]}
{"goal":"a.max(b) >= b","proof":["a.max(b) >= b = b <= a.max(b)","not b <= a.max(b)","a.max(b) != b or b <= a.max(b)"]}
{"goal":"a.max(b) >= a","proof":["a.max(b) = b or b <= a","not b <= a or a.max(b) = a","a.max(b) >= a = a <= a.max(b)","not a <= a.max(b)","a.max(b) != a or a <= a.max(b)","a.max(b) != a","b <= a","not b <= a"]}
{"goal":"a.max(b) >= b","proof":["a.max(b) = b or b <= a","b <= a","not b <= a or a.max(b) = a","a >= b = b <= a","a >= b","a.max(b) = a"]}
{"goal":"max_imp_gte","proof":["not a.max(b) >= a","a.max(b) < a or a < a.max(b) or a.max(b) = a","a.max(b) = b or b <= a","not b <= a or a.max(b) = a","a.max(b) >= a = a <= a.max(b)","not a <= a.max(b)","not a < a.max(b) or a <= a.max(b)","not b < a or b <= a","a.max(b) != a or a <= a.max(b)","a.max(b) != a","not a < a.max(b)","not b <= a","not b < a","a.max(b) = b","a.max(b) < a","not a.max(b) < a"]}
{"goal":"a.min(b) <= a","proof":["not a <= a","a.max(a) = a or a <= a","a.max(a) = a","a >= a = a <= a","not a >= a","a.max(a) >= a"]}
{"goal":"a.min(b) <= b","proof":["not a <= b","a.min(b) = b or a <= b","a.min(b) = b"]}
{"goal":"a.min(b) <= a","proof":["a.min(b) < a or a < a.min(b) or a.min(b) = a","a.min(b) = b or a <= b","not a <= b or a.min(b) = a","not a < b or a <= b","not a.min(b) < a or a.min(b) <= a","not a.min(b) < a","a < a.min(b)","not a <= b","not a < b","a.min(b) = b"]}
{"goal":"a.min(b) <= b","proof":["a.min(b) = b or a <= b","not a <= b or a.min(b) = a","not a <= b","a.min(b) != b or a.min(b) <= b","a.min(b) = b","a.min(b) != b"]}
{"goal":"min_imp_lte","proof":["not a.min(b) <= a","a < a.min(b) or a.min(b) < a or a.min(b) = a","a.min(b) = b or a <= b","not a <= b or a.min(b) = a","not a < b or a <= b","not a.min(b) < a or a.min(b) <= a","a.min(b) != a or a.min(b) <= a","a.min(b) != a","not a.min(b) < a","not a <= b","a < a.min(b)","not a < b","a.min(b) = b"]}
{"goal":"lt_imp_min","proof":["not a <= b or a.min(b) = a","not a <= b","not a < b or a <= b"]}
{"goal":"not_lt_imp_min","proof":["not a <= b or a < b or b = a","a.min(b) = b or a <= b","a <= b","b = a","not a <= b or a.min(b) = a","a.min(b) != a","a.min(b) = a"]}
{"goal":"gt_imp_min","proof":["not is_acyclic[L](L.lt) or not a < b or not b < a","a.min(b) = b or a < b","a < b","a > b = b < a","b < a","not is_acyclic[L](L.lt)"]}
{"goal":"not_gt_imp_min","proof":["a < b or b < a or b = a","a.min(b) = b or a <= b","not a <= b or a.min(b) = a","not a <= b","not a < b or a.min(b) = a","not a < b","a > b = b < a","not b < a","b = a","a.min(b) = b","a.min(b) != b"]}
{"goal":"gte_imp_min","proof":["not b <= a or b < a or b = a","not a > b or a.min(b) = b","not a > b","a.min(b) = b or a < b","a < b","a >= b = b <= a","b <= a","a > b = b < a","b > a = a < b","not b < a","b = a"]}
{"goal":"not_gte_imp_min","proof":["a > b or a.min(b) = a","a > b","a >= b = b <= a","not b <= a","not b < a or b <= a","a > b = b < a","not b < a","b < a"]}
{"goal":"lt_imp_max","proof":["not b <= a or b < a or b = a","not is_acyclic[L](L.lt) or not b < a or not a < b","b <= a or a.max(b) = b","b <= a","not b <= a or a.max(b) = a","not b < a","a.max(b) = a","b = a","b != a"]}
{"goal":"not_lt_imp_max","proof":["a.min(b) = b or a < b","not b <= a or a.max(b) = a","not b <= a","a.min(b) <= a","a.min(b) = b"]}
{"goal":"gt_imp_max","proof":["not is_acyclic[L](L.lt) or not a < b or not b < a","a.max(b) = a or a < b","a < b","a > b = b < a","b < a","not is_acyclic[L](L.lt)"]}
{"goal":"not_gt_imp_max","proof":["not b <= a or b < a or b = a","a.max(b) = a or a < b","not a < b or a.max(b) = b","not a < b","b <= a or a.max(b) = b","b <= a","a > b = b < a","not b < a","b = a","a.max(b) = a","a.max(b) != a"]}
{"goal":"gte_imp_max","proof":["not b <= a or a.max(b) = a","not b <= a","a >= b = b <= a"]}
{"goal":"not_gte_imp_max","proof":["a.max(b) = b or b <= a","b <= a","a >= b = b <= a"]}
{"goal":"min_is_one","proof":["a <= b or a.min(b) = b","a <= b","not a <= b or a.min(b) = a"]}
{"goal":"max_is_one","proof":["a.max(b) = b or b <= a","b <= a","not b <= a or a.max(b) = a"]}
{"goal":"a.min(b) = b.min(a)","proof":["not b >= a or b.min(a) = a","not a <= b or a.min(b) = a","b >= a = a <= b","b >= a","a.min(b) = a","b.min(a) = a","b.min(a) != a"]}
{"goal":"b < a","proof":["b.max(a) = b or b < a","b.max(a) = b","b.max(a) = a or a <= b","b != a or a <= b","b != a","b.max(a) = a","b.max(a) != a"]}
{"goal":"b.min(a) = a.min(b)","proof":["not b < a or b.min(a) = b","a <= b or a.min(b) = b","a.min(b) = b","b.min(a) = b","b.min(a) != b"]}
{"goal":"min_symm","proof":[]}
{"goal":"a.max(b) = b.max(a)","proof":["not a <= b or a < b or b = a","b.max(a).max(b.max(a)) = b.max(a) or b.max(a).max(b.max(a)) = b.max(a)","not a < b or a.max(b) = b","not a <= b or b.max(a) = b","b.max(a).max(b.max(a)) = b.max(a)","b.max(a) = b","a.max(b) != b","b.max(a).max(b.max(a)) != a.max(b)","b.max(b.max(a)) != a.max(b)","b.max(b) != a.max(b)","b != a","not a < b","a < b"]}
{"goal":"b < a","proof":["b.max(a) = b or b < a","b.max(a) = b","b.max(a) = a or a <= b","b != a or a <= b","b != a","b.max(a) = a","b.max(a) != a"]}
{"goal":"b.max(a) = a.max(b)","proof":["a.max(b) = a or a < b","b.max(a) = a or a <= b","b.max(a) = a","a.max(b) != a","not a < b or a <= b","a < b","not a < b"]}
{"goal":"max_symm","proof":[]}
{"goal":"min_lte_left","proof":["b.min(a) = a.min(b)","not b.min(a) <= a","b.min(a) <= a"]}
{"goal":"max_gte_left","proof":["b.max(a) = a.max(b)","not b.max(a) >= a","b.max(a) >= a"]}
{"goal":"min_lte_right","proof":["b.min(a) = a.min(b)","not b.min(a) <= b","b.min(a) <= b"]}
{"goal":"max_gte_right","proof":["b.max(a) = a.max(b)","not b.max(a) >= b","b.max(a) >= b"]}
{"goal":"b.min(c) = b","proof":["not b <= c or b < c or c = b","b.min(c) = b or b.min(c) = c","b.min(c) = c","c != b","not b < c or b.min(c) = b","b < c","not b < c"]}
{"goal":"a < b.min(c)","proof":[]}
{"goal":"b > c","proof":["b.min(c) = b or b > c","b.min(c) = b","b.min(c) = c or b <= c","c != b or b <= c","c != b","b.min(c) = c","b.min(c) != c"]}
{"goal":"b.min(c) = c","proof":["not b > c or b.min(c) = c"]}
{"goal":"a < b.min(c)","proof":[]}
{"goal":"lt_both_imp_lt_min","proof":[]}
{"goal":"lt_min_imp_lt_left","proof":["not is_transitive[L](L.lt) or not a < b.min(c) or not b.min(c) < b or a < b","not b.min(c) <= b or b.min(c) < b or b.min(c) = b","b.min(c) <= b","not b.min(c) < b or not a < b.min(c)","not b.min(c) < b","b.min(c) = b"]}
{"goal":"lt_min_imp_lt_right","proof":["not a < c.min(b) or a < c","not a < c.min(b)","c.min(b) = b.min(c)"]}
{"goal":"b.max(c) = c","proof":["not b <= c or b < c or c = b","b.max(c) = b or b.max(c) = c","b.max(c) = b","c != b","not b < c or b.max(c) = c","b < c","not b < c"]}
{"goal":"a > b.max(c)","proof":[]}
{"goal":"b > c","proof":["b.min(c) = b or b > c","b.min(c) = b","b.min(c) = c or b <= c","c != b or b <= c","c != b","b.min(c) = c","b.min(c) != c"]}
{"goal":"b.max(c) = b","proof":["not b > c or b.max(c) = b"]}
{"goal":"a > b.max(c)","proof":[]}
{"goal":"gt_both_imp_gt_max","proof":[]}
{"goal":"b.max(c) = c","proof":["not b <= c or b < c or c = b","b.max(c) = b or b.max(c) = c","b.max(c) = b","c != b","not b < c or b.max(c) = c","b < c","not b < c"]}
{"goal":"a > b","proof":["not is_transitive[L](L.lt) or not b < b.max(c) or not b.max(c) < a or b < a","not b <= c or b < c or c = b","b.max(b) = b or b.max(b) = b","a > b = b < a","a > b.max(c) = b.max(c) < a","not b < a","b.max(c) < a","not b < b.max(c) or not b.max(c) < a","b.max(b) = b","not a > b.max(b)","not b < b.max(c)","b < c or c = b","not b < c","c = b"]}
{"goal":"b > c","proof":["b.min(c) = b or b > c","b.min(c) = b","b.min(c) = c or b <= c","c != b or b <= c","c != b","b.min(c) = c","b.min(c) != c"]}
{"goal":"b.max(c) = b","proof":["not b > c or b.max(c) = b"]}
{"goal":"a > b","proof":["not a > b.max(c)"]}
{"goal":"gt_max_imp_gt_left","proof":[]}
{"goal":"gt_max_imp_gt_right","proof":["not a > c.max(b) or a > c","not a > c.max(b)","c.max(b) = b.max(c)"]}
