{"goal":"r - (r - 1) = 1","proof":["-(r - 1) = 1 - r","r + -(r - 1) = r - (r - 1)","1 - r + r = 1","r + (1 - r) = 1 - r + r","r + -(r - 1) != 1","r + (1 - r) != 1"]}
{"goal":"r > r - 1","proof":["not 1 > 0 or r > r - 1","not 1 > 0"]}
{"goal":"r.gt(r - 1)","proof":[]}
{"goal":"not r > r","proof":["not r < r or not r < r","r > r = r < r","r < r"]}
{"goal":"not r.gt(r)","proof":[]}
{"goal":"gt_is_cut","proof":["let s0: ℚ satisfy { true }","not r > r - 1 or is_cut(r.gt) or r > s0","not r > s0 or is_cut(r.gt) or r > r","not r > r - 1 or r > s0","not r > s0 or r > r","r > s0","not r > s0"]}
{"goal":"r > y","proof":[]}
{"goal":"y > x","proof":[]}
{"goal":"r > x","proof":["not r > y or not y > x or r > x","not y > x or not r > y"]}
{"goal":"r.gt(x)","proof":["r > x = x < r"]}
{"goal":"gt_is_lower_interval","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool, x1: ℚ, x2: ℚ) { not is_lower_interval(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: ℚ -> Bool) { is_lower_interval(x3) or x3(s1(x3)) } and forall(x4: ℚ -> Bool) { s0(x4) < s1(x4) or is_lower_interval(x4) } and forall(x5: ℚ -> Bool) { not x5(s0(x5)) or is_lower_interval(x5) } }","not r > s1(r.gt) or not s1(r.gt) > s0(r.gt) or r > s0(r.gt)","s0(r.gt) < s1(r.gt) or is_lower_interval(r.gt)","s1(r.gt) > s0(r.gt) = s0(r.gt) < s1(r.gt)","not r > s0(r.gt) or is_lower_interval(r.gt)","not r > s0(r.gt)","is_lower_interval(r.gt) or r > s1(r.gt)","r > s1(r.gt)","s0(r.gt) < s1(r.gt)","s1(r.gt) > s0(r.gt)"]}
{"goal":"exists(k0: ℚ) { is_greatest(r.gt, k0) }","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(r.gt, s0(r.gt))","not has_greatest(r.gt) or is_greatest(r.gt, s0(r.gt))"]}
{"goal":"r > q","proof":["not is_greatest(r.gt, q) or r > q"]}
{"goal":"diff > 0","proof":["not r - q > 0","r - q > 0 = r > q"]}
{"goal":"q + diff = r","proof":["r - q + q = r","diff + q = q + diff","diff + q != r"]}
{"goal":"diff / 2 > 0","proof":["not diff > 0 or diff / 2 > 0"]}
{"goal":"z > q","proof":["not diff / 2 > 0 or q < q + diff / 2","diff / 2 > 0 = 0 < diff / 2","q + diff / 2 > q = q < q + diff / 2","0 < diff / 2 = (diff / 2).is_positive","not q + diff / 2 > q","not q < q + diff / 2","0 < diff / 2","not diff / 2 > 0","diff / 2 > 0"]}
{"goal":"z + diff / 2 = r","proof":["q + (diff / 2 + diff / 2) = q + diff / 2 + diff / 2","(r - q) / 2 + (r - q) / 2 = r - q"]}
{"goal":"r > z","proof":["not diff / 2 > 0 or z < z + diff / 2","diff / 2 > 0 = 0 < diff / 2","z + diff / 2 > z = z < z + diff / 2","0 < diff / 2 = (diff / 2).is_positive","not z + diff / 2 > z","not z < z + diff / 2","0 < diff / 2","not diff / 2 > 0","diff / 2 > 0"]}
{"goal":"not is_greatest(r.gt, q)","proof":["not is_greatest(r.gt, q) or not r > z or z <= q","z > q != z <= q","not r > z or z <= q","z <= q","not z > q or not z <= q"]}
{"goal":"false","proof":["q >= z != q < z","not q >= z or not q < z"]}
{"goal":"gt_has_no_greatest","proof":[]}
{"goal":"gt_is_dedekind_cut","proof":["not is_cut(r.gt) or not is_lower_interval(r.gt) or is_dedekind_cut(r.gt) or has_greatest(r.gt)"]}
{"goal":"exists(k0: ℚ -> Bool) { is_dedekind_cut(k0) }","proof":["let s0: ℚ satisfy { true }","not is_dedekind_cut(s0.gt)","is_dedekind_cut(s0.gt)"]}
{"goal":"lte_trans","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a <= b or not a.gt_rat(s0(a, c)) or b.gt_rat(s0(a, c))","not b <= c or not b.gt_rat(s0(a, c)) or c.gt_rat(s0(a, c))","not c.gt_rat(s0(a, c)) or a <= c","not c.gt_rat(s0(a, c))","a.gt_rat(s0(a, c)) or a <= c","a.gt_rat(s0(a, c))","not b.gt_rat(s0(a, c)) or c.gt_rat(s0(a, c))","not a.gt_rat(s0(a, c)) or b.gt_rat(s0(a, c))","not b.gt_rat(s0(a, c))","b.gt_rat(s0(a, c))"]}
{"goal":"lt_is_not_self","proof":["not a < a or a != a"]}
{"goal":"lte_self","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not r.gt_rat(s0(r, r)) or r <= r","not r.gt_rat(s0(r, r))","r.gt_rat(s0(r, r)) or r <= r"]}
{"goal":"is_lower_interval(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_lower_interval(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"z.gt_rat(r2)","proof":["not is_lower_interval(ℝ.new(z.gt_rat).gt_rat) or not r2 < r1 or not ℝ.new(z.gt_rat).gt_rat(r1) or ℝ.new(z.gt_rat).gt_rat(r2)","ℝ.new(z.gt_rat) = z","not ℝ.new(z.gt_rat).gt_rat(r2)","ℝ.new(z.gt_rat).gt_rat(r1)","is_lower_interval(ℝ.new(z.gt_rat).gt_rat)","not is_lower_interval(ℝ.new(z.gt_rat).gt_rat) or not ℝ.new(z.gt_rat).gt_rat(r1) or ℝ.new(z.gt_rat).gt_rat(r2)"]}
{"goal":"false","proof":[]}
{"goal":"z.gt_rat(r2)","proof":["not is_lower(ℝ.new(z.gt_rat).gt_rat) or not r2 < r1 or not ℝ.new(z.gt_rat).gt_rat(r1) or ℝ.new(z.gt_rat).gt_rat(r2)","ℝ.new(z.gt_rat) = z","not ℝ.new(z.gt_rat).gt_rat(r2)","ℝ.new(z.gt_rat).gt_rat(r1)","is_lower(ℝ.new(z.gt_rat).gt_rat)","not is_lower(ℝ.new(z.gt_rat).gt_rat) or not ℝ.new(z.gt_rat).gt_rat(r1) or ℝ.new(z.gt_rat).gt_rat(r2)"]}
{"goal":"false","proof":[]}
{"goal":"gt_rat_sorts","proof":["not r2 <= r1 or r2 < r1 or r2 = r1","r2 <= r1 or r1 <= r2","not r2 <= r1","r2 <= r1"]}
{"goal":"exists(k0: ℚ) { a.gt_rat(k0) and not b.gt_rat(k0) }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, b)) or b.gt_rat(s0(a, b))","not b.gt_rat(s0(a, b)) or a <= b","a.gt_rat(s0(a, b)) or a <= b","a.gt_rat(s0(a, b))","not b.gt_rat(s0(a, b))","b.gt_rat(s0(a, b))"]}
{"goal":"r2 < r1","proof":["not b.gt_rat(r2) or b.gt_rat(r1) or r2 <= r1","not r2 <= r1 or r2 < r1 or r2 = r1","not r2 <= r1 or r2 = r1","not b.gt_rat(r2) or r2 <= r1","r2 <= r1","r2 = r1"]}
{"goal":"a.gt_rat(r2)","proof":["not a.gt_rat(r1) or a.gt_rat(r2) or r1 <= r2","r1 > r2 != r1 <= r2","r1 > r2 = r2 < r1","not a.gt_rat(r1) or r1 <= r2","r1 <= r2","r1 > r2","not r1 > r2 or not r1 <= r2"]}
{"goal":"b <= a","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not b.gt_rat(s0(b, a)) or a.gt_rat(s0(b, a))","not a.gt_rat(s0(b, a)) or b <= a","not a.gt_rat(s0(b, a))","b.gt_rat(s0(b, a)) or b <= a","not b.gt_rat(s0(b, a))","b.gt_rat(s0(b, a))"]}
{"goal":"lte_or_gte","proof":[]}
{"goal":"b.gt_rat(r)","proof":["not a <= b or not a.gt_rat(r) or b.gt_rat(r)","not a <= b or not a.gt_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["not a.gt_rat(r)"]}
{"goal":"not a.gt_rat(r)","proof":[]}
{"goal":"not b.gt_rat(r)","proof":["not b <= a or not b.gt_rat(r) or a.gt_rat(r)","not b <= a or a.gt_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["b.gt_rat(r)"]}
{"goal":"a.gt_rat = b.gt_rat","proof":["let s0: ℚ satisfy { b.gt_rat(s0) != a.gt_rat(s0) }","b.gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"a = b","proof":["ℝ.new(a.gt_rat) = a","ℝ.new(b.gt_rat) = b"]}
{"goal":"lte_both_ways_imp_eq","proof":[]}
{"goal":"real_is_reflexive","proof":["let s0: (ℝ, ℝ) -> Bool -> ℝ satisfy { forall(x0: (ℝ, ℝ) -> Bool, x1: ℝ) { not is_reflexive[ℝ](x0) or x0(x1, x1) } and forall(x2: (ℝ, ℝ) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[ℝ](x2) } }","let s1: (ℝ, ℝ) -> ℚ satisfy { forall(x3: ℝ, x4: ℝ, x5: ℚ) { not x3 <= x4 or not x3.gt_rat(x5) or x4.gt_rat(x5) } and forall(x6: ℝ, x7: ℝ) { x6.gt_rat(s1(x6, x7)) or x6 <= x7 } and forall(x8: ℝ, x9: ℝ) { not x8.gt_rat(s1(x9, x8)) or x9 <= x8 } }","not s0(ℝ.lte).gt_rat(s1(s0(ℝ.lte), s0(ℝ.lte))) or s0(ℝ.lte) <= s0(ℝ.lte)","s0(ℝ.lte).gt_rat(s1(s0(ℝ.lte), s0(ℝ.lte))) or s0(ℝ.lte) <= s0(ℝ.lte)","not s0(ℝ.lte) <= s0(ℝ.lte) or is_reflexive[ℝ](ℝ.lte)","not s0(ℝ.lte) <= s0(ℝ.lte)","not s0(ℝ.lte).gt_rat(s1(s0(ℝ.lte), s0(ℝ.lte)))","s0(ℝ.lte).gt_rat(s1(s0(ℝ.lte), s0(ℝ.lte)))"]}
{"goal":"real_lte_is_transitive","proof":["let (s0: (ℝ, ℝ) -> Bool -> ℝ, s1: (ℝ, ℝ) -> Bool -> ℝ, s2: (ℝ, ℝ) -> Bool -> ℝ) satisfy { forall(x0: (ℝ, ℝ) -> Bool, x1: ℝ, x2: ℝ, x3: ℝ) { not is_transitive[ℝ](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (ℝ, ℝ) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[ℝ](x4) } and forall(x5: (ℝ, ℝ) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[ℝ](x5) } and forall(x6: (ℝ, ℝ) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[ℝ](x6) } }","not s0(ℝ.lte) <= s1(ℝ.lte) or not s1(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat) or s0(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat)","not s0(ℝ.lte) <= s2(ℝ.lte) or is_transitive[ℝ](ℝ.lte)","not s0(ℝ.lte) <= s2(ℝ.lte)","s1(ℝ.lte) <= s2(ℝ.lte) or is_transitive[ℝ](ℝ.lte)","s1(ℝ.lte) <= s2(ℝ.lte)","s0(ℝ.lte) <= s1(ℝ.lte) or is_transitive[ℝ](ℝ.lte)","s0(ℝ.lte) <= s1(ℝ.lte)","ℝ.new(s2(ℝ.lte).gt_rat) = s2(ℝ.lte)","s1(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat)","not s0(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat)","not s1(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat) or s0(ℝ.lte) <= ℝ.new(s2(ℝ.lte).gt_rat)"]}
{"goal":"real_is_antisymmetric","proof":["let (s0: (ℝ, ℝ) -> Bool -> ℝ, s1: (ℝ, ℝ) -> Bool -> ℝ) satisfy { forall(x0: (ℝ, ℝ) -> Bool, x1: ℝ, x2: ℝ) { not is_antisymmetric[ℝ](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (ℝ, ℝ) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[ℝ](x3) } and forall(x4: (ℝ, ℝ) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[ℝ](x4) } and forall(x5: (ℝ, ℝ) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[ℝ](x5) } }","not s1(ℝ.lte) <= s0(ℝ.lte) or not s0(ℝ.lte) <= s1(ℝ.lte) or s1(ℝ.lte) = s0(ℝ.lte)","s1(ℝ.lte) <= s0(ℝ.lte) or is_antisymmetric[ℝ](ℝ.lte)","s1(ℝ.lte) <= s0(ℝ.lte)","s0(ℝ.lte) <= s1(ℝ.lte) or is_antisymmetric[ℝ](ℝ.lte)","s0(ℝ.lte) <= s1(ℝ.lte)","s1(ℝ.lte) != s0(ℝ.lte) or is_antisymmetric[ℝ](ℝ.lte)","s1(ℝ.lte) = s0(ℝ.lte)","s1(ℝ.lte) != s0(ℝ.lte)"]}
{"goal":"real_is_nonreflexive","proof":["let s0: (ℝ, ℝ) -> Bool -> ℝ satisfy { forall(x0: (ℝ, ℝ) -> Bool, x1: ℝ) { not is_nonreflexive[ℝ](x0) or not x0(x1, x1) } and forall(x2: (ℝ, ℝ) -> Bool) { x2(s0(x2), s0(x2)) or is_nonreflexive[ℝ](x2) } }","s0(ℝ.lt) < s0(ℝ.lt) or is_nonreflexive[ℝ](ℝ.lt)","s0(ℝ.lt) < s0(ℝ.lt)","not s0(ℝ.lt) < s0(ℝ.lt) or s0(ℝ.lt) != s0(ℝ.lt)"]}
{"goal":"x <= y","proof":["not y <= y","let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not y.gt_rat(s0(y, y)) or y <= y","y.gt_rat(s0(y, y)) or y <= y","not y.gt_rat(s0(y, y))","y.gt_rat(s0(y, y))"]}
{"goal":"lte_from[ℝ](ℝ.lt)(x, y)","proof":["y != x or lte_from(ℝ.lt, x, y)"]}
{"goal":"x <= y = lte_from[ℝ](ℝ.lt)(x, y)","proof":["not lte_from(ℝ.lt, x, y)"]}
{"goal":"x != y","proof":[]}
{"goal":"x < y","proof":["not x <= y or x < y or y = x"]}
{"goal":"lte_from[ℝ](ℝ.lt)(x, y)","proof":["not x < y or lte_from(ℝ.lt, x, y)"]}
{"goal":"x <= y","proof":["not lte_from(ℝ.lt, x, y) or y = x or x < y","not x < y or x <= y","x < y","not x < y"]}
{"goal":"x <= y = lte_from[ℝ](ℝ.lt)(x, y)","proof":["lte_from(ℝ.lt, x, y) or x <= y","x <= y","lte_from(ℝ.lt, x, y)","not lte_from(ℝ.lt, x, y)"]}
{"goal":"lte_is_lte_from_lt","proof":["let (s0: ℝ, s1: ℝ) satisfy { lte_from(ℝ.lt, s0, s1) != s0 <= s1 }","lte_from(ℝ.lt, s0, s1) = s0 <= s1"]}
{"goal":"real_is_acyclic","proof":["not is_antisymmetric[ℝ](lte_from[ℝ](ℝ.lt)) or not is_nonreflexive[ℝ](ℝ.lt) or is_acyclic[ℝ](ℝ.lt)","not is_antisymmetric[ℝ](lte_from[ℝ](ℝ.lt)) or not is_nonreflexive[ℝ](ℝ.lt)","not is_antisymmetric[ℝ](lte_from[ℝ](ℝ.lt))","not is_antisymmetric[ℝ](ℝ.lte)"]}
{"goal":"is_nonreflexive[ℝ](ℝ.lt)","proof":[]}
{"goal":"is_acyclic[ℝ](ℝ.lt)","proof":[]}
{"goal":"is_transitive[ℝ](lte_from[ℝ](ℝ.lt))","proof":["not is_transitive[ℝ](ℝ.lte)"]}
{"goal":"real_is_transitive","proof":["not is_nonreflexive[ℝ](ℝ.lt)"]}
{"goal":"is_acyclic[ℝ](ℝ.lt) and is_transitive[ℝ](ℝ.lt)","proof":["not is_acyclic[ℝ](ℝ.lt)"]}
{"goal":"forall(x0: ℝ, x1: ℝ) { Partial_Order.lt[ℝ](x0, x1) or Partial_Order.lt[ℝ](x1, x0) or x0 = x1 }","proof":["let (s0: ℝ, s1: ℝ) satisfy { not s0 < s1 and not s1 < s0 and s1 != s0 }","not s0 <= s1 or s0 < s1 or s1 = s0","not s1 <= s0 or s1 < s0 or s1 = s0","not s1 <= s0","not s0 <= s1","s0 <= s1 or s1 <= s0"]}
{"goal":"gt_iff_from_rat_gt","proof":["not is_dedekind_cut(r1.gt) or ℝ.new(r1.gt).gt_rat(r2) = r1 > r2","ℝ.new(r1.gt) = ℝ.from_rat(r1)","is_dedekind_cut(r1.gt)","ℝ.new(r1.gt).gt_rat(r2) != r1 > r2"]}
{"goal":"r > r","proof":["ℝ.from_rat(r).gt_rat(r) = r > r"]}
{"goal":"false","proof":["not r < r or not r < r","r > r = r < r","r < r"]}
{"goal":"not_gt_rat_self","proof":[]}
{"goal":"not ℚ.0 > ℚ.0","proof":["let s0: ℚ -> ℚ satisfy { forall(x0: ℚ) { not x0 > ℚ.0 or s0(x0) > ℚ.0 } and forall(x1: ℚ) { not x1 > ℚ.0 or s0(x1) < x1 } }","not ℚ.0 > ℚ.0 or s0(ℚ.0) < ℚ.0","s0(ℚ.0) < ℚ.0","not ℚ.0 > ℚ.0 or s0(ℚ.0) > ℚ.0","s0(ℚ.0) > ℚ.0","not s0(ℚ.0) > ℚ.0 or not s0(ℚ.0) < ℚ.0"]}
{"goal":"not ℝ.from_rat(ℚ.0).gt_rat(ℚ.0)","proof":["ℝ.from_rat(ℚ.0).gt_rat(ℚ.0) = ℚ.0 > ℚ.0"]}
{"goal":"not ℝ.from_rat(ℚ.0).is_positive","proof":["ℝ.from_rat(ℚ.0).gt_rat(ℚ.0) = ℝ.from_rat(ℚ.0).is_positive"]}
{"goal":"0 = ℝ.from_rat(ℚ.0)","proof":[]}
{"goal":"zero_not_positive","proof":["ℝ.from_rat(ℚ.0).is_positive"]}
{"goal":"gte_self","proof":["r <= r or r <= r","r >= r = r <= r","not r <= r"]}
{"goal":"q < r","proof":["ℝ.from_rat(r).gt_rat(q) = r > q","r > q","r > q = q < r"]}
{"goal":"a.gt_rat(q)","proof":["not a.gt_rat(r) or a.gt_rat(q) or r <= q","ℝ.from_rat(r).gt_rat(q) = r > q","r > q","r > q != r <= q","not a.gt_rat(r) or r <= q","r <= q","not r > q or not r <= q"]}
{"goal":"ℝ.from_rat(r) <= a","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not ℝ.from_rat(r).gt_rat(s0(ℝ.from_rat(r), a)) or a.gt_rat(s0(ℝ.from_rat(r), a))","not a.gt_rat(s0(ℝ.from_rat(r), a)) or ℝ.from_rat(r) <= a","ℝ.from_rat(r).gt_rat(s0(ℝ.from_rat(r), a)) or ℝ.from_rat(r) <= a","not a.gt_rat(s0(ℝ.from_rat(r), a))","ℝ.from_rat(r).gt_rat(s0(ℝ.from_rat(r), a))","not ℝ.from_rat(r).gt_rat(s0(ℝ.from_rat(r), a))"]}
{"goal":"ℝ.from_rat(r).gt_rat(r)","proof":["not a.gt_rat(r)"]}
{"goal":"false","proof":["ℝ.from_rat(r).gt_rat(r) = r > r","r > r","not r < r or not r < r","r > r = r < r","r < r"]}
{"goal":"ℝ.from_rat(r) != a","proof":[]}
{"goal":"gt_rat_imp_gt_from_rat","proof":["not ℝ.from_rat(r) <= a or ℝ.from_rat(r) < a or ℝ.from_rat(r) = a","a > ℝ.from_rat(r) = ℝ.from_rat(r) < a","ℝ.from_rat(r) < a","not ℝ.from_rat(r) < a"]}
{"goal":"not a <= ℝ.from_rat(r)","proof":["not a <= ℝ.from_rat(r) or not ℝ.from_rat(r) <= a or ℝ.from_rat(r) = a","a > ℝ.from_rat(r) = ℝ.from_rat(r) < a","ℝ.from_rat(r) < a","not ℝ.from_rat(r) < a or ℝ.from_rat(r) <= a","not ℝ.from_rat(r) < a or ℝ.from_rat(r) != a","ℝ.from_rat(r) != a","ℝ.from_rat(r) <= a","not ℝ.from_rat(r) <= a"]}
{"goal":"exists(k0: ℚ) { a.gt_rat(k0) and not ℝ.from_rat(r).gt_rat(k0) }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, ℝ.from_rat(r))) or ℝ.from_rat(r).gt_rat(s0(a, ℝ.from_rat(r)))","not ℝ.from_rat(r).gt_rat(s0(a, ℝ.from_rat(r))) or a <= ℝ.from_rat(r)","a.gt_rat(s0(a, ℝ.from_rat(r))) or a <= ℝ.from_rat(r)","a.gt_rat(s0(a, ℝ.from_rat(r)))","not ℝ.from_rat(r).gt_rat(s0(a, ℝ.from_rat(r)))","ℝ.from_rat(r).gt_rat(s0(a, ℝ.from_rat(r)))"]}
{"goal":"not r > r2","proof":["ℝ.from_rat(r).gt_rat(r2) = r > r2"]}
{"goal":"r <= r2","proof":["not r2 <= r or r2 < r or r2 = r","r2 <= r or r <= r2","r2 <= r","r > r2 = r2 < r","not r2 < r","r2 = r"]}
{"goal":"is_lower_interval(a.gt_rat)","proof":["not is_dedekind_cut(a.gt_rat) or is_lower_interval(a.gt_rat)","not is_dedekind_cut(a.gt_rat)","is_dedekind_cut(a.gt_rat)"]}
{"goal":"a.gt_rat(r)","proof":["not a.gt_rat(r2) or a.gt_rat(r) or r2 <= r","not r2 <= r or r2 < r or r2 = r","r > r2 = r2 < r","not r2 < r","not a.gt_rat(r2) or r2 <= r","r2 <= r","r2 = r"]}
{"goal":"gt_from_rat_imp_gt_rat","proof":[]}
{"goal":"a > b implies ℝ.from_rat(a) > ℝ.from_rat(b)","proof":["not ℝ.from_rat(a).gt_rat(b) or ℝ.from_rat(a) > ℝ.from_rat(b)","not ℝ.from_rat(a).gt_rat(b)","ℝ.from_rat(a).gt_rat(b) = a > b"]}
{"goal":"rat_gt_iff_from_rat_gt","proof":["ℝ.from_rat(a) > ℝ.from_rat(b) or a > b","not ℝ.from_rat(a) > ℝ.from_rat(b) or not a > b","not a > b","ℝ.from_rat(a) > ℝ.from_rat(b)","not ℝ.from_rat(a) > ℝ.from_rat(b) or ℝ.from_rat(a).gt_rat(b)","ℝ.from_rat(a).gt_rat(b) = a > b","ℝ.from_rat(a).gt_rat(b)","not ℝ.from_rat(a).gt_rat(b)"]}
{"goal":"a <= b implies ℝ.from_rat(a) <= ℝ.from_rat(b)","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a <= b or not s0(ℝ.from_rat(a), ℝ.from_rat(b)) < a or s0(ℝ.from_rat(a), ℝ.from_rat(b)) < b","not ℝ.from_rat(b).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b))) or ℝ.from_rat(a) <= ℝ.from_rat(b)","ℝ.from_rat(a).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b))) or ℝ.from_rat(a) <= ℝ.from_rat(b)","ℝ.from_rat(a).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b))) = a > s0(ℝ.from_rat(a), ℝ.from_rat(b))","ℝ.from_rat(b).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b))) = b > s0(ℝ.from_rat(a), ℝ.from_rat(b))","a > s0(ℝ.from_rat(a), ℝ.from_rat(b)) = s0(ℝ.from_rat(a), ℝ.from_rat(b)) < a","b > s0(ℝ.from_rat(a), ℝ.from_rat(b)) = s0(ℝ.from_rat(a), ℝ.from_rat(b)) < b","ℝ.from_rat(a).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b)))","not ℝ.from_rat(b).gt_rat(s0(ℝ.from_rat(a), ℝ.from_rat(b)))","not b > s0(ℝ.from_rat(a), ℝ.from_rat(b))","a > s0(ℝ.from_rat(a), ℝ.from_rat(b))","s0(ℝ.from_rat(a), ℝ.from_rat(b)) < a","not s0(ℝ.from_rat(a), ℝ.from_rat(b)) < b","not s0(ℝ.from_rat(a), ℝ.from_rat(b)) < a or s0(ℝ.from_rat(a), ℝ.from_rat(b)) < b"]}
{"goal":"rat_lte_iff_from_rat_lte","proof":["ℝ.from_rat(a) <= ℝ.from_rat(b) or a <= b","not ℝ.from_rat(a) <= ℝ.from_rat(b) or not a <= b","not a <= b","ℝ.from_rat(a) <= ℝ.from_rat(b)","not ℝ.from_rat(a) <= ℝ.from_rat(b) or not ℝ.from_rat(a).gt_rat(b) or ℝ.from_rat(b).gt_rat(b)","ℝ.from_rat(a).gt_rat(b) = a > b","a > b != a <= b","not ℝ.from_rat(b).gt_rat(b)","a > b or a <= b","a > b","not ℝ.from_rat(a).gt_rat(b) or ℝ.from_rat(b).gt_rat(b)","ℝ.from_rat(a).gt_rat(b)","not ℝ.from_rat(a).gt_rat(b)"]}
{"goal":"ℝ.from_rat(q1) <= ℝ.from_rat(q2)","proof":["not ℝ.from_rat(q2) <= ℝ.from_rat(q2)","let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not ℝ.from_rat(q2).gt_rat(s0(ℝ.from_rat(q2), ℝ.from_rat(q2))) or ℝ.from_rat(q2) <= ℝ.from_rat(q2)","ℝ.from_rat(q2).gt_rat(s0(ℝ.from_rat(q2), ℝ.from_rat(q2))) or ℝ.from_rat(q2) <= ℝ.from_rat(q2)","not ℝ.from_rat(q2).gt_rat(s0(ℝ.from_rat(q2), ℝ.from_rat(q2)))","ℝ.from_rat(q2).gt_rat(s0(ℝ.from_rat(q2), ℝ.from_rat(q2)))"]}
{"goal":"ℝ.from_rat(q2) >= ℝ.from_rat(q1)","proof":["not ℝ.from_rat(q1) >= ℝ.from_rat(q1)","ℝ.from_rat(q1) <= ℝ.from_rat(q1)","ℝ.from_rat(q1) >= ℝ.from_rat(q1) = ℝ.from_rat(q1) <= ℝ.from_rat(q1)"]}
{"goal":"q1 <= q2","proof":["ℝ.from_rat(q1) <= ℝ.from_rat(q2) = q1 <= q2"]}
{"goal":"q2 >= q1","proof":["not q1 <= q2 or q1 < q2 or q2 = q1","not q2 > q1 or q2 >= q1","not q2 > q1","q2 > q1 = q1 < q2","not q1 < q2","q2 = q1","q2 != q1 or q2 >= q1"]}
{"goal":"from_rat_eq","proof":["ℝ.from_rat(q1) > ℝ.from_rat(q2) = q1 > q2","ℝ.from_rat(q2) > ℝ.from_rat(q1) = q2 > q1","not q2 >= q1 or q2 > q1 or q2 = q1","q2 > q1","q1 > q2 != q1 <= q2","not q1 > q2 or not q1 <= q2","not q1 > q2"]}
{"goal":"a.is_positive","proof":[]}
{"goal":"a.gt_rat(ℚ.0)","proof":["a.gt_rat(ℚ.0) = a.is_positive"]}
{"goal":"a > ℝ.from_rat(ℚ.0)","proof":["not a.gt_rat(ℚ.0) or a > ℝ.from_rat(ℚ.0)"]}
{"goal":"pos_gt_zero","proof":[]}
{"goal":"a > 0","proof":[]}
{"goal":"a > ℝ.from_rat(ℚ.0)","proof":[]}
{"goal":"a.gt_rat(ℚ.0)","proof":["not a > ℝ.from_rat(ℚ.0) or a.gt_rat(ℚ.0)"]}
{"goal":"a.is_positive","proof":["a.gt_rat(ℚ.0) = a.is_positive"]}
{"goal":"gt_zero_imp_pos","proof":[]}
{"goal":"0 <= a","proof":["not a <= 0 or a < 0 or 0 = a","let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(0, a)) or 0 <= a","not a.gt_rat(s0(0, a))","0.gt_rat(s0(0, a)) or 0 <= a","0.gt_rat(s0(0, a))","a <= 0 or 0 <= a","a <= 0","0 = a"]}
{"goal":"false","proof":["0.is_negative","not 0.is_negative or 0 != 0"]}
{"goal":"a > 0","proof":["not 0 <= a or 0 < a or 0 = a","a > 0 = 0 < a","0 < a","not 0 < a"]}
{"goal":"a.is_positive","proof":["not a > 0 or a.is_positive"]}
{"goal":"false","proof":["not a.is_negative or not a.is_positive"]}
{"goal":"neg_lt_zero","proof":[]}
{"goal":"a.is_positive","proof":["0 > a = a < 0","a.is_negative or a.is_positive or 0 = a","0 = a","not a > 0 or a.is_positive","not a > 0"]}
{"goal":"a > 0","proof":["not a.is_positive or a > 0"]}
{"goal":"not is_acyclic[ℝ](ℝ.lt)","proof":["not is_acyclic[ℝ](ℝ.lt) or not 0 < a or not a < 0","not 0 < a","a > 0 = 0 < a"]}
{"goal":"false","proof":[]}
{"goal":"lt_zero_imp_neg","proof":[]}
{"goal":"a <= 0 implies not a.is_positive","proof":["not a <= 0 or a < 0 or 0 = a","a > 0 = 0 < a","not a < 0 or a.is_negative","not a.is_positive or a > 0","a > 0","0 < a","not 0 < a or 0 != a","not a.is_negative or not a.is_positive","not a.is_negative","not a < 0","0 != a","0 = a"]}
{"goal":"lte_zero_iff_non_pos","proof":["not a <= 0 or a.is_positive","not a.is_positive or a <= 0","not a.is_positive","not a <= 0","not a < 0 or a <= 0","not a < 0","a.is_negative or a.is_positive or 0 = a","not a.is_negative or a < 0","a <= a","a.is_negative or 0 = a","not a.is_negative","0 = a"]}
{"goal":"a >= 0 implies not a.is_negative","proof":["not a <= 0 or not 0 <= a or 0 = a","a >= 0 = 0 <= a","0 <= a","not a < 0 or a <= 0","not a.is_negative or a < 0","a < 0","not a.is_negative or 0 != a","0 != a","a <= 0","not a <= 0"]}
{"goal":"gte_zero_iff_non_neg","proof":["not a >= 0 or a.is_negative","not a.is_negative or a >= 0","not a.is_negative","not a >= 0","not a <= 0 or a < 0 or 0 = a","a <= 0 or 0 <= a","a >= 0 = 0 <= a","not 0 <= a","not a < 0 or a.is_negative","not a < 0","a >= a","a <= 0","0 = a"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, r)) or not z1.gt_rat(s0(z1, z2, r)) or s0(z1, z2, r) + s1(z1, z2, r) != r","not add_gt(z1, z2, r) or s0(z1, z2, r) + s1(z1, z2, r) = r","not add_gt(z1, z2, r) or z2.gt_rat(s1(z1, z2, r))","not add_gt(z1, z2, r) or z1.gt_rat(s0(z1, z2, r))","z1.gt_rat(s0(z1, z2, r))","z2.gt_rat(s1(z1, z2, r))","s0(z1, z2, r) + s1(z1, z2, r) = r"]}
{"goal":"add_gt(z2, z1, r2 + r1)","proof":["not ℝ.new(z2.gt_rat).gt_rat(r2) or not z1.gt_rat(r1) or r2 + r1 != r2 + r1 or add_gt(ℝ.new(z2.gt_rat), z1, r2 + r1)","ℝ.new(z2.gt_rat) = z2","not add_gt(ℝ.new(z2.gt_rat), z1, r2 + r1)","ℝ.new(z2.gt_rat).gt_rat(r2)","not ℝ.new(z2.gt_rat).gt_rat(r2) or not z1.gt_rat(r1) or add_gt(ℝ.new(z2.gt_rat), z1, r2 + r1)"]}
{"goal":"add_gt_symm","proof":["r2 + r1 = r1 + r2"]}
{"goal":"is_cut(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_cut(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists_lesser_rat","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not is_cut(x0) or x0(s0(x0)) } and forall(x1: ℚ -> Bool) { not is_cut(x1) or not x1(s1(x1)) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not x2(x3) or is_cut(x2) or x2(x4) } }","not z.gt_rat(s0(z.gt_rat))","not is_cut(z.gt_rat) or z.gt_rat(s0(z.gt_rat))"]}
{"goal":"is_cut(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_cut(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists_gte_rat","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not is_cut(x0) or x0(s0(x0)) } and forall(x1: ℚ -> Bool) { not is_cut(x1) or not x1(s1(x1)) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not x2(x3) or is_cut(x2) or x2(x4) } }","z.gt_rat(s1(z.gt_rat))","not is_cut(z.gt_rat) or not z.gt_rat(s1(z.gt_rat))"]}
{"goal":"exists(k0: ℚ) { z1.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0.gt_rat(s0(x0)) } }","not z1.gt_rat(s0(z1))","z1.gt_rat(s0(z1))"]}
{"goal":"exists(k0: ℚ) { z2.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0.gt_rat(s0(x0)) } }","not z2.gt_rat(s0(z2))","z2.gt_rat(s0(z2))"]}
{"goal":"add_gt(z1, z2, lower1 + lower2)","proof":["not ℝ.new(z1.gt_rat).gt_rat(lower1) or not z2.gt_rat(lower2) or lower1 + lower2 != lower1 + lower2 or add_gt(ℝ.new(z1.gt_rat), z2, lower1 + lower2)","ℝ.new(z1.gt_rat) = z1","not add_gt(ℝ.new(z1.gt_rat), z2, lower1 + lower2)","ℝ.new(z1.gt_rat).gt_rat(lower1)","not ℝ.new(z1.gt_rat).gt_rat(lower1) or not z2.gt_rat(lower2) or add_gt(ℝ.new(z1.gt_rat), z2, lower1 + lower2)"]}
{"goal":"exists(k0: ℚ) { not z1.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.gt_rat(s0(x0)) } }","z1.gt_rat(s0(z1))","not z1.gt_rat(s0(z1))"]}
{"goal":"exists(k0: ℚ) { not z2.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.gt_rat(s0(x0)) } }","z2.gt_rat(s0(z2))","not z2.gt_rat(s0(z2))"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and upper1 + upper2 = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) != upper1 + upper2 or not z2.gt_rat(s1(z1, z2, upper1 + upper2)) or not z1.gt_rat(s0(z1, z2, upper1 + upper2))","not add_gt(z1, z2, upper1 + upper2) or s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) = upper1 + upper2","not add_gt(z1, z2, upper1 + upper2) or z2.gt_rat(s1(z1, z2, upper1 + upper2))","not add_gt(z1, z2, upper1 + upper2) or z1.gt_rat(s0(z1, z2, upper1 + upper2))","z1.gt_rat(s0(z1, z2, upper1 + upper2))","z2.gt_rat(s1(z1, z2, upper1 + upper2))","s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) = upper1 + upper2"]}
{"goal":"f1 < upper1","proof":["not z1.gt_rat(f1) or z1.gt_rat(upper1) or f1 <= upper1","not f1 <= upper1 or f1 < upper1 or f1 = upper1","not f1 <= upper1 or f1 = upper1","not z1.gt_rat(f1) or f1 <= upper1","f1 <= upper1","f1 = upper1"]}
{"goal":"f2 < upper2","proof":["not z2.gt_rat(f2) or z2.gt_rat(upper2) or f2 <= upper2","not f2 <= upper2 or f2 < upper2 or f2 = upper2","not f2 <= upper2 or f2 = upper2","not z2.gt_rat(f2) or f2 <= upper2","f2 <= upper2","f2 = upper2"]}
{"goal":"f1 + f2 < upper1 + upper2","proof":["not f1 < upper1 or not f2 < upper2 or f1 + f2 < upper1 + upper2"]}
{"goal":"false","proof":["not upper1 + upper2 < upper1 + upper2 or not upper1 + upper2 < upper1 + upper2","upper1 + upper2 < upper1 + upper2"]}
{"goal":"add_gt_is_cut","proof":["let s0: ℚ satisfy { true }","not add_gt(z1, z2, lower1 + lower2) or is_cut(add_gt(z1, z2)) or add_gt(z1, z2, s0)","not add_gt(z1, z2, s0) or is_cut(add_gt(z1, z2)) or add_gt(z1, z2, upper1 + upper2)","not add_gt(z1, z2, lower1 + lower2) or add_gt(z1, z2, s0)","not add_gt(z1, z2, s0) or add_gt(z1, z2, upper1 + upper2)","add_gt(z1, z2, s0)","not add_gt(z1, z2, s0)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and y = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x3: ℝ, x4: ℚ) { not add_gt(x0, x3, x4) or x0.gt_rat(s0(x0, x3, x4)) } and forall(x5: ℝ, x6: ℝ, x7: ℚ) { not add_gt(x5, x6, x7) or x6.gt_rat(s1(x5, x6, x7)) } and forall(x8: ℝ, x9: ℝ, x10: ℚ) { not add_gt(x8, x9, x10) or s0(x8, x9, x10) + s1(x8, x9, x10) = x10 } and forall(x11: ℝ, x12: ℚ, x13: ℝ, x14: ℚ, x15: ℚ) { not x11.gt_rat(x12) or not x13.gt_rat(x14) or x12 + x14 != x15 or add_gt(x11, x13, x15) } }","not z2.gt_rat(s1(z1, z2, y)) or not z1.gt_rat(s0(z1, z2, y)) or s0(z1, z2, y) + s1(z1, z2, y) != y","not add_gt(z1, z2, y) or s0(z1, z2, y) + s1(z1, z2, y) = y","not add_gt(z1, z2, y) or z2.gt_rat(s1(z1, z2, y))","not add_gt(z1, z2, y) or z1.gt_rat(s0(z1, z2, y))","z1.gt_rat(s0(z1, z2, y))","z2.gt_rat(s1(z1, z2, y))","s0(z1, z2, y) + s1(z1, z2, y) = y"]}
{"goal":"x1 + x2 = y1 + -(y - x) / ℚ.2 + (y2 + -(y - x) / ℚ.2)","proof":["-(y - x) ⋅ ℚ.2.reciprocal = -((y - x) ⋅ ℚ.2.reciprocal)","y1 + -(y - x) / ℚ.2 = y1 - (y - x) / ℚ.2","y2 + -(y - x) / ℚ.2 = y2 - (y - x) / ℚ.2","(y - x) ⋅ ℚ.2.reciprocal = (y - x) / ℚ.2","-(y - x) ⋅ ℚ.2.reciprocal = -(y - x) / ℚ.2","x2 + x1 = x1 + x2","y2 + -(y - x) / ℚ.2 + (y1 + -(y - x) / ℚ.2) = y1 + -(y - x) / ℚ.2 + (y2 + -(y - x) / ℚ.2)"]}
{"goal":"x1 + x2 = y1 + y2 + (-(y - x) / ℚ.2 + -(y - x) / ℚ.2)","proof":["-(y - x) / ℚ.2 + (y1 + (y2 + -(y - x) / ℚ.2)) = -(y - x) / ℚ.2 + y1 + (y2 + -(y - x) / ℚ.2)","y1 + (y2 + -(y - x) / ℚ.2) = y1 + y2 + -(y - x) / ℚ.2","y1 + y2 + (-(y - x) / ℚ.2 + -(y - x) / ℚ.2) = y1 + y2 + -(y - x) / ℚ.2 + -(y - x) / ℚ.2","-(y - x) / ℚ.2 + (y1 + y2 + -(y - x) / ℚ.2) = y1 + y2 + -(y - x) / ℚ.2 + -(y - x) / ℚ.2","y1 + -(y - x) / ℚ.2 = -(y - x) / ℚ.2 + y1"]}
{"goal":"x1 + x2 = y + -(y - x)","proof":["lib(rat.rat_base).reduce((y1 + y2).num ⋅ (-(y - x) / ℚ.2 + -(y - x) / ℚ.2).denom + (-(y - x) / ℚ.2 + -(y - x) / ℚ.2).num ⋅ (y1 + y2).denom, (y1 + y2).denom ⋅ (-(y - x) / ℚ.2 + -(y - x) / ℚ.2).denom) = y1 + y2 + (-(y - x) / ℚ.2 + -(y - x) / ℚ.2)","lib(rat.rat_base).reduce(y.num ⋅ (-(y - x)).denom + (-(y - x)).num ⋅ y.denom, y.denom ⋅ (-(y - x)).denom) = y + -(y - x)","-(y - x) / ℚ.2 + -(y - x) / ℚ.2 = -(y - x)"]}
{"goal":"x1 + x2 = x","proof":["-(y - x) = x - y","x - y + y = x","y + (x - y) = x - y + y","y + -(y - x) != x","y + (x - y) != x"]}
{"goal":"(y - x) / ℚ.2 > ℚ.0","proof":["not y - x > ℚ.0 or (y - x) / ℚ.2 > ℚ.0","not y - x > ℚ.0","y - x > ℚ.0 = y > x","not y > x","y > x = x < y"]}
{"goal":"y1 > x1","proof":["not (y - x) / ℚ.2 > ℚ.0 or y1 > y1 - (y - x) / ℚ.2","not y1 > y1 - (y - x) / ℚ.2"]}
{"goal":"y2 > x2","proof":["not (y - x) / ℚ.2 > ℚ.0 or y2 > y2 - (y - x) / ℚ.2","not y2 > y2 - (y - x) / ℚ.2"]}
{"goal":"z1.gt_rat(x1)","proof":["not z1.gt_rat(y1) or z1.gt_rat(x1) or y1 <= x1","y1 > x1 != y1 <= x1","not z1.gt_rat(y1) or y1 <= x1","y1 <= x1","not y1 > x1 or not y1 <= x1"]}
{"goal":"z2.gt_rat(x2)","proof":["not z2.gt_rat(y2) or z2.gt_rat(x2) or y2 <= x2","y2 > x2 != y2 <= x2","not z2.gt_rat(y2) or y2 <= x2","y2 <= x2","not y2 > x2 or not y2 <= x2"]}
{"goal":"add_gt(z1, z2, x)","proof":["not z1.gt_rat(x1) or not z2.gt_rat(x2) or x1 + x2 != x or add_gt(z1, z2, x)","not z2.gt_rat(x2) or not z1.gt_rat(x1) or x1 + x2 != x"]}
{"goal":"add_gt_is_lower_interval","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool, x1: ℚ, x2: ℚ) { not is_lower_interval(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: ℚ -> Bool) { is_lower_interval(x3) or x3(s1(x3)) } and forall(x4: ℚ -> Bool) { s0(x4) < s1(x4) or is_lower_interval(x4) } and forall(x5: ℚ -> Bool) { not x5(s0(x5)) or is_lower_interval(x5) } }","not add_gt(z1, z2, s1(add_gt(z1, z2))) or not s0(add_gt(z1, z2)) < s1(add_gt(z1, z2)) or add_gt(z1, z2, s0(add_gt(z1, z2)))","s0(add_gt(z1, z2)) < s1(add_gt(z1, z2)) or is_lower_interval(add_gt(z1, z2))","not add_gt(z1, z2, s0(add_gt(z1, z2))) or is_lower_interval(add_gt(z1, z2))","is_lower_interval(add_gt(z1, z2)) or add_gt(z1, z2, s1(add_gt(z1, z2)))","add_gt(z1, z2, s1(add_gt(z1, z2)))","not add_gt(z1, z2, s0(add_gt(z1, z2)))","s0(add_gt(z1, z2)) < s1(add_gt(z1, z2))"]}
{"goal":"exists(k0: ℚ) { is_greatest(add_gt(z1, z2), k0) }","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(add_gt(z1, z2), s0(add_gt(z1, z2)))","not has_greatest(add_gt(z1, z2)) or is_greatest(add_gt(z1, z2), s0(add_gt(z1, z2)))"]}
{"goal":"add_gt(z1, z2, q)","proof":["not is_greatest(add_gt(z1, z2), q) or add_gt(z1, z2, q)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and q = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, q)) or not z1.gt_rat(s0(z1, z2, q)) or s0(z1, z2, q) + s1(z1, z2, q) != q","not add_gt(z1, z2, q) or s0(z1, z2, q) + s1(z1, z2, q) = q","not add_gt(z1, z2, q) or z2.gt_rat(s1(z1, z2, q))","not add_gt(z1, z2, q) or z1.gt_rat(s0(z1, z2, q))","z1.gt_rat(s0(z1, z2, q))","z2.gt_rat(s1(z1, z2, q))","s0(z1, z2, q) + s1(z1, z2, q) = q"]}
{"goal":"not is_greatest(z1.gt_rat, f1)","proof":["not is_greatest(z1.gt_rat, f1) or has_greatest(z1.gt_rat)","has_greatest(z1.gt_rat)","not is_dedekind_cut(z1.gt_rat) or not has_greatest(z1.gt_rat)","is_dedekind_cut(z1.gt_rat)"]}
{"goal":"exists(k0: ℚ) { z1.gt_rat(k0) and not k0 <= f1 }","proof":["let s0: (ℚ -> Bool, ℚ) -> ℚ satisfy { forall(x0: ℚ -> Bool, x1: ℚ) { not is_greatest(x0, x1) or x0(x1) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not is_greatest(x2, x3) or not x2(x4) or x4 <= x3 } and forall(x5: ℚ -> Bool, x6: ℚ) { not x5(x6) or is_greatest(x5, x6) or x5(s0(x5, x6)) } and forall(x7: ℚ -> Bool, x8: ℚ) { not s0(x7, x8) <= x8 or not x7(x8) or is_greatest(x7, x8) } }","not z1.gt_rat(s0(z1.gt_rat, f1)) or s0(z1.gt_rat, f1) <= f1","not s0(z1.gt_rat, f1) <= f1 or not z1.gt_rat(f1) or is_greatest(z1.gt_rat, f1)","not z1.gt_rat(f1) or is_greatest(z1.gt_rat, f1) or z1.gt_rat(s0(z1.gt_rat, f1))","z1.gt_rat(s0(z1.gt_rat, f1))","not s0(z1.gt_rat, f1) <= f1","s0(z1.gt_rat, f1) <= f1"]}
{"goal":"f1 < g1","proof":["not f1 <= g1 or f1 < g1 or g1 = f1","g1 <= f1 or f1 <= g1","g1 != f1 or g1 <= f1","g1 != f1","f1 <= g1","not f1 <= g1"]}
{"goal":"f1 + f2 < g1 + f2","proof":["not f1 < g1 or f1 + f2 < g1 + f2"]}
{"goal":"add_gt(z1, z2, g1 + f2)","proof":["not ℝ.new(z1.gt_rat).gt_rat(g1) or not z2.gt_rat(f2) or g1 + f2 != g1 + f2 or add_gt(ℝ.new(z1.gt_rat), z2, g1 + f2)","ℝ.new(z1.gt_rat) = z1","not add_gt(ℝ.new(z1.gt_rat), z2, g1 + f2)","ℝ.new(z1.gt_rat).gt_rat(g1)","not ℝ.new(z1.gt_rat).gt_rat(g1) or not z2.gt_rat(f2) or add_gt(ℝ.new(z1.gt_rat), z2, g1 + f2)"]}
{"goal":"q < g1 + f2","proof":["not f1 + f2 < g1 + f2"]}
{"goal":"not g1 + f2 <= q","proof":["not g1 + f2 <= q or not q < g1 + f2 or q < q","not q < q","not q < g1 + f2 or q < q"]}
{"goal":"not is_greatest(add_gt(z1, z2), q)","proof":["not is_greatest(add_gt(z1, z2), q) or not add_gt(z1, z2, g1 + f2) or g1 + f2 <= q","not add_gt(z1, z2, g1 + f2) or g1 + f2 <= q"]}
{"goal":"false","proof":[]}
{"goal":"add_gt_has_no_greatest","proof":[]}
{"goal":"add_gt_is_dedekind_cut","proof":["not is_cut(add_gt(z1, z2)) or not is_lower_interval(add_gt(z1, z2)) or is_dedekind_cut(add_gt(z1, z2)) or has_greatest(add_gt(z1, z2))","not has_greatest(add_gt(z1, z2))","is_lower_interval(add_gt(z1, z2))","not is_cut(add_gt(z1, z2))","is_cut(add_gt(z1, z2))"]}
{"goal":"add_gt_rat","proof":["not z1.gt_rat(r1) or not z2.gt_rat(r2) or r1 + r2 != r1 + r2 or add_gt(z1, z2, r1 + r2)","not is_dedekind_cut(add_gt(z1, z2)) or ℝ.new(add_gt(z1, z2)).gt_rat(r1 + r2) = add_gt(z1, z2, r1 + r2)","ℝ.new(add_gt(z1, z2)) = z1 + z2","is_dedekind_cut(add_gt(z1, z2))","not ℝ.new(add_gt(z1, z2)).gt_rat(r1 + r2)","not is_dedekind_cut(add_gt(z1, z2)) or not add_gt(z1, z2, r1 + r2) or ℝ.new(add_gt(z1, z2)).gt_rat(r1 + r2)","r1 + r2 != r1 + r2 or not z1.gt_rat(r1) or add_gt(z1, z2, r1 + r2)","r1 + r2 != r1 + r2 or add_gt(z1, z2, r1 + r2)","not add_gt(z1, z2, r1 + r2)","add_gt(z1, z2, r1 + r2)"]}
{"goal":"add_gt(b, a, r)","proof":["not add_gt(a, b, r) or add_gt(b, a, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":["not add_gt(a, b, r)"]}
{"goal":"not add_gt(b, a, r)","proof":["not add_gt(b, a, r) or add_gt(a, b, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":["add_gt(b, a, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":[]}
{"goal":"add_gt(a, b) = add_gt(b, a)","proof":["let s0: ℚ satisfy { add_gt(b, a, s0) != add_gt(a, b, s0) }","add_gt(b, a, s0) = add_gt(a, b, s0)"]}
{"goal":"add_comm","proof":["ℝ.new(add_gt(a, b)) = a + b","ℝ.new(add_gt(b, a)) = b + a"]}
{"goal":"add_gt(z1 + z2, z3, q)","proof":["not is_dedekind_cut(add_gt(z1 + z2, z3)) or ℝ.new(add_gt(z1 + z2, z3)).gt_rat(q) = add_gt(z1 + z2, z3, q)","ℝ.new(add_gt(z1 + z2, z3)) = z1 + z2 + z3","is_dedekind_cut(add_gt(z1 + z2, z3))","not ℝ.new(add_gt(z1 + z2, z3)).gt_rat(q) or not is_dedekind_cut(add_gt(z1 + z2, z3)) or add_gt(z1 + z2, z3, q)","ℝ.new(add_gt(z1 + z2, z3)).gt_rat(q)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { (z1 + z2).gt_rat(k0) and z3.gt_rat(k1) and q = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not (z1 + z2).gt_rat(s0(z1 + z2, z3, q)) or not z3.gt_rat(s1(z1 + z2, z3, q)) or s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) != q","not add_gt(z1 + z2, z3, q) or s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) = q","not add_gt(z1 + z2, z3, q) or z3.gt_rat(s1(z1 + z2, z3, q))","not add_gt(z1 + z2, z3, q) or (z1 + z2).gt_rat(s0(z1 + z2, z3, q))","z3.gt_rat(s1(z1 + z2, z3, q))","(z1 + z2).gt_rat(s0(z1 + z2, z3, q))","s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) = q"]}
{"goal":"add_gt(z1, z2, r12)","proof":["not is_dedekind_cut(add_gt(z1, z2)) or ℝ.new(add_gt(z1, z2)).gt_rat(r12) = add_gt(z1, z2, r12)","ℝ.new(add_gt(z1, z2)) = z1 + z2","is_dedekind_cut(add_gt(z1, z2))","not ℝ.new(add_gt(z1, z2)).gt_rat(r12) or not is_dedekind_cut(add_gt(z1, z2)) or add_gt(z1, z2, r12)","ℝ.new(add_gt(z1, z2)).gt_rat(r12)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and r12 = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, r12)) or not z1.gt_rat(s0(z1, z2, r12)) or s0(z1, z2, r12) + s1(z1, z2, r12) != r12","not add_gt(z1, z2, r12) or s0(z1, z2, r12) + s1(z1, z2, r12) = r12","not add_gt(z1, z2, r12) or z2.gt_rat(s1(z1, z2, r12))","not add_gt(z1, z2, r12) or z1.gt_rat(s0(z1, z2, r12))","z1.gt_rat(s0(z1, z2, r12))","z2.gt_rat(s1(z1, z2, r12))","s0(z1, z2, r12) + s1(z1, z2, r12) = r12"]}
{"goal":"gt_rat_adding_three","proof":["let (s0: ℚ, s1: ℚ) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and s0 + s1 = r12 }","s0 + s1 + r3 != q or not z3.gt_rat(r3) or not z2.gt_rat(s1) or not z1.gt_rat(s0)","s0 + s1 + r3 != q or not z2.gt_rat(s1) or not z1.gt_rat(s0)","s0 + s1 + r3 = q"]}
{"goal":"exists(k0: ℚ, k1: ℚ, k2: ℚ) { z1.gt_rat(k0) and z2.gt_rat(k1) and z3.gt_rat(k2) and q = k0 + k1 + k2 }","proof":["let (s0: ℚ, s1: ℚ, s2: ℚ) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and z3.gt_rat(s2) and s0 + s1 + s2 = q }","s0 + s1 + s2 != q or not z3.gt_rat(s2) or not z2.gt_rat(s1) or not z1.gt_rat(s0)"]}
{"goal":"add_gt(z1, z2 + z3, r1 + r2 + r3)","proof":["not z1.gt_rat(r1) or not (z2 + z3).gt_rat(r2 + r3) or r1 + (r2 + r3) != r1 + r2 + r3 or add_gt(z1, z2 + z3, r1 + r2 + r3)","not z2.gt_rat(r2) or not z3.gt_rat(r3) or (z2 + z3).gt_rat(r2 + r3)","r1 + (r2 + r3) = r1 + r2 + r3","r1 + (r2 + r3) != r1 + r2 + r3 or not (z2 + z3).gt_rat(r2 + r3) or not z1.gt_rat(r1)","not (z2 + z3).gt_rat(r2 + r3)"]}
{"goal":"gt_rat_adding_three_converse","proof":["let (s0: ℚ, s1: ℚ, s2: ℚ) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and z3.gt_rat(s2) and s0 + s1 + s2 = q }","not (z1 + z2).gt_rat(s0 + s1) or not z3.gt_rat(s2) or (z1 + z2 + z3).gt_rat(s0 + s1 + s2)","not z1.gt_rat(s0) or not z2.gt_rat(s1) or (z1 + z2).gt_rat(s0 + s1)","not (z1 + z2 + z3).gt_rat(s0 + s1 + s2)","not z1.gt_rat(s0) or (z1 + z2).gt_rat(s0 + s1)","not (z1 + z2).gt_rat(s0 + s1)","(z1 + z2).gt_rat(s0 + s1)"]}
{"goal":"exists(k0: ℚ, k1: ℚ, k2: ℚ) { a.gt_rat(k0) and b.gt_rat(k1) and c.gt_rat(k2) and r = k0 + k1 + k2 }","proof":["let (s0: (ℝ, ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℝ, ℚ) -> ℚ, s2: (ℝ, ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℝ, x3: ℚ) { not (x0 + x1 + x2).gt_rat(x3) or x0.gt_rat(s0(x0, x1, x2, x3)) } and forall(x4: ℝ, x5: ℝ, x6: ℝ, x7: ℚ) { not (x4 + x5 + x6).gt_rat(x7) or x5.gt_rat(s1(x4, x5, x6, x7)) } and forall(x8: ℝ, x9: ℝ, x10: ℝ, x11: ℚ) { not (x8 + x9 + x10).gt_rat(x11) or x10.gt_rat(s2(x8, x9, x10, x11)) } and forall(x12: ℝ, x13: ℝ, x14: ℝ, x15: ℚ) { not (x12 + x13 + x14).gt_rat(x15) or s0(x12, x13, x14, x15) + s1(x12, x13, x14, x15) + s2(x12, x13, x14, x15) = x15 } }","s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) != r or not c.gt_rat(s2(a, b, c, r)) or not b.gt_rat(s1(a, b, c, r)) or not a.gt_rat(s0(a, b, c, r))","not (a + b + c).gt_rat(r) or c.gt_rat(s2(a, b, c, r))","not (a + b + c).gt_rat(r) or b.gt_rat(s1(a, b, c, r))","not (a + b + c).gt_rat(r) or a.gt_rat(s0(a, b, c, r))","not (a + b + c).gt_rat(r) or s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) = r","a.gt_rat(s0(a, b, c, r))","b.gt_rat(s1(a, b, c, r))","c.gt_rat(s2(a, b, c, r))","s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) = r"]}
{"goal":"(b + c).gt_rat(rb + rc)","proof":["not b.gt_rat(rb) or not c.gt_rat(rc) or (b + c).gt_rat(rb + rc)"]}
{"goal":"(a + (b + c)).gt_rat(r)","proof":["let (s0: ℚ, s1: ℚ, s2: ℚ) satisfy { a.gt_rat(s0) and b.gt_rat(s1) and c.gt_rat(s2) and s0 + s1 + s2 = r }","not a.gt_rat(s0) or not (b + c).gt_rat(s1 + s2) or (a + (b + c)).gt_rat(s0 + (s1 + s2))","not b.gt_rat(s1) or not c.gt_rat(s2) or (b + c).gt_rat(s1 + s2)","s0 + (s1 + s2) = s0 + s1 + s2","not (a + (b + c)).gt_rat(s0 + s1 + s2)","not b.gt_rat(s1) or (b + c).gt_rat(s1 + s2)","(b + c).gt_rat(s1 + s2)","not (b + c).gt_rat(s1 + s2) or (a + (b + c)).gt_rat(s0 + (s1 + s2))","not (a + (b + c)).gt_rat(s0 + (s1 + s2))","(a + (b + c)).gt_rat(s0 + (s1 + s2))"]}
{"goal":"(a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)","proof":["not (a + b + c).gt_rat(r)"]}
{"goal":"add_gt(a, b + c, r)","proof":["not is_dedekind_cut(add_gt(a, b + c)) or ℝ.new(add_gt(a, b + c)).gt_rat(r) = add_gt(a, b + c, r)","ℝ.new(add_gt(a, b + c)) = a + (b + c)","is_dedekind_cut(add_gt(a, b + c))","not ℝ.new(add_gt(a, b + c)).gt_rat(r) or not is_dedekind_cut(add_gt(a, b + c)) or add_gt(a, b + c, r)","ℝ.new(add_gt(a, b + c)).gt_rat(r)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { a.gt_rat(k0) and (b + c).gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not (b + c).gt_rat(s1(a, b + c, r)) or not a.gt_rat(s0(a, b + c, r)) or s0(a, b + c, r) + s1(a, b + c, r) != r","not add_gt(a, b + c, r) or s0(a, b + c, r) + s1(a, b + c, r) = r","not add_gt(a, b + c, r) or (b + c).gt_rat(s1(a, b + c, r))","not add_gt(a, b + c, r) or a.gt_rat(s0(a, b + c, r))","a.gt_rat(s0(a, b + c, r))","(b + c).gt_rat(s1(a, b + c, r))","s0(a, b + c, r) + s1(a, b + c, r) = r"]}
{"goal":"add_gt(b, c, rbc)","proof":["not is_dedekind_cut(add_gt(b, c)) or ℝ.new(add_gt(b, c)).gt_rat(rbc) = add_gt(b, c, rbc)","ℝ.new(add_gt(b, c)) = b + c","is_dedekind_cut(add_gt(b, c))","not ℝ.new(add_gt(b, c)).gt_rat(rbc) or not is_dedekind_cut(add_gt(b, c)) or add_gt(b, c, rbc)","ℝ.new(add_gt(b, c)).gt_rat(rbc)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { b.gt_rat(k0) and c.gt_rat(k1) and rbc = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not c.gt_rat(s1(b, c, rbc)) or not b.gt_rat(s0(b, c, rbc)) or s0(b, c, rbc) + s1(b, c, rbc) != rbc","not add_gt(b, c, rbc) or s0(b, c, rbc) + s1(b, c, rbc) = rbc","not add_gt(b, c, rbc) or c.gt_rat(s1(b, c, rbc))","not add_gt(b, c, rbc) or b.gt_rat(s0(b, c, rbc))","b.gt_rat(s0(b, c, rbc))","c.gt_rat(s1(b, c, rbc))","s0(b, c, rbc) + s1(b, c, rbc) = rbc"]}
{"goal":"r = ra + rb + rc","proof":["ra + (rb + rc) = ra + rb + rc"]}
{"goal":"false","proof":["not (a + b).gt_rat(ra + rb) or not c.gt_rat(rc) or (a + b + c).gt_rat(ra + rb + rc)","not a.gt_rat(ra) or not b.gt_rat(rb) or (a + b).gt_rat(ra + rb)","not (a + b).gt_rat(ra + rb) or (a + b + c).gt_rat(ra + rb + rc)","not a.gt_rat(ra) or (a + b).gt_rat(ra + rb)","(a + b).gt_rat(ra + rb)","not (a + b + c).gt_rat(ra + rb + rc)","(a + b + c).gt_rat(ra + rb + rc)"]}
{"goal":"(a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)","proof":["(a + (b + c)).gt_rat(r)"]}
{"goal":"(a + b + c).gt_rat = (a + (b + c)).gt_rat","proof":["let s0: ℚ satisfy { (a + (b + c)).gt_rat(s0) != (a + b + c).gt_rat(s0) }","(a + (b + c)).gt_rat(s0) = (a + b + c).gt_rat(s0)"]}
{"goal":"add_assoc","proof":["a + (b + c) = b + c + a","ℝ.new((a + b + c).gt_rat) = a + b + c","ℝ.new((b + c + a).gt_rat) = b + c + a"]}
{"goal":"gt_imp_not_lte","proof":["not a <= b or not b <= a or b = a","a > b = b < a","b < a","not b < a or b <= a","not b < a or b != a","b != a","b <= a","not b <= a"]}
{"goal":"not_lte_imp_gt","proof":["not b <= a or b < a or b = a","b <= a or a <= b","a > b = b < a","not b < a","not b <= a or b = a","a <= a","b <= a","b = a"]}
{"goal":"gte_imp_not_lt","proof":["not b > a or not b <= a","b > a = a < b","b > a","a >= b = b <= a","not b <= a","b <= a"]}
{"goal":"not_lt_imp_gte","proof":["b > a or b <= a","b > a = a < b","a >= b = b <= a","not b <= a","not b > a","b > a"]}
{"goal":"a != b","proof":["a < a","not a >= a or not a < a","not a >= a","a <= a or a <= a","a >= a = a <= a","not a <= a"]}
{"goal":"a.gt_rat != b.gt_rat","proof":["ℝ.new(a.gt_rat) = a","ℝ.new(b.gt_rat) = b"]}
{"goal":"exists(k0: ℚ) { a.gt_rat(k0) != b.gt_rat(k0) }","proof":["let s0: ℚ satisfy { b.gt_rat(s0) != a.gt_rat(s0) }","b.gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"not b.gt_rat(r)","proof":[]}
{"goal":"false","proof":["not a <= b or not a.gt_rat(r) or b.gt_rat(r)","not a < b or a <= b","a <= b","not a <= b or not a.gt_rat(r)"]}
{"goal":"not a.gt_rat(r)","proof":[]}
{"goal":"b.gt_rat(r)","proof":[]}
{"goal":"rat_separating","proof":["not b.gt_rat(r) or a.gt_rat(r)","a.gt_rat(r)"]}
{"goal":"not is_greatest(z.gt_rat, r1)","proof":["not is_greatest(z.gt_rat, r1) or has_greatest(z.gt_rat)","has_greatest(z.gt_rat)","not is_dedekind_cut(z.gt_rat) or not has_greatest(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists(k0: ℚ) { z.gt_rat(k0) and not k0 <= r1 }","proof":["let s0: (ℚ -> Bool, ℚ) -> ℚ satisfy { forall(x0: ℚ -> Bool, x1: ℚ) { not is_greatest(x0, x1) or x0(x1) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not is_greatest(x2, x3) or not x2(x4) or x4 <= x3 } and forall(x5: ℚ -> Bool, x6: ℚ) { not x5(x6) or is_greatest(x5, x6) or x5(s0(x5, x6)) } and forall(x7: ℚ -> Bool, x8: ℚ) { not s0(x7, x8) <= x8 or not x7(x8) or is_greatest(x7, x8) } }","not z.gt_rat(s0(z.gt_rat, r1)) or s0(z.gt_rat, r1) <= r1","not s0(z.gt_rat, r1) <= r1 or not z.gt_rat(r1) or is_greatest(z.gt_rat, r1)","not z.gt_rat(r1) or is_greatest(z.gt_rat, r1) or z.gt_rat(s0(z.gt_rat, r1))","z.gt_rat(s0(z.gt_rat, r1))","not s0(z.gt_rat, r1) <= r1","s0(z.gt_rat, r1) <= r1"]}
{"goal":"rat_between_rat_and_ℝ","proof":["let s0: ℚ satisfy { z.gt_rat(s0) and not s0 <= r1 }","not z.gt_rat(s0) or not r1 < s0","not r1 < s0","not r1 <= s0 or r1 < s0 or s0 = r1","s0 <= r1 or r1 <= s0","s0 != r1 or s0 <= r1","s0 != r1","r1 <= s0","not r1 <= s0"]}
{"goal":"exists(k0: ℚ) { b.gt_rat(k0) and not a.gt_rat(k0) }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not b.gt_rat(s0(a, b)) or a.gt_rat(s0(a, b))","not a.gt_rat(s0(a, b)) or not a < b","not a < b or b.gt_rat(s0(a, b))","b.gt_rat(s0(a, b))","not a.gt_rat(s0(a, b))","a.gt_rat(s0(a, b))"]}
{"goal":"not a > ℝ.from_rat(r1)","proof":["not a > ℝ.from_rat(r1) or a.gt_rat(r1)"]}
{"goal":"a <= ℝ.from_rat(r1)","proof":["a > ℝ.from_rat(r1) or a <= ℝ.from_rat(r1)"]}
{"goal":"exists(k0: ℚ) { b.gt_rat(k0) and r1 < k0 }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℝ, x1: ℚ) { not x0.gt_rat(x1) or x0.gt_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℚ) { not x2.gt_rat(x3) or x3 < s0(x2, x3) } }","not b.gt_rat(s0(b, r1)) or not r1 < s0(b, r1)","not b.gt_rat(r1) or r1 < s0(b, r1)","not b.gt_rat(r1) or b.gt_rat(s0(b, r1))","b.gt_rat(s0(b, r1))","r1 < s0(b, r1)","not r1 < s0(b, r1)"]}
{"goal":"a < ℝ.from_rat(r2)","proof":["not ℝ.from_rat(r2) <= a or not ℝ.from_rat(r2).gt_rat(r1) or a.gt_rat(r1)","ℝ.from_rat(r2).gt_rat(r1) = r2 > r1","a >= ℝ.from_rat(r2) or a < ℝ.from_rat(r2)","a >= ℝ.from_rat(r2)","a >= ℝ.from_rat(r2) = ℝ.from_rat(r2) <= a","ℝ.from_rat(r2) <= a","r2 > r1 = r1 < r2","r2 > r1","not ℝ.from_rat(r2) <= a or not ℝ.from_rat(r2).gt_rat(r1)","ℝ.from_rat(r2).gt_rat(r1)","not ℝ.from_rat(r2).gt_rat(r1)"]}
{"goal":"ℝ.from_rat(r2) < b","proof":["not b.gt_rat(r2) or b > ℝ.from_rat(r2)","b > ℝ.from_rat(r2) = ℝ.from_rat(r2) < b","b > ℝ.from_rat(r2)","not b > ℝ.from_rat(r2)"]}
{"goal":"rat_between_reals","proof":["not ℝ.from_rat(r2) < b or not a < ℝ.from_rat(r2)","not a < ℝ.from_rat(r2)"]}
{"goal":"b < a","proof":["a > b = b < a"]}
{"goal":"exists(k0: ℚ) { b < ℝ.from_rat(k0) and ℝ.from_rat(k0) < a }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not b < ℝ.from_rat(s0(b, a)) or not ℝ.from_rat(s0(b, a)) < a","not b < a or ℝ.from_rat(s0(b, a)) < a","not b < a or b < ℝ.from_rat(s0(b, a))","b < ℝ.from_rat(s0(b, a))","ℝ.from_rat(s0(b, a)) < a","not ℝ.from_rat(s0(b, a)) < a"]}
{"goal":"rat_between_reals_gt","proof":["let s0: ℚ satisfy { b < ℝ.from_rat(s0) and ℝ.from_rat(s0) < a }","not ℝ.from_rat(s0) > b or not a > ℝ.from_rat(s0)","a > ℝ.from_rat(s0) = ℝ.from_rat(s0) < a","ℝ.from_rat(s0) > b = b < ℝ.from_rat(s0)","ℝ.from_rat(s0) > b","a > ℝ.from_rat(s0)","not a > ℝ.from_rat(s0)"]}
{"goal":"add_gt_trans","proof":["not is_lower_interval(add_gt(ℝ.new(z1.gt_rat), z2)) or not r2 < r1 or not add_gt(ℝ.new(z1.gt_rat), z2, r1) or add_gt(ℝ.new(z1.gt_rat), z2, r2)","r1 > r2 = r2 < r1","r2 < r1","is_lower_interval(add_gt(ℝ.new(z1.gt_rat), z2))","ℝ.new(z1.gt_rat) = z1","not add_gt(ℝ.new(z1.gt_rat), z2, r2)","add_gt(ℝ.new(z1.gt_rat), z2, r1)","not is_lower_interval(add_gt(ℝ.new(z1.gt_rat), z2)) or not add_gt(ℝ.new(z1.gt_rat), z2, r1) or add_gt(ℝ.new(z1.gt_rat), z2, r2)","not add_gt(ℝ.new(z1.gt_rat), z2, r1) or add_gt(ℝ.new(z1.gt_rat), z2, r2)"]}
{"goal":"ℝ.new(add_gt(z1, z2)).gt_rat(r)","proof":["not is_dedekind_cut(add_gt(z1, z2)) or ℝ.new(add_gt(z1, z2)).gt_rat(r) = add_gt(z1, z2, r)","is_dedekind_cut(add_gt(z1, z2))","not is_dedekind_cut(add_gt(z1, z2)) or not add_gt(z1, z2, r) or ℝ.new(add_gt(z1, z2)).gt_rat(r)"]}
{"goal":"ℝ.new(add_gt(z1, z2)) > ℝ.from_rat(r)","proof":["not ℝ.new(add_gt(z1, z2)).gt_rat(r) or ℝ.new(add_gt(z1, z2)) > ℝ.from_rat(r)"]}
{"goal":"add_gt_imp_gt_from_rat","proof":["ℝ.new(add_gt(z1, z2)) = z1 + z2"]}
{"goal":"ℝ.new(add_gt(z1, z2)) > ℝ.from_rat(r)","proof":["ℝ.new(add_gt(z1, z2)) = z1 + z2"]}
{"goal":"ℝ.new(add_gt(z1, z2)).gt_rat(r)","proof":["not ℝ.new(add_gt(z1, z2)) > ℝ.from_rat(r) or ℝ.new(add_gt(z1, z2)).gt_rat(r)"]}
{"goal":"gt_from_rat_imp_add_gt","proof":["not is_dedekind_cut(add_gt(z1, z2)) or ℝ.new(add_gt(z1, z2)).gt_rat(r) = add_gt(z1, z2, r)","is_dedekind_cut(add_gt(z1, z2))","not ℝ.new(add_gt(z1, z2)).gt_rat(r) or not is_dedekind_cut(add_gt(z1, z2)) or add_gt(z1, z2, r)"]}
{"goal":"not b <= a","proof":["not b > a or not b <= a","not b > a","b > a = a < b"]}
{"goal":"not c <= a","proof":["not b <= c or not c <= a or b <= a","not b <= c or b <= a"]}
{"goal":"lt_lte_trans","proof":["c > a or c <= a","c > a = a < c","c > a","not c > a"]}
{"goal":"not b < a","proof":["not a > b or not a <= b","a > b = b < a","not a > b","a > b"]}
{"goal":"not c < a","proof":["not c < a or not a <= b or c < b","not c >= b or not c < b","c >= b = b <= c","not b < c or b <= c","not a <= b or c < b","c < b","b <= c","not c >= b","c >= b"]}
{"goal":"lte_lt_trans","proof":["not c <= a or c < a or c = a","a >= c or a < c","a >= c","a >= c = c <= a","c <= a","c = a"]}
{"goal":"lt_trans","proof":["not a < b or not b <= c or a < c","not b < c or b <= c","not b <= c or not a < b","b <= c","not b <= c"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { ℝ.from_rat(p).gt_rat(k0) and ℝ.from_rat(q).gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not ℝ.from_rat(q).gt_rat(s1(ℝ.from_rat(p), ℝ.from_rat(q), r)) or not ℝ.from_rat(p).gt_rat(s0(ℝ.from_rat(p), ℝ.from_rat(q), r)) or s0(ℝ.from_rat(p), ℝ.from_rat(q), r) + s1(ℝ.from_rat(p), ℝ.from_rat(q), r) != r","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r) or s0(ℝ.from_rat(p), ℝ.from_rat(q), r) + s1(ℝ.from_rat(p), ℝ.from_rat(q), r) = r","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r) or ℝ.from_rat(q).gt_rat(s1(ℝ.from_rat(p), ℝ.from_rat(q), r))","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r) or ℝ.from_rat(p).gt_rat(s0(ℝ.from_rat(p), ℝ.from_rat(q), r))","ℝ.from_rat(p).gt_rat(s0(ℝ.from_rat(p), ℝ.from_rat(q), r))","ℝ.from_rat(q).gt_rat(s1(ℝ.from_rat(p), ℝ.from_rat(q), r))","s0(ℝ.from_rat(p), ℝ.from_rat(q), r) + s1(ℝ.from_rat(p), ℝ.from_rat(q), r) = r"]}
{"goal":"p > rp","proof":["ℝ.from_rat(p) > ℝ.from_rat(rp) = p > rp","not ℝ.from_rat(p) > ℝ.from_rat(rp)","not ℝ.from_rat(p).gt_rat(rp) or ℝ.from_rat(p) > ℝ.from_rat(rp)"]}
{"goal":"q > rq","proof":["ℝ.from_rat(q) > ℝ.from_rat(rq) = q > rq","not ℝ.from_rat(q) > ℝ.from_rat(rq)","not ℝ.from_rat(q).gt_rat(rq) or ℝ.from_rat(q) > ℝ.from_rat(rq)"]}
{"goal":"p + q > rp + rq","proof":["not rp < p or not rq < q or rp + rq < p + q","p + q > rp + rq = rp + rq < p + q","p > rp = rp < p","q > rq = rq < q","not rp + rq < p + q","rq < q","rp < p","not rp < p"]}
{"goal":"p + q > r","proof":["not p + q > rp + rq"]}
{"goal":"add_gt_from_rat_imp_rat_add_gt","proof":[]}
{"goal":"d > ℚ.0","proof":["p + q - r > ℚ.0 = p + q > r"]}
{"goal":"d / ℚ.2 > ℚ.0","proof":["not d > ℚ.0 or d / ℚ.2 > ℚ.0"]}
{"goal":"rp < p","proof":["not d / ℚ.2 > ℚ.0 or p > p - d / ℚ.2","p > p - d / ℚ.2 = p - d / ℚ.2 < p","not p - d / ℚ.2 < p","p > p - d / ℚ.2"]}
{"goal":"ℝ.from_rat(p).gt_rat(rp)","proof":["ℝ.from_rat(p) > ℝ.from_rat(rp) = p > rp","not ℝ.from_rat(p) > ℝ.from_rat(rp) or ℝ.from_rat(p).gt_rat(rp)","not ℝ.from_rat(p) > ℝ.from_rat(rp)","not p > rp","p > rp = rp < p"]}
{"goal":"rq < q","proof":["not d / ℚ.2 > ℚ.0 or q > q - d / ℚ.2","q > q - d / ℚ.2 = q - d / ℚ.2 < q","not q - d / ℚ.2 < q","q > q - d / ℚ.2"]}
{"goal":"ℝ.from_rat(q).gt_rat(rq)","proof":["ℝ.from_rat(q) > ℝ.from_rat(rq) = q > rq","not ℝ.from_rat(q) > ℝ.from_rat(rq) or ℝ.from_rat(q).gt_rat(rq)","not ℝ.from_rat(q) > ℝ.from_rat(rq)","not q > rq","q > rq = rq < q"]}
{"goal":"rp + rq = p - d / ℚ.2 + (q - d / ℚ.2)","proof":[]}
{"goal":"rp + rq = p + -d / ℚ.2 + (q + -d / ℚ.2)","proof":["-d ⋅ ℚ.2.reciprocal = -(d ⋅ ℚ.2.reciprocal)","p + -d / ℚ.2 = p - d / ℚ.2","q + -d / ℚ.2 = q - d / ℚ.2","-d ⋅ ℚ.2.reciprocal = -d / ℚ.2","d ⋅ ℚ.2.reciprocal = d / ℚ.2","q + -d / ℚ.2 + (p + -d / ℚ.2) = p + -d / ℚ.2 + (q + -d / ℚ.2)","q - d / ℚ.2 + (p - d / ℚ.2) = p - d / ℚ.2 + (q - d / ℚ.2)"]}
{"goal":"rp + rq = p + q + (-d / ℚ.2 + -d / ℚ.2)","proof":["-d / ℚ.2 + (p + (q + -d / ℚ.2)) = -d / ℚ.2 + p + (q + -d / ℚ.2)","p + (q + -d / ℚ.2) = p + q + -d / ℚ.2","p + q + (-d / ℚ.2 + -d / ℚ.2) = p + q + -d / ℚ.2 + -d / ℚ.2","-d / ℚ.2 + (p + q + -d / ℚ.2) = p + q + -d / ℚ.2 + -d / ℚ.2","p + -d / ℚ.2 = -d / ℚ.2 + p"]}
{"goal":"rp + rq = p + q - d","proof":["-d / ℚ.2 + -d / ℚ.2 = -d","p + q + -d = p + q - d"]}
{"goal":"p + q = r + d","proof":["p + q - r + r = p + q","d + r = r + d","d + r != p + q"]}
{"goal":"p + q - d = r","proof":["r + d != p + q or p + q - d = r"]}
{"goal":"rat_add_gt_imp_add_gt_from_rat","proof":["not ℝ.from_rat(p).gt_rat(rp) or not ℝ.from_rat(q).gt_rat(rq) or rp + rq != rp + rq or add_gt(ℝ.from_rat(p), ℝ.from_rat(q), rp + rq)","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), p + q - d)","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), rp + rq)","not ℝ.from_rat(p).gt_rat(rp) or not ℝ.from_rat(q).gt_rat(rq) or add_gt(ℝ.from_rat(p), ℝ.from_rat(q), rp + rq)"]}
{"goal":"ℝ.from_rat(p + q).gt_rat(r)","proof":["not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r) or p + q > r","ℝ.from_rat(p + q).gt_rat(r) = p + q > r","p + q > r","not p + q > r"]}
{"goal":"(ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r) = ℝ.from_rat(p + q).gt_rat(r)","proof":["not (ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r)","not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r) or ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)","not ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r) or (ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r)","ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)","not ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)"]}
{"goal":"not add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r)","proof":[]}
{"goal":"not ℝ.from_rat(p + q).gt_rat(r)","proof":["not p + q > r or add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r)","ℝ.from_rat(p + q).gt_rat(r) = p + q > r","not p + q > r","p + q > r"]}
{"goal":"(ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r) = ℝ.from_rat(p + q).gt_rat(r)","proof":["(ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r)","not ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r) or add_gt(ℝ.from_rat(p), ℝ.from_rat(q), r)","not (ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(r) or ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)","not ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)","ℝ.from_rat(p) + ℝ.from_rat(q) > ℝ.from_rat(r)"]}
{"goal":"(ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat = ℝ.from_rat(p + q).gt_rat","proof":["let s0: ℚ satisfy { (ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(s0) != ℝ.from_rat(p + q).gt_rat(s0) }","(ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat(s0) = ℝ.from_rat(p + q).gt_rat(s0)"]}
{"goal":"add_from_rat","proof":["ℝ.new((ℝ.from_rat(p) + ℝ.from_rat(q)).gt_rat) = ℝ.from_rat(p) + ℝ.from_rat(q)","ℝ.new(ℝ.from_rat(p + q).gt_rat) = ℝ.from_rat(p + q)"]}
{"goal":"add_gt(a, c, r)","proof":["not a + c > ℝ.from_rat(r) or add_gt(a, c, r)","not (a + c).gt_rat(r) or a + c > ℝ.from_rat(r)","not a + c > ℝ.from_rat(r)","a + c > ℝ.from_rat(r)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { a.gt_rat(k0) and c.gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not c.gt_rat(s1(a, c, r)) or not a.gt_rat(s0(a, c, r)) or s0(a, c, r) + s1(a, c, r) != r","not add_gt(a, c, r) or s0(a, c, r) + s1(a, c, r) = r","not add_gt(a, c, r) or c.gt_rat(s1(a, c, r))","not add_gt(a, c, r) or a.gt_rat(s0(a, c, r))","a.gt_rat(s0(a, c, r))","c.gt_rat(s1(a, c, r))","s0(a, c, r) + s1(a, c, r) = r"]}
{"goal":"b.gt_rat(ra)","proof":["not a <= b or not a.gt_rat(ra) or b.gt_rat(ra)","not a <= b or not a.gt_rat(ra)"]}
{"goal":"(b + c).gt_rat(r)","proof":["not b.gt_rat(ra) or not c.gt_rat(rc) or (b + c).gt_rat(ra + rc)","not (b + c).gt_rat(ra + rc)"]}
{"goal":"lte_add_right","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not (a + c).gt_rat(s0(a + c, b + c)) or (b + c).gt_rat(s0(a + c, b + c))","not (b + c).gt_rat(s0(a + c, b + c)) or a + c <= b + c","(a + c).gt_rat(s0(a + c, b + c)) or a + c <= b + c","(a + c).gt_rat(s0(a + c, b + c))","not (b + c).gt_rat(s0(a + c, b + c))","(b + c).gt_rat(s0(a + c, b + c))"]}
{"goal":"lte_add_left","proof":["not a <= b or a + c <= b + c","c + a = a + c","c + b = b + c","not a + c <= c + b","not a + c <= b + c"]}
{"goal":"lt_add_converse","proof":["not b <= a or b + c <= a + c","a >= b or a < b","a >= b","not a + c >= b + c or not a + c < b + c","a + c >= b + c = b + c <= a + c","a >= b = b <= a","b <= a","not a + c >= b + c","not b + c <= a + c"]}
{"goal":"gte_add_right","proof":["not b <= a or b + c <= a + c","a + c >= b + c = b + c <= a + c","a >= b = b <= a","not b + c <= a + c","b <= a","not b <= a"]}
{"goal":"gte_add_left","proof":["not a >= b or a + c >= b + c","c + a = a + c","c + b = b + c","not a + c >= c + b","not a + c >= b + c"]}
{"goal":"gt_add_converse","proof":["not b + c < a + c or b < a","a + c > b + c = b + c < a + c","a > b = b < a","not b < a","b + c < a + c"]}
{"goal":"add_lte_lte","proof":["not c <= d or a + c <= a + d","not a <= b or a + d <= b + d","not a + c <= a + d or not a + d <= b + d or a + c <= b + d","not a + d <= b + d or not a + c <= a + d","a + d <= b + d","a + c <= a + d"]}
{"goal":"add_gte_gte","proof":["not b <= a or not d <= c or b + d <= a + c","a + c >= b + d = b + d <= a + c","a >= b = b <= a","c >= d = d <= c","not b + d <= a + c","d <= c","b <= a","not b <= a"]}
{"goal":"add_from_rat_zero","proof":["ℝ.from_rat(r) + ℝ.from_rat(ℚ.0) = ℝ.from_rat(r + ℚ.0)","r + ℚ.0 = r","ℝ.from_rat(r) + ℝ.from_rat(ℚ.0) != ℝ.from_rat(r)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { a.gt_rat(k0) and 0.gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not 0.gt_rat(s1(a, 0, r)) or not a.gt_rat(s0(a, 0, r)) or s0(a, 0, r) + s1(a, 0, r) != r","not add_gt(a, 0, r) or s0(a, 0, r) + s1(a, 0, r) = r","not add_gt(a, 0, r) or 0.gt_rat(s1(a, 0, r))","not add_gt(a, 0, r) or a.gt_rat(s0(a, 0, r))","a.gt_rat(s0(a, 0, r))","0.gt_rat(s1(a, 0, r))","s0(a, 0, r) + s1(a, 0, r) = r"]}
{"goal":"r0 < ℚ.0","proof":["ℝ.from_rat(ℚ.0).gt_rat(r0) = ℚ.0 > r0","ℚ.0 > r0 = r0 < ℚ.0"]}
{"goal":"r <= ra","proof":["not r0 < ℚ.0 or ra + r0 < ra","not r < ra or r <= ra","not r < ra","ra + r0 < ra"]}
{"goal":"is_lower_interval(a.gt_rat)","proof":["not is_dedekind_cut(a.gt_rat) or is_lower_interval(a.gt_rat)","not is_dedekind_cut(a.gt_rat)","is_dedekind_cut(a.gt_rat)"]}
{"goal":"a.gt_rat(r)","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℝ, x1: ℚ) { not x0.gt_rat(x1) or x0.gt_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℚ) { not x2.gt_rat(x3) or x3 < s0(x2, x3) } }","not is_lower_interval(a.gt_rat) or not r < s0(a, ra) or not a.gt_rat(s0(a, ra)) or a.gt_rat(r)","not r <= ra or not ra < s0(a, ra) or r < s0(a, ra)","not a.gt_rat(ra) or ra < s0(a, ra)","not a.gt_rat(ra) or a.gt_rat(s0(a, ra))","a.gt_rat(s0(a, ra))","ra < s0(a, ra)","not ra < s0(a, ra) or r < s0(a, ra)","not a.gt_rat(s0(a, ra)) or not r < s0(a, ra) or a.gt_rat(r)","not a.gt_rat(s0(a, ra)) or not r < s0(a, ra)","r < s0(a, ra)","not r < s0(a, ra)"]}
{"goal":"(a + 0).gt_rat(r) = a.gt_rat(r)","proof":["not (a + 0).gt_rat(r)","not add_gt(a, 0, r) or a + 0 > ℝ.from_rat(r)","not a + 0 > ℝ.from_rat(r) or (a + 0).gt_rat(r)","a + 0 > ℝ.from_rat(r)","not a + 0 > ℝ.from_rat(r)"]}
{"goal":"exists(k0: ℚ) { r < k0 and a.gt_rat(k0) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℝ, x1: ℚ) { not x0.gt_rat(x1) or x0.gt_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℚ) { not x2.gt_rat(x3) or x3 < s0(x2, x3) } }","not a.gt_rat(s0(a, r)) or not r < s0(a, r)","not a.gt_rat(r) or r < s0(a, r)","not a.gt_rat(r) or a.gt_rat(s0(a, r))","a.gt_rat(s0(a, r))","r < s0(a, r)","not r < s0(a, r)"]}
{"goal":"r0 < ℚ.0","proof":["ra - r > ℚ.0 = ra > r","-(r - ra) = ra - r","-(r - ra) > ℚ.0 = r - ra < ℚ.0","ra > r = r < ra"]}
{"goal":"r = ra + r0","proof":["r - ra + ra = r","r0 + ra = ra + r0","r0 + ra != r"]}
{"goal":"add_gt(a, 0, r)","proof":["not a.gt_rat(ra) or not 0.gt_rat(r0) or ra + r0 != r or add_gt(a, 0, r)","ℝ.from_rat(ℚ.0).gt_rat(r0) = ℚ.0 > r0","ℚ.0 > r0 = r0 < ℚ.0","not 0.gt_rat(r0) or not a.gt_rat(ra) or ra + r0 != r","not 0.gt_rat(r0)"]}
{"goal":"false","proof":[]}
{"goal":"(a + 0).gt_rat(r) = a.gt_rat(r)","proof":["(a + 0).gt_rat(r)","not a + 0 > ℝ.from_rat(r) or add_gt(a, 0, r)","not (a + 0).gt_rat(r) or a + 0 > ℝ.from_rat(r)","not a + 0 > ℝ.from_rat(r)","a + 0 > ℝ.from_rat(r)"]}
{"goal":"(a + 0).gt_rat(r) = a.gt_rat(r)","proof":[]}
{"goal":"(a + 0).gt_rat = a.gt_rat","proof":["let s0: ℚ satisfy { (a + 0).gt_rat(s0) != a.gt_rat(s0) }","(a + 0).gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"add_zero_right","proof":["ℝ.new(add_gt(a, 0)) = a + 0","ℝ.new(a.gt_rat) = a","ℝ.new(ℝ.new(add_gt(a, 0)).gt_rat) = ℝ.new(add_gt(a, 0))"]}
{"goal":"add_zero_left","proof":["a + 0 = 0 + a","a + 0 != a","a + 0 = a"]}
{"goal":"a < ℝ.from_rat(-r2)","proof":["a < ℝ.from_rat(-r2) = neg_gt(a, r2)"]}
{"goal":"-r2 < -r1","proof":["not r1 < r2 or -r1 > -r2","-r1 > -r2 = -r2 < -r1","-r1 > -r2","not -r1 > -r2"]}
{"goal":"ℝ.from_rat(-r2) < ℝ.from_rat(-r1)","proof":["ℝ.from_rat(-r1) > ℝ.from_rat(-r2) = -r1 > -r2","ℝ.from_rat(-r1) > ℝ.from_rat(-r2) = ℝ.from_rat(-r2) < ℝ.from_rat(-r1)","-r1 > -r2 = -r2 < -r1"]}
{"goal":"neg_gt(a, r1)","proof":["not a < ℝ.from_rat(-r2) or not ℝ.from_rat(-r2) <= ℝ.from_rat(-r1) or a < ℝ.from_rat(-r1)","a < ℝ.from_rat(-r1) = neg_gt(a, r1)","not a < ℝ.from_rat(-r1)","not ℝ.from_rat(-r2) < ℝ.from_rat(-r1) or ℝ.from_rat(-r2) <= ℝ.from_rat(-r1)","ℝ.from_rat(-r2) <= ℝ.from_rat(-r1)","not ℝ.from_rat(-r2) <= ℝ.from_rat(-r1) or a < ℝ.from_rat(-r1)"]}
{"goal":"neg_gt_is_lower_interval","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool, x1: ℚ, x2: ℚ) { not is_lower_interval(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: ℚ -> Bool) { is_lower_interval(x3) or x3(s1(x3)) } and forall(x4: ℚ -> Bool) { s0(x4) < s1(x4) or is_lower_interval(x4) } and forall(x5: ℚ -> Bool) { not x5(s0(x5)) or is_lower_interval(x5) } }","not neg_gt(a, s1(neg_gt(a))) or not s0(neg_gt(a)) < s1(neg_gt(a)) or neg_gt(a, s0(neg_gt(a)))","s0(neg_gt(a)) < s1(neg_gt(a)) or is_lower_interval(neg_gt(a))","not neg_gt(a, s0(neg_gt(a))) or is_lower_interval(neg_gt(a))","not neg_gt(a, s0(neg_gt(a)))","is_lower_interval(neg_gt(a)) or neg_gt(a, s1(neg_gt(a)))","neg_gt(a, s1(neg_gt(a)))","s0(neg_gt(a)) < s1(neg_gt(a))"]}
{"goal":"exists(k0: ℚ) { not a.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.gt_rat(s0(x0)) } }","a.gt_rat(s0(a))","not a.gt_rat(s0(a))"]}
{"goal":"lte_some_rat","proof":["let s0: ℚ satisfy { not a.gt_rat(s0) }","not a <= ℝ.from_rat(s0)","not a > ℝ.from_rat(s0) or a.gt_rat(s0)","a > ℝ.from_rat(s0) or a <= ℝ.from_rat(s0)","a > ℝ.from_rat(s0)"]}
{"goal":"exists(k0: ℚ) { a <= ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 <= ℝ.from_rat(s0(x0)) } }","not a <= ℝ.from_rat(s0(a))","a <= ℝ.from_rat(s0(a))"]}
{"goal":"r1 < r1 + ℚ.1","proof":["not ℚ.1 > ℚ.0 or r1 < r1 + ℚ.1","not ℚ.1 > ℚ.0"]}
{"goal":"ℝ.from_rat(r1) < ℝ.from_rat(r1 + ℚ.1)","proof":["ℝ.from_rat(r1 + ℚ.1) > ℝ.from_rat(r1) = r1 + ℚ.1 > r1","ℝ.from_rat(r1 + ℚ.1) > ℝ.from_rat(r1) = ℝ.from_rat(r1) < ℝ.from_rat(r1 + ℚ.1)","r1 + ℚ.1 > r1 = r1 < r1 + ℚ.1"]}
{"goal":"a < ℝ.from_rat(r1 + ℚ.1)","proof":["not ℝ.from_rat(r1) < ℝ.from_rat(r1 + ℚ.1) or not a <= ℝ.from_rat(r1) or a < ℝ.from_rat(r1 + ℚ.1)","not ℝ.from_rat(r1) < ℝ.from_rat(r1 + ℚ.1) or not a <= ℝ.from_rat(r1)"]}
{"goal":"lt_some_rat","proof":["not a < ℝ.from_rat(r1 + ℚ.1)"]}
{"goal":"gt_some_rat","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0.gt_rat(s0(x0)) } }","not a > ℝ.from_rat(s0(a))","not a.gt_rat(s0(a)) or a > ℝ.from_rat(s0(a))","not a.gt_rat(s0(a))","a.gt_rat(s0(a))"]}
{"goal":"gte_some_rat","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 > ℝ.from_rat(s0(x0)) } }","not a >= ℝ.from_rat(s0(a))","a >= ℝ.from_rat(s0(a)) or a < ℝ.from_rat(s0(a))","a < ℝ.from_rat(s0(a))","not a > ℝ.from_rat(s0(a)) or not a <= ℝ.from_rat(s0(a))","not a < ℝ.from_rat(s0(a)) or a <= ℝ.from_rat(s0(a))","a > ℝ.from_rat(s0(a))","a <= ℝ.from_rat(s0(a))","not a > ℝ.from_rat(s0(a))"]}
{"goal":"lte_some_ℝ","proof":["not a <= a","let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a)) or a <= a"]}
{"goal":"lt_some_ℝ","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 < ℝ.from_rat(s0(x0)) } }","not a < ℝ.from_rat(s0(a))","a < ℝ.from_rat(s0(a))"]}
{"goal":"gt_some_ℝ","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 > ℝ.from_rat(s0(x0)) } }","not a > ℝ.from_rat(s0(a))","a > ℝ.from_rat(s0(a))"]}
{"goal":"gte_some_ℝ","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 >= ℝ.from_rat(s0(x0)) } }","not a >= ℝ.from_rat(s0(a))","a >= ℝ.from_rat(s0(a))"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(k0) < a }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 > ℝ.from_rat(s0(x0)) } }","not ℝ.from_rat(s0(a)) < a","a > ℝ.from_rat(s0(a)) = ℝ.from_rat(s0(a)) < a","a > ℝ.from_rat(s0(a))","not a > ℝ.from_rat(s0(a)) or ℝ.from_rat(s0(a)) < a","not a > ℝ.from_rat(s0(a))"]}
{"goal":"not a < ℝ.from_rat(r1)","proof":["not a >= ℝ.from_rat(r1) or not a < ℝ.from_rat(r1)","not a >= ℝ.from_rat(r1)","a >= ℝ.from_rat(r1) = ℝ.from_rat(r1) <= a","not ℝ.from_rat(r1) <= a","not ℝ.from_rat(r1) < a or ℝ.from_rat(r1) <= a"]}
{"goal":"not a < ℝ.from_rat(--r1)","proof":["-(ℚ.0 - r1) = r1 - ℚ.0","ℝ.from_rat(--r1) > a = a < ℝ.from_rat(--r1)","ℝ.from_rat(r1) > a = a < ℝ.from_rat(r1)","ℝ.new((--r1).gt) = ℝ.from_rat(--r1)","ℝ.new(r1.gt) = ℝ.from_rat(r1)","ℚ.0 - r1 = -r1","r1 - ℚ.0 = r1"]}
{"goal":"not neg_gt(a, -r1)","proof":["a < ℝ.from_rat(--r1) = neg_gt(a, -r1)"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 < ℝ.from_rat(s0(x0)) } }","not a < ℝ.from_rat(s0(a))","a < ℝ.from_rat(s0(a))"]}
{"goal":"a < ℝ.from_rat(--r2)","proof":["-(ℚ.0 - r2) = r2 - ℚ.0","ℝ.from_rat(--r2) > a = a < ℝ.from_rat(--r2)","ℝ.from_rat(r2) > a = a < ℝ.from_rat(r2)","ℝ.new((--r2).gt) = ℝ.from_rat(--r2)","ℝ.new(r2.gt) = ℝ.from_rat(r2)","ℚ.0 - r2 = -r2","r2 - ℚ.0 = r2"]}
{"goal":"neg_gt(a, -r2)","proof":["a < ℝ.from_rat(--r2) = neg_gt(a, -r2)"]}
{"goal":"neg_gt_is_cut","proof":["let s0: ℚ satisfy { true }","not neg_gt(a, -r2) or is_cut(neg_gt(a)) or neg_gt(a, s0)","not neg_gt(a, s0) or is_cut(neg_gt(a)) or neg_gt(a, -r1)","not neg_gt(a, -r2) or neg_gt(a, s0)","not neg_gt(a, s0) or neg_gt(a, -r1)","neg_gt(a, s0)","not neg_gt(a, s0)"]}
{"goal":"a < ℝ.from_rat(-r)","proof":["a < ℝ.from_rat(-r) = neg_gt(a, r)"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) and ℝ.from_rat(k0) < ℝ.from_rat(-r) }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not ℝ.from_rat(s0(a, ℝ.from_rat(-r))) < ℝ.from_rat(-r) or not a < ℝ.from_rat(s0(a, ℝ.from_rat(-r)))","not a < ℝ.from_rat(-r) or ℝ.from_rat(s0(a, ℝ.from_rat(-r))) < ℝ.from_rat(-r)","not a < ℝ.from_rat(-r) or a < ℝ.from_rat(s0(a, ℝ.from_rat(-r)))","a < ℝ.from_rat(s0(a, ℝ.from_rat(-r)))","ℝ.from_rat(s0(a, ℝ.from_rat(-r))) < ℝ.from_rat(-r)","not ℝ.from_rat(s0(a, ℝ.from_rat(-r))) < ℝ.from_rat(-r)"]}
{"goal":"neg_gt(a, -q)","proof":["a < ℝ.from_rat(--q) = neg_gt(a, -q)","-(ℚ.0 - q) = q - ℚ.0","ℝ.from_rat(--q) > a = a < ℝ.from_rat(--q)","ℝ.from_rat(q) > a = a < ℝ.from_rat(q)","ℝ.new((--q).gt) = ℝ.from_rat(--q)","ℝ.new(q.gt) = ℝ.from_rat(q)","ℚ.0 - q = -q","q.reciprocal.reciprocal = q","q.reciprocal.reciprocal - ℚ.0 = q.reciprocal.reciprocal"]}
{"goal":"q < -r","proof":["ℝ.from_rat(-r) > ℝ.from_rat(q) = -r > q","ℝ.from_rat(-r) > ℝ.from_rat(q) = ℝ.from_rat(q) < ℝ.from_rat(-r)","-r > q = q < -r"]}
{"goal":"r < -q","proof":["not q < -r or -q > --r","-(ℚ.0 - r) = r - ℚ.0","-q > r = r < -q","ℚ.0 - r = -r","r.reciprocal.reciprocal = r","r.reciprocal.reciprocal - ℚ.0 = r.reciprocal.reciprocal","-q > --r"]}
{"goal":"not is_greatest(neg_gt(a), r)","proof":["not is_greatest(neg_gt(a), r) or not neg_gt(a, -q) or -q <= r","-q > r != -q <= r","-q > r = r < -q","not neg_gt(a, -q) or -q <= r","-q <= r","-q > r","not -q > r or not -q <= r"]}
{"goal":"neg_gt_has_no_greatest","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(neg_gt(a), s0(neg_gt(a))) or not neg_gt(a, s0(neg_gt(a)))","not has_greatest(neg_gt(a)) or is_greatest(neg_gt(a), s0(neg_gt(a)))","is_greatest(neg_gt(a), s0(neg_gt(a)))","not is_greatest(neg_gt(a), s0(neg_gt(a))) or neg_gt(a, s0(neg_gt(a)))","not neg_gt(a, s0(neg_gt(a)))","neg_gt(a, s0(neg_gt(a)))"]}
{"goal":"neg_gt_is_dedekind_cut","proof":["not is_cut(neg_gt(a)) or not is_lower_interval(neg_gt(a)) or is_dedekind_cut(neg_gt(a)) or has_greatest(neg_gt(a))","not has_greatest(neg_gt(a))","not is_cut(neg_gt(a)) or not is_lower_interval(neg_gt(a))","is_cut(neg_gt(a))","is_lower_interval(neg_gt(a))"]}
{"goal":"neg_gt_imp_not_gt_neg","proof":["not a <= ℝ.from_rat(-r) or not a.gt_rat(-r) or ℝ.from_rat(-r).gt_rat(-r)","a < ℝ.from_rat(-r) = neg_gt(a, r)","not a < ℝ.from_rat(-r) or a <= ℝ.from_rat(-r)","not ℝ.from_rat(-r).gt_rat(-r)","not a <= ℝ.from_rat(-r) or ℝ.from_rat(-r).gt_rat(-r)","not a <= ℝ.from_rat(-r)","a < ℝ.from_rat(-r)","not a < ℝ.from_rat(-r)"]}
{"goal":"b < ℝ.from_rat(-r)","proof":["b < ℝ.from_rat(-r) = neg_gt(b, r)","not neg_gt(b, r)","not is_dedekind_cut(neg_gt(b)) or ℝ.new(neg_gt(b)).gt_rat(r) = neg_gt(b, r)","ℝ.new(neg_gt(b)) = -b","is_dedekind_cut(neg_gt(b))","not ℝ.new(neg_gt(b)).gt_rat(r) or not is_dedekind_cut(neg_gt(b)) or neg_gt(b, r)","ℝ.new(neg_gt(b)).gt_rat(r)"]}
{"goal":"a < ℝ.from_rat(-r)","proof":["not b < ℝ.from_rat(-r) or not a <= b or a < ℝ.from_rat(-r)","not b < ℝ.from_rat(-r) or not a <= b"]}
{"goal":"(-a).gt_rat(r)","proof":["a < ℝ.from_rat(-r) = neg_gt(a, r)","neg_gt(a, r)","not is_dedekind_cut(neg_gt(a)) or ℝ.new(neg_gt(a)).gt_rat(r) = neg_gt(a, r)","ℝ.new(neg_gt(a)) = -a","not ℝ.new(neg_gt(a)).gt_rat(r)","is_dedekind_cut(neg_gt(a))","not is_dedekind_cut(neg_gt(a)) or not neg_gt(a, r) or ℝ.new(neg_gt(a)).gt_rat(r)"]}
{"goal":"lte_swap_neg","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not (-b).gt_rat(s0(-b, -a)) or (-a).gt_rat(s0(-b, -a))","not (-a).gt_rat(s0(-b, -a)) or -b <= -a","(-b).gt_rat(s0(-b, -a)) or -b <= -a","(-b).gt_rat(s0(-b, -a))","not (-a).gt_rat(s0(-b, -a))","(-a).gt_rat(s0(-b, -a))"]}
{"goal":"-q > r = q < -r","proof":["-q - r > ℚ.0 = -q > r","(-r - q).is_positive = q < -r","-q + -r = -q - r","-r + -q = -r - q","-q - r > ℚ.0 = ℚ.0 < -q - r","-r + -q = -q + -r","ℚ.0 < -r - q = (-r - q).is_positive"]}
{"goal":"-q > r","proof":["ℝ.from_rat(-q) > ℝ.from_rat(r) = -q > r","not ℝ.from_rat(-q).gt_rat(r) or ℝ.from_rat(-q) > ℝ.from_rat(r)","not ℝ.from_rat(-q) > ℝ.from_rat(r)","ℝ.from_rat(-q) > ℝ.from_rat(r)"]}
{"goal":"q < -r","proof":[]}
{"goal":"ℝ.from_rat(q) < ℝ.from_rat(-r)","proof":["ℝ.from_rat(-r) > ℝ.from_rat(q) = -r > q","ℝ.from_rat(-r) > ℝ.from_rat(q) = ℝ.from_rat(q) < ℝ.from_rat(-r)","-r > q = q < -r"]}
{"goal":"(-ℝ.from_rat(q)).gt_rat(r)","proof":["ℝ.from_rat(q) < ℝ.from_rat(-r) = neg_gt(ℝ.from_rat(q), r)","neg_gt(ℝ.from_rat(q), r)","not is_dedekind_cut(neg_gt(ℝ.from_rat(q))) or ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r) = neg_gt(ℝ.from_rat(q), r)","ℝ.new(neg_gt(ℝ.from_rat(q))) = -ℝ.from_rat(q)","not ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r)","is_dedekind_cut(neg_gt(ℝ.from_rat(q)))","not is_dedekind_cut(neg_gt(ℝ.from_rat(q))) or not neg_gt(ℝ.from_rat(q), r) or ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r)"]}
{"goal":"ℝ.from_rat(q) < ℝ.from_rat(-r)","proof":["ℝ.from_rat(q) < ℝ.from_rat(-r) = neg_gt(ℝ.from_rat(q), r)","not neg_gt(ℝ.from_rat(q), r)","not is_dedekind_cut(neg_gt(ℝ.from_rat(q))) or ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r) = neg_gt(ℝ.from_rat(q), r)","ℝ.new(neg_gt(ℝ.from_rat(q))) = -ℝ.from_rat(q)","is_dedekind_cut(neg_gt(ℝ.from_rat(q)))","not ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r) or not is_dedekind_cut(neg_gt(ℝ.from_rat(q))) or neg_gt(ℝ.from_rat(q), r)","ℝ.new(neg_gt(ℝ.from_rat(q))).gt_rat(r)"]}
{"goal":"q < -r","proof":["ℝ.from_rat(-r) > ℝ.from_rat(q) = -r > q","ℝ.from_rat(-r) > ℝ.from_rat(q) = ℝ.from_rat(q) < ℝ.from_rat(-r)","-r > q = q < -r"]}
{"goal":"-q > r","proof":[]}
{"goal":"ℝ.from_rat(-q).gt_rat(r)","proof":["ℝ.from_rat(-q) > ℝ.from_rat(r) = -q > r","not ℝ.from_rat(-q) > ℝ.from_rat(r) or ℝ.from_rat(-q).gt_rat(r)","ℝ.from_rat(-q) > ℝ.from_rat(r)","not ℝ.from_rat(-q) > ℝ.from_rat(r)"]}
{"goal":"ℝ.from_rat(-q).gt_rat(r) = (-ℝ.from_rat(q)).gt_rat(r)","proof":["(-ℝ.from_rat(q)).gt_rat(r) or ℝ.from_rat(-q).gt_rat(r)","not (-ℝ.from_rat(q)).gt_rat(r) or not ℝ.from_rat(-q).gt_rat(r)","(-ℝ.from_rat(q)).gt_rat(r)","not (-ℝ.from_rat(q)).gt_rat(r)"]}
{"goal":"ℝ.from_rat(-q).gt_rat = (-ℝ.from_rat(q)).gt_rat","proof":["let s0: ℚ satisfy { (-ℝ.from_rat(q)).gt_rat(s0) != ℝ.from_rat(-q).gt_rat(s0) }","(-ℝ.from_rat(q)).gt_rat(s0) = ℝ.from_rat(-q).gt_rat(s0)"]}
{"goal":"from_neg_rat","proof":["ℝ.new((-ℝ.from_rat(q)).gt_rat) = -ℝ.from_rat(q)","ℝ.new(ℝ.from_rat(-q).gt_rat) = ℝ.from_rat(-q)"]}
{"goal":"neg_neg_rat","proof":["-(ℚ.0 - q) = q - ℚ.0","-ℝ.from_rat(-q) = ℝ.from_rat(--q)","-ℝ.from_rat(q) = ℝ.from_rat(-q)","-ℝ.from_rat(-q) != ℝ.from_rat(q)","ℝ.from_rat(--q) != ℝ.from_rat(q)","--q != q","ℚ.0 - q = -q","q - ℚ.0 = q"]}
{"goal":"neg_from_rat_eq","proof":["--ℝ.from_rat(q1) = ℝ.from_rat(q1)","--ℝ.from_rat(q2) = ℝ.from_rat(q2)","ℝ.from_rat(q2) != ℝ.from_rat(q1) or q2 = q1","ℝ.from_rat(q2) != ℝ.from_rat(q1)"]}
{"goal":"exists(k0: ℚ) { a = ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.is_rational or ℝ.from_rat(s0(x0)) = x0 } and forall(x1: ℚ, x2: ℝ) { ℝ.from_rat(x1) != x2 or x2.is_rational } }","ℝ.from_rat(s0(a)) != a","not a.is_rational or ℝ.from_rat(s0(a)) = a"]}
{"goal":"not ℝ.from_rat(q).gt_rat(q)","proof":["ℝ.from_rat(q) > ℝ.from_rat(q) = q > q","not ℝ.from_rat(q).gt_rat(q) or ℝ.from_rat(q) > ℝ.from_rat(q)","ℝ.from_rat(q) > ℝ.from_rat(q)","q > q","not q < q or not q < q","q > q = q < q","q < q"]}
{"goal":"ℝ.from_rat(r) >= ℝ.from_rat(q)","proof":["ℝ.from_rat(q) > ℝ.from_rat(r) = q > r","ℝ.from_rat(q).gt_rat(r) = q > r","ℝ.from_rat(r) >= ℝ.from_rat(q) or ℝ.from_rat(r) < ℝ.from_rat(q)","ℝ.from_rat(r) < ℝ.from_rat(q)","ℝ.from_rat(q) > ℝ.from_rat(r) = ℝ.from_rat(r) < ℝ.from_rat(q)"]}
{"goal":"r >= q","proof":["q > r or q < r or r = q","ℝ.from_rat(q).gt_rat(r) = q > r","not q > r","not r > q or r >= q","not r > q","r > q = q < r","not q < r","r != q or r >= q","r = q","r != q"]}
{"goal":"is_least_of_coml(a.gt_rat, q)","proof":["let s0: (ℚ -> Bool, ℚ) -> ℚ satisfy { forall(x0: ℚ -> Bool, x1: ℚ) { not is_least_of_coml(x0, x1) or not x0(x1) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not is_least_of_coml(x2, x3) or x4 >= x3 or x2(x4) } and forall(x5: ℚ -> Bool, x6: ℚ) { not x5(s0(x5, x6)) or is_least_of_coml(x5, x6) or x5(x6) } and forall(x7: ℚ -> Bool, x8: ℚ) { not s0(x7, x8) >= x8 or is_least_of_coml(x7, x8) or x7(x8) } }","ℝ.from_rat(q).gt_rat(s0(a.gt_rat, q)) or s0(a.gt_rat, q) >= q","not a.gt_rat(q)","not s0(a.gt_rat, q) >= q or is_least_of_coml(a.gt_rat, q) or a.gt_rat(q)","not a.gt_rat(s0(a.gt_rat, q)) or is_least_of_coml(a.gt_rat, q) or a.gt_rat(q)","not a.gt_rat(s0(a.gt_rat, q))","not s0(a.gt_rat, q) >= q","not ℝ.from_rat(q).gt_rat(s0(a.gt_rat, q))","ℝ.from_rat(q).gt_rat(s0(a.gt_rat, q))"]}
{"goal":"rational_imp_coml_have_least","proof":["not is_least_of_coml(a.gt_rat, q) or coml_has_least(a.gt_rat)"]}
{"goal":"exists(k0: ℚ) { is_least_of_coml(a.gt_rat, k0) }","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not coml_has_least(x0) or is_least_of_coml(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_least_of_coml(x1, x2) or coml_has_least(x1) } }","not is_least_of_coml(a.gt_rat, s0(a.gt_rat))","not coml_has_least(a.gt_rat) or is_least_of_coml(a.gt_rat, s0(a.gt_rat))"]}
{"goal":"a <= ℝ.from_rat(q)","proof":["not a > ℝ.from_rat(q) or a.gt_rat(q)","a > ℝ.from_rat(q) or a <= ℝ.from_rat(q)","a > ℝ.from_rat(q)","not is_least_of_coml(a.gt_rat, q) or not a.gt_rat(q)","a.gt_rat(q)","not a.gt_rat(q)"]}
{"goal":"a.gt_rat(r)","proof":["not is_least_of_coml(a.gt_rat, q) or r >= q or a.gt_rat(r)","r >= q != r < q","not r >= q or not r < q","not r >= q","a.gt_rat(r) or r >= q"]}
{"goal":"ℝ.from_rat(q).gt_rat(r)","proof":["ℝ.from_rat(q) > ℝ.from_rat(r) = q > r","not ℝ.from_rat(q) > ℝ.from_rat(r) or ℝ.from_rat(q).gt_rat(r)","not ℝ.from_rat(q) > ℝ.from_rat(r)","not q > r","q > r = r < q"]}
{"goal":"a.gt_rat(r) = ℝ.from_rat(q).gt_rat(r)","proof":["not ℝ.from_rat(q).gt_rat(r)"]}
{"goal":"q <= r","proof":["not r <= q or r < q or r = q","r <= q or q <= r","r <= q","r = q"]}
{"goal":"not a.gt_rat(r)","proof":["not a <= ℝ.from_rat(q) or not a.gt_rat(r) or ℝ.from_rat(q).gt_rat(r)","ℝ.from_rat(q).gt_rat(r) = q > r","q > r = r < q","not a <= ℝ.from_rat(q) or ℝ.from_rat(q).gt_rat(r)","ℝ.from_rat(q).gt_rat(r)"]}
{"goal":"not ℝ.from_rat(q).gt_rat(r)","proof":["ℝ.from_rat(q) <= ℝ.from_rat(r) = q <= r","not ℝ.from_rat(q).gt_rat(r) or ℝ.from_rat(q) > ℝ.from_rat(r)","ℝ.from_rat(q) > ℝ.from_rat(r)","not ℝ.from_rat(q) > ℝ.from_rat(r) or not ℝ.from_rat(q) <= ℝ.from_rat(r)","ℝ.from_rat(q) <= ℝ.from_rat(r)","not ℝ.from_rat(q) <= ℝ.from_rat(r)"]}
{"goal":"a.gt_rat(r) = ℝ.from_rat(q).gt_rat(r)","proof":["ℝ.from_rat(q).gt_rat(r)"]}
{"goal":"a.gt_rat = ℝ.from_rat(q).gt_rat","proof":["let s0: ℚ satisfy { ℝ.from_rat(q).gt_rat(s0) != a.gt_rat(s0) }","ℝ.from_rat(q).gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"coml_have_least_imp_rational","proof":["not ℝ.from_rat(q) <= a or not a <= ℝ.from_rat(q) or ℝ.from_rat(q) = a","a >= ℝ.from_rat(q) = ℝ.from_rat(q) <= a","ℝ.from_rat(q) >= a = a <= ℝ.from_rat(q)","ℝ.from_rat(q) != a or a.is_rational","ℝ.from_rat(q) != a","not ℝ.from_rat(q) <= a","0 + a = a","ℝ.new((0 + a).gt_rat) = 0 + a","ℝ.new(ℝ.from_rat(q).gt_rat) = ℝ.from_rat(q)"]}
{"goal":"neg_preserve_rational","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.is_rational or ℝ.from_rat(s0(x0)) = x0 } and forall(x1: ℚ, x2: ℝ) { ℝ.from_rat(x1) != x2 or x2.is_rational } }","not a.is_rational or ℝ.from_rat(s0(a)) = a","-ℝ.from_rat(s0(a)) = ℝ.from_rat(-s0(a))","ℝ.from_rat(-s0(a)) != ℝ.from_rat(-s0(a)) or ℝ.from_rat(-s0(a)).is_rational","ℝ.from_rat(-s0(a)).is_rational","ℝ.from_rat(s0(a)) = a","not (-ℝ.from_rat(s0(a))).is_rational"]}
{"goal":"exists(k0: ℚ) { -a = ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.is_rational or ℝ.from_rat(s0(x0)) = x0 } and forall(x1: ℚ, x2: ℝ) { ℝ.from_rat(x1) != x2 or x2.is_rational } }","ℝ.from_rat(s0(-a)) != -a","not (-a).is_rational or ℝ.from_rat(s0(-a)) = -a"]}
{"goal":"exists(k0: ℚ) { -q < k0 and a.gt_rat(k0) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℝ, x1: ℚ) { not x0.gt_rat(x1) or x0.gt_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℚ) { not x2.gt_rat(x3) or x3 < s0(x2, x3) } }","not -q < s0(a, -q) or not a.gt_rat(s0(a, -q))","not a.gt_rat(-q) or -q < s0(a, -q)","not a.gt_rat(-q) or a.gt_rat(s0(a, -q))","a.gt_rat(s0(a, -q))","-q < s0(a, -q)","not -q < s0(a, -q)"]}
{"goal":"a >= ℝ.from_rat(x)","proof":["not a.gt_rat(x) or a > ℝ.from_rat(x)","not a > ℝ.from_rat(x) or not a <= ℝ.from_rat(x)","a <= ℝ.from_rat(x) or ℝ.from_rat(x) <= a","a >= ℝ.from_rat(x) = ℝ.from_rat(x) <= a","not ℝ.from_rat(x) <= a","a <= ℝ.from_rat(x)","a > ℝ.from_rat(x)","not a > ℝ.from_rat(x)"]}
{"goal":"-a <= -ℝ.from_rat(x)","proof":["not ℝ.from_rat(x) <= a or -a <= -ℝ.from_rat(x)","not ℝ.from_rat(x) <= a","a >= ℝ.from_rat(x) = ℝ.from_rat(x) <= a"]}
{"goal":"ℝ.from_rat(q) <= ℝ.from_rat(-x)","proof":["ℝ.from_rat(q) <= -ℝ.from_rat(x)","-ℝ.from_rat(x) = ℝ.from_rat(-x)"]}
{"goal":"q <= -x","proof":["ℝ.from_rat(q) <= ℝ.from_rat(-x) = q <= -x"]}
{"goal":"-q >= x","proof":["not q <= ℚ.0 - x or -q >= -(ℚ.0 - x)","-(ℚ.0 - x) = x - ℚ.0","ℚ.0 - x = -x","x - ℚ.0 = x","not -q >= x - ℚ.0","q <= ℚ.0 - x","not -q >= -(ℚ.0 - x)","-q >= -(ℚ.0 - x)"]}
{"goal":"false","proof":["-q >= x != -q < x","not -q >= x or not -q < x"]}
{"goal":"not a.gt_rat(-q)","proof":[]}
{"goal":"a <= ℝ.from_rat(r)","proof":["not a > ℝ.from_rat(r) or a.gt_rat(r)","a > ℝ.from_rat(r) or a <= ℝ.from_rat(r)","not a > ℝ.from_rat(r)","a > ℝ.from_rat(r)"]}
{"goal":"-a >= -ℝ.from_rat(r)","proof":["not a <= ℝ.from_rat(r) or -ℝ.from_rat(r) <= -a","-a >= -ℝ.from_rat(r) = -ℝ.from_rat(r) <= -a","-ℝ.from_rat(r) <= -a","not -ℝ.from_rat(r) <= -a"]}
{"goal":"q >= -r","proof":["ℝ.from_rat(-r) <= ℝ.from_rat(q) = -r <= q","not -r <= q or -r < q or -r = q","-ℝ.from_rat(r) = ℝ.from_rat(-r)","-a >= ℝ.from_rat(-r)","ℝ.from_rat(q) >= ℝ.from_rat(-r) = ℝ.from_rat(-r) <= ℝ.from_rat(q)","not q > -r or q >= -r","not q > -r","q > -r = -r < q","not -r < q","-r != q or q >= -r","-r != q","ℝ.from_rat(q) >= ℝ.from_rat(-r)","ℝ.from_rat(-r) <= ℝ.from_rat(q)","not -r <= q","-r <= q"]}
{"goal":"-r <= q","proof":["ℝ.from_rat(-r) <= ℝ.from_rat(q) = -r <= q","-ℝ.from_rat(r) = ℝ.from_rat(-r)","ℝ.from_rat(q) >= -ℝ.from_rat(r) = -ℝ.from_rat(r) <= ℝ.from_rat(q)"]}
{"goal":"r >= -q","proof":["not ℚ.0 - r <= q or -(ℚ.0 - r) >= -q","-(ℚ.0 - r) = r - ℚ.0","ℚ.0 - r = -r","r - ℚ.0 = r","not r - ℚ.0 >= -q","ℚ.0 - r <= q","not -(ℚ.0 - r) >= -q","-(ℚ.0 - r) >= -q"]}
{"goal":"is_least_of_coml(a.gt_rat, -q)","proof":["let s0: (ℚ -> Bool, ℚ) -> ℚ satisfy { forall(x0: ℚ -> Bool, x1: ℚ) { not is_least_of_coml(x0, x1) or not x0(x1) } and forall(x2: ℚ -> Bool, x3: ℚ, x4: ℚ) { not is_least_of_coml(x2, x3) or x4 >= x3 or x2(x4) } and forall(x5: ℚ -> Bool, x6: ℚ) { not x5(s0(x5, x6)) or is_least_of_coml(x5, x6) or x5(x6) } and forall(x7: ℚ -> Bool, x8: ℚ) { not s0(x7, x8) >= x8 or is_least_of_coml(x7, x8) or x7(x8) } }","s0(a.gt_rat, -q) >= -q or a.gt_rat(s0(a.gt_rat, -q))","not s0(a.gt_rat, -q) >= -q or is_least_of_coml(a.gt_rat, -q) or a.gt_rat(-q)","not a.gt_rat(s0(a.gt_rat, -q)) or is_least_of_coml(a.gt_rat, -q) or a.gt_rat(-q)","not a.gt_rat(s0(a.gt_rat, -q))","not s0(a.gt_rat, -q) >= -q","s0(a.gt_rat, -q) >= -q"]}
{"goal":"neg_rational","proof":["not coml_has_least(a.gt_rat) or a.is_rational","not coml_has_least(a.gt_rat)","not is_least_of_coml(a.gt_rat, -q) or coml_has_least(a.gt_rat)"]}
{"goal":"a.is_irrational implies (-a).is_irrational","proof":["not (-a).is_rational or a.is_rational","(-a).is_irrational != (-a).is_rational","a.is_irrational != a.is_rational","(-a).is_irrational or (-a).is_rational","(-a).is_rational","not a.is_irrational or not a.is_rational","a.is_rational","not a.is_rational"]}
{"goal":"irrational_iff_neg_irrational","proof":["(-a).is_irrational or a.is_irrational","not (-a).is_irrational or not a.is_irrational","not a.is_irrational","(-a).is_irrational","not a.is_rational or (-a).is_rational","(-a).is_irrational != (-a).is_rational","a.is_irrational != a.is_rational","a.is_irrational or a.is_rational","a.is_rational","not (-a).is_irrational or not (-a).is_rational","(-a).is_rational","not (-a).is_rational"]}
{"goal":"b.is_rational","proof":["not (-b).is_rational or b.is_rational","not (-b).is_rational","not (-a).is_rational","not a.is_rational or (-a).is_rational"]}
{"goal":"a = b","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { not x0.is_rational or ℝ.from_rat(s0(x0)) = x0 } and forall(x1: ℚ, x2: ℝ) { ℝ.from_rat(x1) != x2 or x2.is_rational } }","not a.is_rational or ℝ.from_rat(s0(a)) = a","not b.is_rational or ℝ.from_rat(s0(b)) = b","--ℝ.from_rat(s0(a)) = ℝ.from_rat(s0(a))","--ℝ.from_rat(s0(b)) = ℝ.from_rat(s0(b))","ℝ.from_rat(s0(b)) = b","ℝ.from_rat(s0(a)) = a"]}
{"goal":"a.is_irrational","proof":["(-a).is_irrational = a.is_irrational","not (-a).is_irrational","not (-a).is_rational or a.is_rational","(-a).is_irrational != (-a).is_rational","not (-a).is_rational","(-a).is_irrational or (-a).is_rational"]}
{"goal":"b.is_irrational","proof":["(-a).is_irrational = a.is_irrational","(-b).is_irrational = b.is_irrational"]}
{"goal":"(-b).gt_rat(-r)","proof":["not (-a).gt_rat(-r)"]}
{"goal":"a < ℝ.from_rat(r)","proof":["a < ℝ.from_rat(--r) = neg_gt(a, -r)","not is_dedekind_cut(neg_gt(a)) or ℝ.new(neg_gt(a)).gt_rat(-r) = neg_gt(a, -r)","--ℝ.from_rat(r) = ℝ.from_rat(r)","-ℝ.from_rat(-r) = ℝ.from_rat(--r)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","not a < --ℝ.from_rat(r)","ℝ.new(neg_gt(a)) = -a","is_dedekind_cut(neg_gt(a))","not a < -ℝ.from_rat(-r)","not a < ℝ.from_rat(--r)","not neg_gt(a, -r)","not ℝ.new(neg_gt(a)).gt_rat(-r) or not is_dedekind_cut(neg_gt(a)) or neg_gt(a, -r)","ℝ.new(neg_gt(a)).gt_rat(-r)"]}
{"goal":"b < ℝ.from_rat(r)","proof":["b < ℝ.from_rat(--r) = neg_gt(b, -r)","not is_dedekind_cut(neg_gt(b)) or ℝ.new(neg_gt(b)).gt_rat(-r) = neg_gt(b, -r)","--ℝ.from_rat(r) = ℝ.from_rat(r)","-ℝ.from_rat(-r) = ℝ.from_rat(--r)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","not b < --ℝ.from_rat(r)","ℝ.new(neg_gt(b)) = -b","is_dedekind_cut(neg_gt(b))","not b < -ℝ.from_rat(-r)","not b < ℝ.from_rat(--r)","not neg_gt(b, -r)","not ℝ.new(neg_gt(b)).gt_rat(-r) or not is_dedekind_cut(neg_gt(b)) or neg_gt(b, -r)","ℝ.new(neg_gt(b)).gt_rat(-r)"]}
{"goal":"not a.gt_rat(r)","proof":["not a.gt_rat(r) or a > ℝ.from_rat(r)","a > ℝ.from_rat(r)","not a > ℝ.from_rat(r) or not a <= ℝ.from_rat(r)","not a < ℝ.from_rat(r) or a <= ℝ.from_rat(r)","not a <= ℝ.from_rat(r)","a <= ℝ.from_rat(r)"]}
{"goal":"not b.gt_rat(r)","proof":["not b.gt_rat(r) or b > ℝ.from_rat(r)","b > ℝ.from_rat(r)","not b > ℝ.from_rat(r) or not b <= ℝ.from_rat(r)","not b < ℝ.from_rat(r) or b <= ℝ.from_rat(r)","not b <= ℝ.from_rat(r)","b <= ℝ.from_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["a.gt_rat(r)"]}
{"goal":"not (-a).gt_rat(-r)","proof":[]}
{"goal":"not (-b).gt_rat(-r)","proof":["(-a).gt_rat(-r)"]}
{"goal":"not a < ℝ.from_rat(r)","proof":["a < ℝ.from_rat(--r) = neg_gt(a, -r)","not is_dedekind_cut(neg_gt(a)) or ℝ.new(neg_gt(a)).gt_rat(-r) = neg_gt(a, -r)","--ℝ.from_rat(r) = ℝ.from_rat(r)","-ℝ.from_rat(-r) = ℝ.from_rat(--r)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","a < --ℝ.from_rat(r)","ℝ.new(neg_gt(a)) = -a","is_dedekind_cut(neg_gt(a))","a < -ℝ.from_rat(-r)","a < ℝ.from_rat(--r)","neg_gt(a, -r)","not is_dedekind_cut(neg_gt(a)) or not neg_gt(a, -r) or ℝ.new(neg_gt(a)).gt_rat(-r)","not ℝ.new(neg_gt(a)).gt_rat(-r)"]}
{"goal":"not b < ℝ.from_rat(r)","proof":["b < ℝ.from_rat(--r) = neg_gt(b, -r)","not is_dedekind_cut(neg_gt(b)) or ℝ.new(neg_gt(b)).gt_rat(-r) = neg_gt(b, -r)","--ℝ.from_rat(r) = ℝ.from_rat(r)","-ℝ.from_rat(-r) = ℝ.from_rat(--r)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","b < --ℝ.from_rat(r)","ℝ.new(neg_gt(b)) = -b","is_dedekind_cut(neg_gt(b))","b < -ℝ.from_rat(-r)","b < ℝ.from_rat(--r)","neg_gt(b, -r)","not is_dedekind_cut(neg_gt(b)) or not neg_gt(b, -r) or ℝ.new(neg_gt(b)).gt_rat(-r)","not ℝ.new(neg_gt(b)).gt_rat(-r)"]}
{"goal":"a > ℝ.from_rat(r)","proof":["not a <= ℝ.from_rat(r) or a < ℝ.from_rat(r) or ℝ.from_rat(r) = a","a > ℝ.from_rat(r) or a <= ℝ.from_rat(r)","a <= ℝ.from_rat(r)","ℝ.from_rat(r) = a","ℝ.from_rat(r) != a or a.is_rational"]}
{"goal":"b > ℝ.from_rat(r)","proof":["not b <= ℝ.from_rat(r) or b < ℝ.from_rat(r) or ℝ.from_rat(r) = b","b > ℝ.from_rat(r) or b <= ℝ.from_rat(r)","b <= ℝ.from_rat(r)","ℝ.from_rat(r) = b","ℝ.from_rat(r) != b or b.is_rational","b.is_irrational != b.is_rational","not b.is_irrational or not b.is_rational","b.is_rational","not b.is_rational"]}
{"goal":"a.gt_rat(r)","proof":["not a > ℝ.from_rat(r) or a.gt_rat(r)"]}
{"goal":"b.gt_rat(r)","proof":["not b > ℝ.from_rat(r) or b.gt_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["not a.gt_rat(r)"]}
{"goal":"a.gt_rat = b.gt_rat","proof":["let s0: ℚ satisfy { b.gt_rat(s0) != a.gt_rat(s0) }","b.gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"a = b","proof":["0 + a = a","0 + b = b","ℝ.new((0 + a).gt_rat) = 0 + a","ℝ.new((0 + b).gt_rat) = 0 + b"]}
{"goal":"neg_eq","proof":[]}
{"goal":"lt_swap_neg","proof":["not a <= b or -b <= -a","not -b <= -a or -b < -a or -b = -a","-b != -a or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","-b != -a","-b <= -a","not -b <= -a"]}
{"goal":"a > ℝ.from_rat(r)","proof":["not a.gt_rat(r) or a > ℝ.from_rat(r)"]}
{"goal":"--a > ℝ.from_rat(r)","proof":["not -a < -ℝ.from_rat(r) or --ℝ.from_rat(r) < --a","not ℝ.from_rat(r) < a or -a < -ℝ.from_rat(r)","--ℝ.from_rat(r) = ℝ.from_rat(r)","--a > --ℝ.from_rat(r) = --ℝ.from_rat(r) < --a","a > ℝ.from_rat(r) = ℝ.from_rat(r) < a","ℝ.from_rat(r) < a","not --a > --ℝ.from_rat(r)","not --ℝ.from_rat(r) < --a","-a < -ℝ.from_rat(r)","not -a < -ℝ.from_rat(r)"]}
{"goal":"(--a).gt_rat(r)","proof":["not --a > ℝ.from_rat(r) or (--a).gt_rat(r)"]}
{"goal":"(--a).gt_rat(r) = a.gt_rat(r)","proof":["not (--a).gt_rat(r)"]}
{"goal":"not a.gt_rat(r)","proof":[]}
{"goal":"a <= ℝ.from_rat(r)","proof":["not a > ℝ.from_rat(r) or a.gt_rat(r)","a > ℝ.from_rat(r) or a <= ℝ.from_rat(r)","not a > ℝ.from_rat(r)","a > ℝ.from_rat(r)"]}
{"goal":"--a <= ℝ.from_rat(r)","proof":["not -ℝ.from_rat(r) <= -a or --a <= --ℝ.from_rat(r)","not a <= ℝ.from_rat(r) or -ℝ.from_rat(r) <= -a","--ℝ.from_rat(r) = ℝ.from_rat(r)","not --a <= --ℝ.from_rat(r)","-ℝ.from_rat(r) <= -a","not -ℝ.from_rat(r) <= -a"]}
{"goal":"not (--a).gt_rat(r)","proof":["not (--a).gt_rat(r) or --a > ℝ.from_rat(r)","not --a > ℝ.from_rat(r) or not --a <= ℝ.from_rat(r)","--a > ℝ.from_rat(r)","not --a > ℝ.from_rat(r)"]}
{"goal":"(--a).gt_rat(r) = a.gt_rat(r)","proof":["(--a).gt_rat(r)"]}
{"goal":"(--a).gt_rat = a.gt_rat","proof":["let s0: ℚ satisfy { (--a).gt_rat(s0) != a.gt_rat(s0) }","(--a).gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"neg_neg","proof":["ℝ.new(neg_gt(-a)) = --a","0 + a = a","ℝ.new((0 + a).gt_rat) = 0 + a","ℝ.new(ℝ.new(neg_gt(-a)).gt_rat) = ℝ.new(neg_gt(-a))"]}
{"goal":"neg_zero","proof":["-ℝ.from_rat(ℚ.0) = ℝ.from_rat(-ℚ.0)","ℚ.0 - ℚ.0 = -ℚ.0","ℚ.0 - ℚ.0 = ℚ.0"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 < ℝ.from_rat(s0(x0)) } }","not a < ℝ.from_rat(s0(a))","a < ℝ.from_rat(s0(a))"]}
{"goal":"exists(k0: ℚ) { a.gt_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 > ℝ.from_rat(s0(x0)) } }","not a.gt_rat(s0(a))","not a > ℝ.from_rat(s0(a)) or a.gt_rat(s0(a))","not a > ℝ.from_rat(s0(a))","a > ℝ.from_rat(s0(a))"]}
{"goal":"exists(k0: ℕ) { ub - q < ℚ.from_nat(k0) ⋅ r }","proof":["let s0: ℚ -> ℕ satisfy { forall(x0: ℚ) { x0 < ℚ.from_nat(s0(x0)) } }","not ub - q < ℚ.from_nat(s0((ub - q) / r)) ⋅ r","not (ub - q) / r < ℚ.from_nat(s0((ub - q) / r)) or not r > ℚ.0 or ub - q < ℚ.from_nat(s0((ub - q) / r)) ⋅ r","(ub - q) / r < ℚ.from_nat(s0((ub - q) / r))","not (ub - q) / r < ℚ.from_nat(s0((ub - q) / r))"]}
{"goal":"ub < ℚ.from_nat(m) ⋅ r + q","proof":["not ub - q < ℚ.from_nat(m) ⋅ r or ub - q + q < ℚ.from_nat(m) ⋅ r + q","ub - q + q = ub","not ub - q + q < ℚ.from_nat(m) ⋅ r + q"]}
{"goal":"a <= a + ℝ.from_rat(r)","proof":["not a <= a or not 0 <= ℝ.from_rat(r) or a + 0 <= a + ℝ.from_rat(r)","ℝ.from_rat(r) > ℝ.from_rat(ℚ.0) = r > ℚ.0","ℝ.from_rat(r) > ℝ.from_rat(ℚ.0) = ℝ.from_rat(ℚ.0) < ℝ.from_rat(r)","not 0 < ℝ.from_rat(r) or 0 <= ℝ.from_rat(r)","a + 0 = a","a <= a","not a + 0 <= a + ℝ.from_rat(r)","ℝ.from_rat(r) > ℝ.from_rat(ℚ.0)","ℝ.from_rat(ℚ.0) < ℝ.from_rat(r)","0 < ℝ.from_rat(r)","not 0 <= ℝ.from_rat(r)","0 <= ℝ.from_rat(r)"]}
{"goal":"f(ℕ.0)","proof":["a + ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r) != a or f(ℕ.0)","ℝ.new(add_gt(0, a)) = 0 + a","ℝ.new(add_gt(ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r), a)) = ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r) + a","a + ℝ.from_rat(r) = ℝ.from_rat(r) + a","a + ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r) = ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r) + a","ℚ.0 != ℚ.0 or ℚ.0 ⋅ r = ℚ.0","-ℤ.from_nat(ℕ.0) = lib(int.int_base).sub_nat(ℕ.0, ℕ.0)","ℝ.new((ℚ.from_nat(ℕ.0) ⋅ r).gt) = ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r)","ℝ.new(ℚ.0.gt) = ℝ.from_rat(ℚ.0)","ℚ.from_int(ℤ.from_nat(ℕ.0)) = ℚ.from_nat(ℕ.0)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","lib(int.int_base).sub_nat(ℕ.0, ℕ.0) = ℤ.from_nat(ℕ.0)","ℕ.0 != ℕ.0 or ℤ.from_nat(ℕ.0) = ℤ.0","0 + (ℝ.from_rat(r) + a) = ℝ.from_rat(r) + a","ℤ.from_nat(ℕ.0) = ℤ.0","a + ℝ.from_rat(ℚ.from_nat(ℕ.0) ⋅ r) != a","ℚ.0 ⋅ r = ℚ.0"]}
{"goal":"a = a + ℝ.from_rat(ℚ.from_nat(n) ⋅ r)","proof":["not f(n) or a + ℝ.from_rat(ℚ.from_nat(n) ⋅ r) = a"]}
{"goal":"a = a + ℝ.from_rat(r)","proof":[]}
{"goal":"a = a + (ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r))","proof":["a + (ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r)) = a + ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r)"]}
{"goal":"a = a + ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r)","proof":["ℚ.from_nat(n) ⋅ r + ℚ.from_nat(ℕ.1) ⋅ r = (ℚ.from_nat(n) + ℚ.from_nat(ℕ.1)) ⋅ r","ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r) = ℝ.from_rat(ℚ.from_nat(n) ⋅ r + r)","ℚ.from_nat(n) + ℚ.from_nat(ℕ.1) = ℚ.from_nat(n + ℕ.1)","ℝ.new(add_gt(ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r), a)) = ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r) + a","ℝ.new(add_gt(ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r), a)) = ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r) + a","a + (ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r)) = ℝ.from_rat(ℚ.from_nat(n) ⋅ r) + ℝ.from_rat(r) + a","a + ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r) = ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r) + a","ℝ.new((ℚ.from_nat(n + ℕ.1) ⋅ r).gt) = ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r)","ℝ.new((ℚ.from_nat(n) ⋅ r + r).gt) = ℝ.from_rat(ℚ.from_nat(n) ⋅ r + r)","ℚ.1 ⋅ r = r"]}
{"goal":"f(n + ℕ.1)","proof":["a + ℝ.from_rat(ℚ.from_nat(n + ℕ.1) ⋅ r) != a or f(n + ℕ.1)"]}
{"goal":"f(m + ℕ.1)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(ℕ.0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(ℕ.0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + ℕ.1)","not f(s0(f).suc) or not f(ℕ.0) or f(m + ℕ.1)","not f(s0(f).suc)","not f(ℕ.0) or f(s0(f)) or f(m + ℕ.1)","f(s0(f))","s0(f) + ℕ.1 = s0(f).suc","f(s0(f) + ℕ.1)","not f(s0(f) + ℕ.1)"]}
{"goal":"a = a + ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r)","proof":["not f(m + ℕ.1) or a + ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) = a"]}
{"goal":"ℚ.from_nat(m + ℕ.1) > ℚ.from_nat(m)","proof":["not m < m + ℕ.1 or ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)","m ∈ (m + ℕ.1).range = m < m + ℕ.1","ℚ.from_nat(m + ℕ.1) > ℚ.from_nat(m) = ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)","not ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)","m ∈ (m + ℕ.1).range","not m < m + ℕ.1"]}
{"goal":"ℚ.from_nat(m + ℕ.1) ⋅ r > ℚ.from_nat(m) ⋅ r","proof":["not r > ℚ.0 or not ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1) or ℚ.from_nat(m) ⋅ r < ℚ.from_nat(m + ℕ.1) ⋅ r","ℚ.from_nat(m + ℕ.1) > ℚ.from_nat(m) = ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)","ℚ.from_nat(m + ℕ.1) ⋅ r > ℚ.from_nat(m) ⋅ r = ℚ.from_nat(m) ⋅ r < ℚ.from_nat(m + ℕ.1) ⋅ r","not ℚ.from_nat(m) ⋅ r < ℚ.from_nat(m + ℕ.1) ⋅ r","ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)","not ℚ.from_nat(m) < ℚ.from_nat(m + ℕ.1)"]}
{"goal":"ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r).gt_rat(ℚ.from_nat(m) ⋅ r)","proof":["ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(ℚ.from_nat(m) ⋅ r) = ℚ.from_nat(m + ℕ.1) ⋅ r > ℚ.from_nat(m) ⋅ r","not ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(ℚ.from_nat(m) ⋅ r) or ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r).gt_rat(ℚ.from_nat(m) ⋅ r)","ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(ℚ.from_nat(m) ⋅ r)","not ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(ℚ.from_nat(m) ⋅ r)"]}
{"goal":"add_gt(a, ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r), q + ℚ.from_nat(m) ⋅ r)","proof":["not a.gt_rat(q) or not ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r).gt_rat(ℚ.from_nat(m) ⋅ r) or q + ℚ.from_nat(m) ⋅ r != q + ℚ.from_nat(m) ⋅ r or add_gt(a, ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r), q + ℚ.from_nat(m) ⋅ r)","not a.gt_rat(q) or not ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r).gt_rat(ℚ.from_nat(m) ⋅ r) or add_gt(a, ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r), q + ℚ.from_nat(m) ⋅ r)"]}
{"goal":"a.gt_rat(q + ℚ.from_nat(m) ⋅ r)","proof":["not add_gt(a, ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r), q + ℚ.from_nat(m) ⋅ r) or a + ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(q + ℚ.from_nat(m) ⋅ r)","not a > ℝ.from_rat(q + ℚ.from_nat(m) ⋅ r) or a.gt_rat(q + ℚ.from_nat(m) ⋅ r)","not a > ℝ.from_rat(q + ℚ.from_nat(m) ⋅ r)","a + ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(q + ℚ.from_nat(m) ⋅ r)","not a + ℝ.from_rat(ℚ.from_nat(m + ℕ.1) ⋅ r) > ℝ.from_rat(q + ℚ.from_nat(m) ⋅ r)"]}
{"goal":"a.gt_rat(ub)","proof":["not a.gt_rat(q + ℚ.from_nat(m) ⋅ r) or a.gt_rat(ub) or q + ℚ.from_nat(m) ⋅ r <= ub","ℚ.from_nat(m) ⋅ r + q > ub != ℚ.from_nat(m) ⋅ r + q <= ub","ℚ.from_nat(m) ⋅ r + q > ub = ub < ℚ.from_nat(m) ⋅ r + q","q + ℚ.from_nat(m) ⋅ r = ℚ.from_nat(m) ⋅ r + q","not a.gt_rat(q + ℚ.from_nat(m) ⋅ r) or q + ℚ.from_nat(m) ⋅ r <= ub","not ℚ.from_nat(m) ⋅ r + q > ub or not ℚ.from_nat(m) ⋅ r + q <= ub","q + ℚ.from_nat(m) ⋅ r <= ub","ℚ.from_nat(m) ⋅ r + q <= ub","ℚ.from_nat(m) ⋅ r + q > ub","not ℚ.from_nat(m) ⋅ r + q > ub"]}
{"goal":"false","proof":["not a.gt_rat(ub) or a > ℝ.from_rat(ub)","not a > ℝ.from_rat(ub) or not a <= ℝ.from_rat(ub)","not a < ℝ.from_rat(ub) or a <= ℝ.from_rat(ub)","a <= ℝ.from_rat(ub)","a > ℝ.from_rat(ub)","not a > ℝ.from_rat(ub)"]}
{"goal":"lt_add_pos_rat","proof":["not a <= a + ℝ.from_rat(r) or a < a + ℝ.from_rat(r) or a + ℝ.from_rat(r) = a"]}
{"goal":"ℝ.from_rat(ε) > 0","proof":["ℝ.from_rat(ε).gt_rat(ℚ.0) = ε > ℚ.0","not ℝ.from_rat(ε).is_positive or ℝ.from_rat(ε) > 0","not ℝ.from_rat(ε).is_positive","ℝ.from_rat(ε).gt_rat(ℚ.0) = ℝ.from_rat(ε).is_positive"]}
{"goal":"a < a + ℝ.from_rat(ε)","proof":["not ε > ℚ.0 or a < a + ℝ.from_rat(ε)"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) and ℝ.from_rat(k0) < a + ℝ.from_rat(ε) }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not ℝ.from_rat(s0(a, a + ℝ.from_rat(ε))) < a + ℝ.from_rat(ε) or not a < ℝ.from_rat(s0(a, a + ℝ.from_rat(ε)))","not a < a + ℝ.from_rat(ε) or ℝ.from_rat(s0(a, a + ℝ.from_rat(ε))) < a + ℝ.from_rat(ε)","not a < a + ℝ.from_rat(ε) or a < ℝ.from_rat(s0(a, a + ℝ.from_rat(ε)))","a < ℝ.from_rat(s0(a, a + ℝ.from_rat(ε)))","ℝ.from_rat(s0(a, a + ℝ.from_rat(ε))) < a + ℝ.from_rat(ε)","not ℝ.from_rat(s0(a, a + ℝ.from_rat(ε))) < a + ℝ.from_rat(ε)"]}
{"goal":"r + ε = top","proof":["top + -ε = top - ε","top - ε + ε = top","top + -ε + ε != top"]}
{"goal":"ℝ.from_rat(r + ε) < a + ℝ.from_rat(ε)","proof":["not ℝ.from_rat(top) < a + ℝ.from_rat(ε)"]}
{"goal":"ℝ.from_rat(r) < a","proof":["not ℝ.from_rat(r) + ℝ.from_rat(ε) < a + ℝ.from_rat(ε) or ℝ.from_rat(r) < a","ℝ.from_rat(r) + ℝ.from_rat(ε) = ℝ.from_rat(r + ε)","not ℝ.from_rat(r) + ℝ.from_rat(ε) < a + ℝ.from_rat(ε)"]}
{"goal":"a < ℝ.from_rat(top)","proof":[]}
{"goal":"rat_window","proof":["not a < ℝ.from_rat(r + ε) or not ℝ.from_rat(r) < a","not a < ℝ.from_rat(r + ε)","a < ℝ.from_rat(r + ε)"]}
{"goal":"exists(k0: ℚ) { a + -a < ℝ.from_rat(k0) and ℝ.from_rat(k0) < 0 }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not a + -a < ℝ.from_rat(s0(a + -a, 0)) or not ℝ.from_rat(s0(a + -a, 0)) < 0","not a + -a < 0 or ℝ.from_rat(s0(a + -a, 0)) < 0","not a + -a < 0 or a + -a < ℝ.from_rat(s0(a + -a, 0))","ℝ.from_rat(s0(a + -a, 0)) < 0","a + -a < ℝ.from_rat(s0(a + -a, 0))","not a + -a < ℝ.from_rat(s0(a + -a, 0))"]}
{"goal":"ℝ.from_rat(-r) > 0","proof":["not ℝ.from_rat(r) < 0 or -0 < -ℝ.from_rat(r)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","ℝ.from_rat(-r) > 0 = 0 < ℝ.from_rat(-r)","not 0 < ℝ.from_rat(-r)","not 0 < -ℝ.from_rat(r)","-0 < -ℝ.from_rat(r)","not -0 < -ℝ.from_rat(r)"]}
{"goal":"-r > ℚ.0","proof":["ℝ.from_rat(-r).gt_rat(ℚ.0) = -r > ℚ.0","not ℝ.from_rat(-r).gt_rat(ℚ.0)","not ℝ.from_rat(-r) > 0 or ℝ.from_rat(-r).is_positive","ℝ.from_rat(-r).gt_rat(ℚ.0) = ℝ.from_rat(-r).is_positive","ℝ.from_rat(-r).is_positive","not ℝ.from_rat(-r).is_positive"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(k0) < a and a < ℝ.from_rat(k0 + -r) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not a < ℝ.from_rat(s0(a, -r) + -r) or not ℝ.from_rat(s0(a, -r)) < a","not -r > ℚ.0 or a < ℝ.from_rat(s0(a, -r) + -r)","not -r > ℚ.0 or ℝ.from_rat(s0(a, -r)) < a","ℝ.from_rat(s0(a, -r)) < a","a < ℝ.from_rat(s0(a, -r) + -r)"]}
{"goal":"a > ℝ.from_rat(b)","proof":["a > ℝ.from_rat(b) = ℝ.from_rat(b) < a"]}
{"goal":"-a > -ℝ.from_rat(b + -r)","proof":["not a < ℝ.from_rat(b - r) or -ℝ.from_rat(b - r) < -a","b + -r = b - r","not -a > -ℝ.from_rat(b - r)","a < ℝ.from_rat(b - r)","-a > -ℝ.from_rat(b - r) = -ℝ.from_rat(b - r) < -a","-ℝ.from_rat(b - r) < -a","not -ℝ.from_rat(b - r) < -a"]}
{"goal":"add_gt(a, -a, b + -(b + -r))","proof":["not a.gt_rat(b) or not (-a).gt_rat(-(b + -r)) or b + -(b + -r) != b + -(b + -r) or add_gt(a, -a, b + -(b + -r))","not -a > ℝ.from_rat(-(b + -r)) or (-a).gt_rat(-(b + -r))","not a > ℝ.from_rat(b) or a.gt_rat(b)","-ℝ.from_rat(b + -r) = ℝ.from_rat(-(b + -r))","a.gt_rat(b)","-a > ℝ.from_rat(-(b + -r))","not a.gt_rat(b) or not (-a).gt_rat(-(b + -r)) or add_gt(a, -a, b + -(b + -r))","(-a).gt_rat(-(b + -r))","not (-a).gt_rat(-(b + -r))"]}
{"goal":"a + -a > ℝ.from_rat(b) + -ℝ.from_rat(b + -r)","proof":["not add_gt(a, -a, b + -(b + -r)) or a + -a > ℝ.from_rat(b + -(b + -r))","ℝ.from_rat(b) + ℝ.from_rat(-(b + -r)) = ℝ.from_rat(b + -(b + -r))","-ℝ.from_rat(b + -r) = ℝ.from_rat(-(b + -r))","not a + -a > ℝ.from_rat(b) + ℝ.from_rat(-(b + -r))","a + -a > ℝ.from_rat(b + -(b + -r))","not a + -a > ℝ.from_rat(b + -(b + -r))"]}
{"goal":"a + -a > ℝ.from_rat(b) + ℝ.from_rat(-b + r)","proof":["b + (-b + r) = b + -b + r","ℝ.from_rat(b) + ℝ.from_rat(-(b + -r)) = ℝ.from_rat(b + -(b + -r))","ℝ.from_rat(b) + ℝ.from_rat(-b + r) = ℝ.from_rat(b + (-b + r))","b - (b + -r) = --r","-(ℚ.0 - r) = r - ℚ.0","b + -(b + -r) = b - (b + -r)","-ℝ.from_rat(b + -r) = ℝ.from_rat(-(b + -r))","a + -a > ℝ.from_rat(b + (-b + r)) = ℝ.from_rat(b + (-b + r)) < a + -a","a + -a > ℝ.from_rat(b) + -ℝ.from_rat(b + -r) = ℝ.from_rat(b) + -ℝ.from_rat(b + -r) < a + -a","ℚ.0 - r = -r","b + -b = ℚ.0","r - ℚ.0 = r","ℚ.0 + r = r"]}
{"goal":"a + -a > ℝ.from_rat(b + -b + r)","proof":["b + (-b + r) = b + -b + r","ℝ.from_rat(b) + ℝ.from_rat(-b + r) = ℝ.from_rat(b + (-b + r))"]}
{"goal":"a + -a > ℝ.from_rat(r)","proof":["a + -a = -a + a","-a + a > ℝ.from_rat(r) = ℝ.from_rat(r) < -a + a","a + -a > ℝ.from_rat(b + -b + r) = ℝ.from_rat(b + -b + r) < a + -a","ℝ.new((b + -b + r).gt) = ℝ.from_rat(b + -b + r)","ℝ.new(r.gt) = ℝ.from_rat(r)","b + -b = ℚ.0","ℚ.0 + r = r"]}
{"goal":"false","proof":["not a + -a > ℝ.from_rat(r) or not a + -a <= ℝ.from_rat(r)","not a + -a < ℝ.from_rat(r) or a + -a <= ℝ.from_rat(r)","not a + -a <= ℝ.from_rat(r)","a + -a <= ℝ.from_rat(r)"]}
{"goal":"add_neg_gte_zero","proof":["a + -a >= 0 or a + -a < 0"]}
{"goal":"add_gt(a, -a, r)","proof":["not a + -a > ℝ.from_rat(r) or add_gt(a, -a, r)","not (a + -a).gt_rat(r) or a + -a > ℝ.from_rat(r)","not a + -a > ℝ.from_rat(r)","a + -a > ℝ.from_rat(r)"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { a.gt_rat(k0) and (-a).gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: ℝ, x10: ℚ, x11: ℝ, x12: ℚ, x13: ℚ) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not (-a).gt_rat(s1(a, -a, r)) or not a.gt_rat(s0(a, -a, r)) or s0(a, -a, r) + s1(a, -a, r) != r","not add_gt(a, -a, r) or s0(a, -a, r) + s1(a, -a, r) = r","not add_gt(a, -a, r) or (-a).gt_rat(s1(a, -a, r))","not add_gt(a, -a, r) or a.gt_rat(s0(a, -a, r))","a.gt_rat(s0(a, -a, r))","(-a).gt_rat(s1(a, -a, r))","s0(a, -a, r) + s1(a, -a, r) = r"]}
{"goal":"not a.gt_rat(-r2)","proof":["not is_dedekind_cut(neg_gt(a)) or ℝ.new(neg_gt(a)).gt_rat(r2) = neg_gt(a, r2)","not a.gt_rat(-r2) or not neg_gt(a, r2)","not neg_gt(a, r2)","ℝ.new(neg_gt(a)) = -a","is_dedekind_cut(neg_gt(a))","not ℝ.new(neg_gt(a)).gt_rat(r2) or not is_dedekind_cut(neg_gt(a)) or neg_gt(a, r2)","ℝ.new(neg_gt(a)).gt_rat(r2)"]}
{"goal":"r1 < -r2","proof":["not a.gt_rat(r1) or a.gt_rat(-r2) or r1 <= -r2","not r1 <= -r2 or r1 < -r2 or -r2 = r1","not r1 <= -r2 or -r2 = r1","a.gt_rat(-r2) or r1 <= -r2","r1 <= -r2","-r2 = r1"]}
{"goal":"r1 + r2 < ℚ.0","proof":["not r1 < -r2 or r1 + r2 < -r2 + r2","-r2 + r2 = ℚ.0","not r1 + r2 < -r2 + r2"]}
{"goal":"0.gt_rat(r)","proof":["ℝ.from_rat(ℚ.0).gt_rat(r) = ℚ.0 > r","ℚ.0 > r1 + r2 = r1 + r2 < ℚ.0"]}
{"goal":"(a + -a).gt_rat(r) = 0.gt_rat(r)","proof":["not (a + -a).gt_rat(r)"]}
{"goal":"add_neg_lte_zero","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not (a + -a).gt_rat(s0(a + -a, 0)) or (a + -a).gt_rat(s0(a + -a, 0)) = 0.gt_rat(s0(a + -a, 0))","not 0.gt_rat(s0(a + -a, 0)) or a + -a <= 0","(a + -a).gt_rat(s0(a + -a, 0)) or a + -a <= 0","not (a + -a).gt_rat(s0(a + -a, 0)) or 0.gt_rat(s0(a + -a, 0))","not 0.gt_rat(s0(a + -a, 0))","(a + -a).gt_rat(s0(a + -a, 0))","not (a + -a).gt_rat(s0(a + -a, 0))"]}
{"goal":"add_neg_eq_zero","proof":["not a + -a <= 0 or a + -a < 0 or a + -a = 0","a + -a <= 0","a + -a >= 0","not a + -a >= 0 or not a + -a < 0","a + -a < 0"]}
{"goal":"a + (b + -b) = a","proof":["a + 0 = 0 + a","b + -b = 0","a + 0 != a","0 + a != a","0 + a = a"]}
{"goal":"a + b + -b = a","proof":["a + (b + -b) = a + b + -b"]}
{"goal":"sub_cancels","proof":["a + b + -b = a + b - b"]}
{"goal":"sub_moves_sides","proof":["a + b - b = a"]}
{"goal":"add_cancel_right","proof":["b + c != a + c or b + c - c = a","b + c - c = b","b + c - c != a"]}
{"goal":"add_cancel_left","proof":["b + c != a + c or b = a","a + c = c + a","b + c = c + b","b + c != a + c","b + c = c + a"]}
{"goal":"lt_add_right","proof":["not a <= b or not c <= c or a + c <= b + c","b + c != a + c or b = a","not a + c <= b + c or a + c < b + c or b + c = a + c","not a < b or a <= b","not a < b or b != a","b != a","c <= c","a <= b","not a + c <= b + c or b + c = a + c","b + c != a + c","not a + c <= b + c"]}
{"goal":"lt_add_left","proof":["not a < b or a + c < b + c","c + a = a + c","c + b = b + c","not a + c < c + b","not a + c < b + c"]}
{"goal":"c + -b < a + b + -b","proof":["not c < a + b or c + -b < a + b + -b"]}
{"goal":"lt_add_cancel_left","proof":["a + b + -b = a + b - b","c + -b = c - b","a + b - b = a","not c + -b < a","c + -b < a + b - b"]}
{"goal":"a + b + -b < c + -b","proof":["not a + b < c or a + b + -b < c + -b"]}
{"goal":"lt_add_cancel_right","proof":["a + b + -b = a + b - b","c + -b = c - b","a + b - b = a","not a < c + -b","a + b - b < c + -b"]}
{"goal":"lt_sub_cancel_left","proof":["not c < a + -b or c - -b < a","a + -b = a - b","c + --b = c - -b","--b = b","not c + --b < a","not c - -b < a","c < a + -b","not c < a + -b"]}
{"goal":"lte_add_cancel_left","proof":["not a < c - b or a + b < c","not a + b >= c or not a + b < c","c - b > a or c - b <= a","c - b > a","c - b > a = a < c - b","a + b >= c = c <= a + b","a < c - b","a + b >= c","a + b < c","not a + b < c"]}
{"goal":"lte_add_cancel_right","proof":["not a + b < c or a < c - b","a + b != c or c - b = a","not a + b <= c or a + b < c or a + b = c","a > c - b or a <= c - b","a > c - b","a > c - b = c - b < a","not a < c - b or a <= c - b","not a < c - b","not c - b < a or c - b != a","c - b < a","a + b < c or a + b = c","not a + b < c","c - b != a","a + b = c","a + b != c"]}
{"goal":"add_lt_lt","proof":["not c < d or a + c < a + d","not a < b or a + d < b + d","not a + c < a + d or not a + d < b + d or a + c < b + d","not a + d < b + d or not a + c < a + d","a + d < b + d","a + c < a + d"]}
{"goal":"add_lt_lte","proof":["not a < b or not c < d or a + c < b + d","not c < d","not a < b or a + c < b + c","not c <= d or c < d or d = c","d = c","not a + c < b + c"]}
{"goal":"add_lte_lt","proof":["not a < b or not c < d or a + c < b + d","not a < b","not c < d or a + c < a + d","not a <= b or a < b or b = a","b = a","not a + c < a + d"]}
{"goal":"a + b + -(a + b) = 0","proof":["a + b + -(a + b) = 0"]}
{"goal":"-(a + b) + b + a = 0","proof":["a + (b + -(a + b)) = a + b + -(a + b)","a + (-(a + b) + b) = -(a + b) + b + a","b + -(a + b) = -(a + b) + b"]}
{"goal":"-(a + b) = -a + -b","proof":["-(a + b) + b != 0 - a or 0 - a - b = -(a + b)","-(a + b) + b + a != 0 or -(a + b) + b = 0 - a","0 + -a = 0 - a","0 - a + -b = 0 - a - b","0 + -a = -a","0 + -a + -b != -(a + b)","0 - a + -b != -(a + b)","0 - a - b != -(a + b)","-(a + b) + b = 0 - a","-(a + b) + b != 0 - a"]}
{"goal":"neg_distrib","proof":[]}
{"goal":"neg_distrib_sub","proof":["-a + --b = -(a + -b)","a + -b = a - b","b + -a = b - a","b + -a = -a + b","--b = b"]}
{"goal":"exists(k0: ℚ) { a > ℝ.from_rat(k0) }","proof":["let s0: ℝ -> ℚ satisfy { forall(x0: ℝ) { x0 > ℝ.from_rat(s0(x0)) } }","not a > ℝ.from_rat(s0(a))","a > ℝ.from_rat(s0(a))"]}
{"goal":"exists(k0: ℤ) { r > ℚ.from_int(k0) }","proof":["let s0: ℚ -> ℤ satisfy { forall(x0: ℚ) { x0 > ℚ.from_int(s0(x0)) } }","not r > ℚ.from_int(s0(r))","r > ℚ.from_int(s0(r))"]}
{"goal":"ℝ.from_rat(r) > ℝ.from_rat(ℚ.from_int(n))","proof":["ℝ.from_rat(r) > ℝ.from_rat(ℚ.from_int(n)) = r > ℚ.from_int(n)"]}
{"goal":"ℝ.from_rat(r) > ℝ.from_int(n)","proof":["ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_int(n)"]}
{"goal":"a > ℝ.from_int(n)","proof":["not ℝ.from_int(n) < ℝ.from_rat(r) or not ℝ.from_rat(r) <= a or ℝ.from_int(n) < a","a > ℝ.from_int(n) = ℝ.from_int(n) < a","a > ℝ.from_rat(r) = ℝ.from_rat(r) < a","ℝ.from_rat(r) > ℝ.from_int(n) = ℝ.from_int(n) < ℝ.from_rat(r)","not ℝ.from_int(n) < a","ℝ.from_rat(r) < a","ℝ.from_int(n) < ℝ.from_rat(r)","not ℝ.from_rat(r) < a or ℝ.from_rat(r) <= a","not ℝ.from_int(n) < ℝ.from_rat(r) or not ℝ.from_rat(r) <= a","ℝ.from_rat(r) <= a","not ℝ.from_rat(r) <= a"]}
{"goal":"gt_some_int","proof":["not a > ℝ.from_int(n)"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) }","proof":["let s0: ℕ satisfy { true }","let s1: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s1(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s1(x3, x2) + x2) } }","not a < ℝ.from_rat(s1(a, lib(rat).iop(s0)) + lib(rat).iop(s0))","not lib(rat).iop(s0) > ℚ.0 or a < ℝ.from_rat(s1(a, lib(rat).iop(s0)) + lib(rat).iop(s0))","not lib(rat).iop(s0) > ℚ.0","lib(rat).iop(s0) > ℚ.0"]}
{"goal":"exists(k0: ℤ) { r < ℚ.from_int(k0) }","proof":["not r < ℚ.from_int(lib(rat.rat_base).floor_impl(r) + ℤ.1)","r < ℚ.from_int(lib(rat.rat_base).floor_impl(r) + ℤ.1)"]}
{"goal":"ℝ.from_rat(r) < ℝ.from_rat(ℚ.from_int(n))","proof":["ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(r) = ℚ.from_int(n) > r","ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(r) = ℝ.from_rat(r) < ℝ.from_rat(ℚ.from_int(n))","ℚ.from_int(n) > r = r < ℚ.from_int(n)"]}
{"goal":"ℝ.from_rat(r) < ℝ.from_int(n)","proof":["ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_int(n)"]}
{"goal":"a < ℝ.from_int(n)","proof":["not a < ℝ.from_rat(r) or not ℝ.from_rat(r) <= ℝ.from_int(n) or a < ℝ.from_int(n)","not ℝ.from_rat(r) < ℝ.from_int(n) or ℝ.from_rat(r) <= ℝ.from_int(n)","not ℝ.from_rat(r) <= ℝ.from_int(n) or not a < ℝ.from_rat(r)","ℝ.from_rat(r) <= ℝ.from_int(n)","not ℝ.from_rat(r) <= ℝ.from_int(n)"]}
{"goal":"lt_some_int","proof":["not a < ℝ.from_int(n)"]}
{"goal":"real_neg_imp_rat_neg","proof":["ℝ.from_rat(ℚ.0) > ℝ.from_rat(r) = ℚ.0 > r","0 > ℝ.from_rat(r) = ℝ.from_rat(r) < 0","ℚ.0 > r = r < ℚ.0"]}
{"goal":"ℝ.from_rat(ℚ.from_int(m)) < ℝ.from_rat(ℚ.from_int(n))","proof":["ℝ.from_int(n) > ℝ.from_int(m) = ℝ.from_int(m) < ℝ.from_int(n)","ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(ℚ.from_int(m)) = ℝ.from_rat(ℚ.from_int(m)) < ℝ.from_rat(ℚ.from_int(n))","ℝ.from_rat(ℚ.from_int(m)) = ℝ.from_int(m)","ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_int(n)"]}
{"goal":"ℚ.from_int(m) < ℚ.from_int(n)","proof":["ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(ℚ.from_int(m)) = ℚ.from_int(n) > ℚ.from_int(m)","ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(ℚ.from_int(m)) = ℝ.from_rat(ℚ.from_int(m)) < ℝ.from_rat(ℚ.from_int(n))","ℚ.from_int(n) > ℚ.from_int(m) = ℚ.from_int(m) < ℚ.from_int(n)"]}
{"goal":"lt_some_int_cancel","proof":["not m > n or ℚ.from_int(m) > ℚ.from_int(n)","m > n or m < n or n = m","m > n or n = m","ℚ.from_int(m) > ℚ.from_int(n) != ℚ.from_int(m) <= ℚ.from_int(n)","not ℚ.from_int(m) < ℚ.from_int(n) or ℚ.from_int(m) <= ℚ.from_int(n)","not ℝ.from_int(m) < ℝ.from_int(n) or ℝ.from_int(n) != ℝ.from_int(m)","ℝ.from_int(n) != ℝ.from_int(m)","n != m","m > n","not ℚ.from_int(m) > ℚ.from_int(n) or not ℚ.from_int(m) <= ℚ.from_int(n)","ℚ.from_int(m) <= ℚ.from_int(n)","ℚ.from_int(m) > ℚ.from_int(n)","not ℚ.from_int(m) > ℚ.from_int(n)"]}
{"goal":"exists(k0: ℤ) { a > ℝ.from_int(k0) }","proof":["let s0: ℝ -> ℤ satisfy { forall(x0: ℝ) { x0 > ℝ.from_int(s0(x0)) } }","not a > ℝ.from_int(s0(a))","a > ℝ.from_int(s0(a))"]}
{"goal":"ℝ.from_int(m) <= a","proof":["not a > ℝ.from_int(m) or not a <= ℝ.from_int(m)","a <= ℝ.from_int(m) or ℝ.from_int(m) <= a","not a <= ℝ.from_int(m)","a <= ℝ.from_int(m)"]}
{"goal":"f(ℕ.0)","proof":["ℝ.from_int(m + ℤ.from_nat(ℕ.0)) <= a = f(ℕ.0)","a >= ℝ.from_int(m + ℤ.from_nat(ℕ.0)) = ℝ.from_int(m + ℤ.from_nat(ℕ.0)) <= a","a >= ℝ.from_int(m) = ℝ.from_int(m) <= a","m + ℤ.from_nat(ℕ.0) = ℤ.from_nat(ℕ.0) + m","ℝ.from_rat(ℚ.from_int(m + ℤ.from_nat(ℕ.0))) = ℝ.from_int(m + ℤ.from_nat(ℕ.0))","ℝ.from_rat(ℚ.from_int(m)) = ℝ.from_int(m)","ℕ.0 != ℕ.0 or ℤ.from_nat(ℕ.0) = ℤ.0","ℤ.0 + m = m","ℤ.from_nat(ℕ.0) = ℤ.0"]}
{"goal":"ℝ.from_int(m + ℤ.from_nat(x)) <= a","proof":["ℝ.from_int(m + ℤ.from_nat(x)) <= a = f(x)"]}
{"goal":"ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) <= a","proof":["not a < ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) or not ℝ.from_int(m + ℤ.from_nat(x)) <= a or floor_exists(a)","a >= ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) or a < ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1)","a >= ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) = ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) <= a","not a >= ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1)","not a < ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1)","a < ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1)"]}
{"goal":"ℝ.from_int(m + ℤ.from_nat(x.suc)) <= a","proof":["m + (ℤ.from_nat(x) + ℤ.1) = m + ℤ.from_nat(x) + ℤ.1","ℤ.from_nat(x) + ℤ.from_nat(ℕ.1) = ℤ.from_nat(x + ℕ.1)","a >= ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) = ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1) <= a","a >= ℝ.from_int(m + ℤ.from_nat(x.suc)) = ℝ.from_int(m + ℤ.from_nat(x.suc)) <= a","m + ℤ.from_nat(x.suc) = ℤ.from_nat(x.suc) + m","x + ℕ.1 = ℕ.1 + x","ℝ.from_rat(ℚ.from_int(m + ℤ.from_nat(x) + ℤ.1)) = ℝ.from_int(m + ℤ.from_nat(x) + ℤ.1)","ℝ.from_rat(ℚ.from_int(ℤ.from_nat(x.suc) + m)) = ℝ.from_int(ℤ.from_nat(x.suc) + m)","ℕ.1 + x = x.suc"]}
{"goal":"f(x.suc)","proof":["ℝ.from_int(m + ℤ.from_nat(x.suc)) <= a = f(x.suc)"]}
{"goal":"f(x)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(ℕ.0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(ℕ.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(ℕ.0) or f(x)","not f(s0(f).suc)","not f(ℕ.0) or f(s0(f)) or f(x)","not f(s0(f))","f(s0(f))"]}
{"goal":"exists(k0: ℤ) { a < ℝ.from_int(k0) }","proof":["let s0: ℝ -> ℤ satisfy { forall(x0: ℝ) { x0 < ℝ.from_int(s0(x0)) } }","not a < ℝ.from_int(s0(a))","a < ℝ.from_int(s0(a))"]}
{"goal":"f(abs(m) + abs(big))","proof":["f(abs(m) + abs(big))"]}
{"goal":"ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) <= a","proof":["f(abs(m) + abs(big))","ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) <= a = f(abs(m) + abs(big))"]}
{"goal":"ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) < ℝ.from_int(big)","proof":["not a < ℝ.from_int(big) or not ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) <= a or ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) < ℝ.from_int(big)","not ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) <= a or not a < ℝ.from_int(big)"]}
{"goal":"m + ℤ.from_nat(abs(m) + abs(big)) < big","proof":["not ℝ.from_int(m + ℤ.from_nat(abs(m) + abs(big))) < ℝ.from_int(big) or m + ℤ.from_nat(abs(m) + abs(big)) < big"]}
{"goal":"m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) < big","proof":["m + (ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big))) = m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big))","ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) = ℤ.from_nat(abs(m) + abs(big))"]}
{"goal":"m + ℤ.from_nat(abs(m)) + (ℤ.from_nat(abs(big)) + -big) < ℤ.0","proof":["not m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) < big + ℤ.0 or m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) - big < ℤ.0","m + ℤ.from_nat(abs(m)) + (ℤ.from_nat(abs(big)) + -big) = m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) + -big","not m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) + -big < ℤ.0","m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) + -big = m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) - big","big + ℤ.0 = big","not m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) - big < ℤ.0","m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) < big + ℤ.0","not m + ℤ.from_nat(abs(m)) + ℤ.from_nat(abs(big)) < big + ℤ.0"]}
{"goal":"m + ℤ.from_nat(abs(m)) >= ℤ.0","proof":["m + ℤ.from_nat(abs(m)) >= ℤ.0"]}
{"goal":"ℤ.from_nat(abs(big)) + -big >= ℤ.0","proof":["-big + ℤ.from_nat(abs(-big)) >= ℤ.0","ℤ.from_nat(abs(big)) + -big = -big + ℤ.from_nat(abs(big))","not -big + ℤ.from_nat(abs(big)) >= ℤ.0","abs(-big) = abs(big)"]}
{"goal":"false","proof":["not (ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m)))).is_negative or (ℤ.from_nat(abs(big)) + -big).is_negative or (m + ℤ.from_nat(abs(m))).is_negative","m + ℤ.from_nat(abs(m)) >= ℤ.0 = ℤ.0 <= m + ℤ.from_nat(abs(m))","ℤ.from_nat(abs(big)) + -big >= ℤ.0 = ℤ.0 <= ℤ.from_nat(abs(big)) + -big","m + ℤ.from_nat(abs(m)) + (ℤ.from_nat(abs(big)) + -big) = ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m)))","ℤ.0 <= m + ℤ.from_nat(abs(m)) != (m + ℤ.from_nat(abs(m))).is_negative","ℤ.0 <= ℤ.from_nat(abs(big)) + -big != (ℤ.from_nat(abs(big)) + -big).is_negative","ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m))) < ℤ.0 = (ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m)))).is_negative","ℤ.0 <= m + ℤ.from_nat(abs(m))","ℤ.0 <= ℤ.from_nat(abs(big)) + -big","ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m))) < ℤ.0","not ℤ.0 <= m + ℤ.from_nat(abs(m)) or not (m + ℤ.from_nat(abs(m))).is_negative","not ℤ.0 <= ℤ.from_nat(abs(big)) + -big or not (ℤ.from_nat(abs(big)) + -big).is_negative","(ℤ.from_nat(abs(big)) + -big + (m + ℤ.from_nat(abs(m)))).is_negative","not (m + ℤ.from_nat(abs(m))).is_negative","not (ℤ.from_nat(abs(big)) + -big).is_negative","(ℤ.from_nat(abs(big)) + -big).is_negative"]}
{"goal":"floor_exists","proof":["let s0: ℝ -> ℤ satisfy { forall(x0: ℝ) { not floor_exists(x0) or ℝ.from_int(s0(x0)) <= x0 } and forall(x1: ℝ) { not floor_exists(x1) or x1 < ℝ.from_int(s0(x1) + ℤ.1) } and forall(x2: ℝ, x3: ℤ) { not x2 < ℝ.from_int(x3 + ℤ.1) or not ℝ.from_int(x3) <= x2 or floor_exists(x2) } }","not a < ℝ.from_int(s0(a) + ℤ.1) or not ℝ.from_int(s0(a)) <= a","not floor_exists(a) or ℝ.from_int(s0(a)) <= a","not floor_exists(a) or a < ℝ.from_int(s0(a) + ℤ.1)","ℝ.from_int(s0(a)) <= a","a < ℝ.from_int(s0(a) + ℤ.1)","not a < ℝ.from_int(s0(a) + ℤ.1)"]}
{"goal":"exists(k0: ℤ) { ℝ.from_int(k0) <= a and a < ℝ.from_int(k0 + ℤ.1) }","proof":["let s0: ℝ -> ℤ satisfy { forall(x0: ℝ) { ℝ.from_int(s0(x0)) <= x0 } and forall(x1: ℝ) { x1 < ℝ.from_int(s0(x1) + ℤ.1) } }","not a < ℝ.from_int(s0(a) + ℤ.1) or not ℝ.from_int(s0(a)) <= a","a < ℝ.from_int(s0(a) + ℤ.1)","ℝ.from_int(s0(a)) <= a"]}
{"goal":"add_from_int","proof":["ℝ.from_rat(ℚ.from_int(m)) + ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_rat(ℚ.from_int(m) + ℚ.from_int(n))","ℚ.from_int(m) + ℚ.from_int(n) = ℚ.from_int(m + n)","ℝ.from_rat(ℚ.from_int(m + n)) = ℝ.from_int(m + n)","ℝ.from_rat(ℚ.from_int(m)) = ℝ.from_int(m)","ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_int(n)"]}
{"goal":"lt_add_one","proof":["not ℚ.1 > ℚ.0 or a < a + ℝ.from_rat(ℚ.1)","not a < a + ℝ.from_rat(ℚ.1)","not ℚ.1 > ℚ.0"]}
{"goal":"ℝ.from_int(n) > 0","proof":["ℝ.from_rat(ℚ.from_int(n)) > ℝ.from_rat(ℚ.from_int(ℤ.0)) = ℚ.from_int(n) > ℚ.from_int(ℤ.0)","not n > ℤ.0 or ℚ.from_int(n) > ℚ.from_int(ℤ.0)","ℝ.from_rat(ℚ.from_int(n)) = ℝ.from_int(n)","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int(n) > ℚ.from_int(ℤ.0)"]}
{"goal":"lt_add_pos_int","proof":["not 0 < ℝ.from_int(n) or not a <= a or a + 0 < a + ℝ.from_int(n)","ℝ.from_int(n) > 0 = 0 < ℝ.from_int(n)","0 < ℝ.from_int(n)","a + 0 = a","a <= a","not a + 0 < a + ℝ.from_int(n)"]}
{"goal":"lt_add_pos","proof":["not 0 < b or not a <= a or a + 0 < a + b","b > 0 = 0 < b","0 < b","a + 0 = a","a <= a","not a + 0 < a + b"]}
{"goal":"0 < b - a","proof":["not 0 + a < b or 0 < b - a","not 0 + a < b","0 + a = a"]}
{"goal":"exists(k0: ℚ) { 0 < ℝ.from_rat(k0) and ℝ.from_rat(k0) < b - a }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not ℝ.from_rat(s0(0, b - a)) < b - a or not 0 < ℝ.from_rat(s0(0, b - a))","not 0 < b - a or ℝ.from_rat(s0(0, b - a)) < b - a","not 0 < b - a or 0 < ℝ.from_rat(s0(0, b - a))","0 < ℝ.from_rat(s0(0, b - a))","ℝ.from_rat(s0(0, b - a)) < b - a","not ℝ.from_rat(s0(0, b - a)) < b - a"]}
{"goal":"r > ℚ.0","proof":["ℝ.from_rat(r).gt_rat(ℚ.0) = r > ℚ.0","not ℝ.from_rat(r).gt_rat(ℚ.0)","ℝ.from_rat(r) > 0 = 0 < ℝ.from_rat(r)","not ℝ.from_rat(r) > 0 or ℝ.from_rat(r).is_positive","ℝ.from_rat(r).gt_rat(ℚ.0) = ℝ.from_rat(r).is_positive","not ℝ.from_rat(r).is_positive","ℝ.from_rat(r) > 0","not ℝ.from_rat(r) > 0"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(k0) < 0 and 0 < ℝ.from_rat(r + k0) }","proof":["let s0: ℚ satisfy { not r > ℚ.0 or ℝ.from_rat(s0) < 0 and (not r > ℚ.0 or 0 < ℝ.from_rat(s0 + r)) }","not 0 < ℝ.from_rat(r + s0) or not ℝ.from_rat(s0) < 0","s0 + r = r + s0","not 0 < ℝ.from_rat(r + s0)","0 < ℝ.from_rat(r + s0)"]}
{"goal":"ε > ℚ.0","proof":["not -q > ℚ.0","not ℝ.from_rat(q) < 0 or q < ℚ.0","-q > ℚ.0 = q < ℚ.0","q < ℚ.0","not q < ℚ.0"]}
{"goal":"0 < ℝ.from_rat(r) + ℝ.from_rat(-ε)","proof":["ℝ.from_rat(r) + ℝ.from_rat(-ε) = ℝ.from_rat(r + -ε)","ℝ.from_rat(r) + ℝ.from_rat(q) = ℝ.from_rat(r + q)","-(ℚ.0 - q) = q - ℚ.0","ℝ.from_rat(r + -ε) > 0 = 0 < ℝ.from_rat(r + -ε)","ℝ.from_rat(r + q) > 0 = 0 < ℝ.from_rat(r + q)","ℝ.new((-ε).gt) = ℝ.from_rat(-ε)","ℝ.new(q.gt) = ℝ.from_rat(q)","ℚ.0 - q = -q","q - ℚ.0 = q"]}
{"goal":"ℝ.from_rat(r) + ℝ.from_rat(-ε) < b - a + ℝ.from_rat(-ε)","proof":["not ℝ.from_rat(r) < b - a or ℝ.from_rat(r) + ℝ.from_rat(-ε) < b - a + ℝ.from_rat(-ε)"]}
{"goal":"0 < b - a + ℝ.from_rat(-ε)","proof":["not 0 < ℝ.from_rat(-ε) + ℝ.from_rat(r) or not ℝ.from_rat(-ε) + ℝ.from_rat(r) <= b - a + ℝ.from_rat(-ε) or 0 < b - a + ℝ.from_rat(-ε)","ℝ.from_rat(r) + ℝ.from_rat(-ε) = ℝ.from_rat(-ε) + ℝ.from_rat(r)","not ℝ.from_rat(-ε) + ℝ.from_rat(r) < b - a + ℝ.from_rat(-ε) or ℝ.from_rat(-ε) + ℝ.from_rat(r) <= b - a + ℝ.from_rat(-ε)","0 < ℝ.from_rat(-ε) + ℝ.from_rat(r)","ℝ.from_rat(-ε) + ℝ.from_rat(r) < b - a + ℝ.from_rat(-ε)","not ℝ.from_rat(-ε) + ℝ.from_rat(r) <= b - a + ℝ.from_rat(-ε) or not 0 < ℝ.from_rat(-ε) + ℝ.from_rat(r)","ℝ.from_rat(-ε) + ℝ.from_rat(r) <= b - a + ℝ.from_rat(-ε)","not ℝ.from_rat(-ε) + ℝ.from_rat(r) <= b - a + ℝ.from_rat(-ε)"]}
{"goal":"0 < b + -(a + ℝ.from_rat(ε))","proof":["b + (-a + -ℝ.from_rat(ε)) = b + -a + -ℝ.from_rat(ε)","-a + -ℝ.from_rat(ε) = -(a + ℝ.from_rat(ε))","b + -a = b - a","-ℝ.from_rat(ε) = ℝ.from_rat(-ε)","b + -(a + ℝ.from_rat(ε)) = -(a + ℝ.from_rat(ε)) + b","-(a + ℝ.from_rat(ε)) + b > 0 = 0 < -(a + ℝ.from_rat(ε)) + b","b - a + ℝ.from_rat(-ε) > 0 = 0 < b - a + ℝ.from_rat(-ε)"]}
{"goal":"a + ℝ.from_rat(ε) < b","proof":["not 0 < b - (a + ℝ.from_rat(ε)) or 0 + (a + ℝ.from_rat(ε)) < b","b + -(a + ℝ.from_rat(ε)) = b - (a + ℝ.from_rat(ε))","0 + (a + ℝ.from_rat(ε)) = a + ℝ.from_rat(ε)","0 < b - (a + ℝ.from_rat(ε))","not 0 + (a + ℝ.from_rat(ε)) < b","0 + (a + ℝ.from_rat(ε)) < b"]}
{"goal":"add_rat_ε_between","proof":["not a + ℝ.from_rat(ε) < b or not ε > ℚ.0","not a + ℝ.from_rat(ε) < b"]}
{"goal":"lt_neg_swap_neg","proof":["not a < -b or --b < -a","--b = b","--b < -a","not --b < -a"]}
{"goal":"neg_lt_neg_swap_neg","proof":["not -a < -b or b < --a","--a = a","b < --a","not b < --a"]}
{"goal":"neg_pos_is_neg","proof":["not 0 < 0 + a or 0 - a < 0","0 + -a = 0 - a","a > 0 = 0 < a","0 < a","0 + -a = -a","0 + a = a","not 0 + -a < 0","not 0 - a < 0","0 < 0 + a","not 0 < 0 + a"]}
{"goal":"neg_neg_is_pos","proof":["not -a < -0 or 0 < a","a > 0 = 0 < a","not 0 < a","not -a < -0"]}
{"goal":"gt_add_neg","proof":["not b < 0 or not a <= a or a + b < a + 0","a + 0 > a + b = a + b < a + 0","a + 0 = a","a <= a","not a + 0 > a + b","not a + b < a + 0"]}
{"goal":"pos_imp_eq_abs","proof":["a.abs = a or a.is_negative","a.is_negative","not a > 0 or a.is_positive","a.is_positive","not a.is_negative or not a.is_positive"]}
{"goal":"a <= 0","proof":["not 0 > a or not 0 <= a","0 <= a or a <= 0","0 <= a","0 > a = a < 0","not 0 > a","0 > a"]}
{"goal":"0 <= a.abs","proof":["not a <= 0 or -0 <= -a","not a.is_negative or a.abs = -a","not a < 0 or a.is_negative","a.is_negative","-0 <= -a","0 <= -a","a.abs = -a"]}
{"goal":"a <= a.abs","proof":["not a <= 0 or not 0 <= a.abs or a <= a.abs","not 0 <= a.abs or not a <= 0"]}
{"goal":"a = a.abs","proof":["a.abs = a or a.is_negative","a.is_negative","not a.is_negative or a < 0"]}
{"goal":"a <= a.abs","proof":["not a <= a","let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: ℝ, x4: ℝ) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: ℝ, x6: ℝ) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"lte_abs","proof":[]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a","not a.is_negative","not a < 0 or a.is_negative"]}
{"goal":"-a > 0","proof":["not --a < 0 or -a > 0","not --a < 0","--a = a"]}
{"goal":"(-a).abs = -a","proof":["not -a > 0 or (-a).abs = -a"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != -a"]}
{"goal":"(-a).abs = a.abs","proof":["-a != a","-a != 0","-0 != 0"]}
{"goal":"-a < 0","proof":["not a <= 0 or a < 0 or 0 = a","not a > 0 or -a < 0","not a > 0","a > 0 or a <= 0","not a <= 0","a <= 0"]}
{"goal":"(-a).abs = a","proof":["not (-a).is_negative or (-a).abs = --a","not -a < 0 or (-a).is_negative","--a = a","(-a).abs != --a","(-a).is_negative","not (-a).is_negative"]}
{"goal":"a > 0","proof":["not -a < 0 or a > 0"]}
{"goal":"a.abs = a","proof":["not a > 0 or a.abs = a"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != a"]}
{"goal":"abs_neg","proof":[]}
{"goal":"neg_lte_abs","proof":["(-a).abs = a.abs","not -a <= (-a).abs","-a <= (-a).abs"]}
{"goal":"gte_neg_abs","proof":["not -a <= a.abs or -a.abs <= --a","--a >= -a.abs = -a.abs <= --a","-a <= a.abs","--a = a","not --a >= -a.abs","not -a.abs <= --a"]}
{"goal":"neg_gte_neg_abs","proof":["-a >= -(-a).abs","(-a).abs = a.abs"]}
{"goal":"a.abs >= 0","proof":["not 0 <= -a or not -a <= a.abs or 0 <= a.abs","not a <= 0 or -0 <= -a","a.abs >= 0 = 0 <= a.abs","not 0 <= a.abs","not a < 0 or a <= 0","-a <= a.abs","a <= 0","not -a <= a.abs or not 0 <= -a","not 0 <= -a","-0 <= -a","not -0 <= -a"]}
{"goal":"a.abs >= 0","proof":["not a.abs < 0 or not a <= a.abs or a < 0","a.abs >= 0 or a.abs < 0","a.abs < 0","not a.abs < 0 or not a <= a.abs","a <= a.abs"]}
{"goal":"abs_not_neg","proof":[]}
{"goal":"a > 0","proof":[]}
{"goal":"a.min(b) > 0","proof":["not 0 < a or not 0 < b or 0 < a.min(b)","a > 0 = 0 < a","a.min(b) > 0 = 0 < a.min(b)","b > 0 = 0 < b","not 0 < a.min(b)","0 < b","0 < a","not 0 < a"]}
{"goal":"b > 0","proof":[]}
{"goal":"a.min(b) > 0","proof":["a < b or a.min(b) = b","a.min(b) = b"]}
{"goal":"min_pos_pos","proof":[]}
{"goal":"a > 0","proof":[]}
{"goal":"a.max(b) > 0","proof":["not b < a or b.max(a) = a","b.max(a) = a.max(b)","not b.max(a) > 0","a > b = b < a","b < a","b.max(a) = a"]}
{"goal":"b > 0","proof":[]}
{"goal":"a.max(b) > 0","proof":["b < a or b.max(a) = b","b.max(a) = a.max(b)","not b.max(a) > 0","a > b = b < a","not b < a","b.max(a) = b"]}
{"goal":"max_pos_pos","proof":[]}
{"goal":"min_lte_left","proof":["not Partial_Order.lte[ℝ](a.min(b), a) or a.min(b) < a or a.min(b) = a","lte_from(ℝ.lt, a.min(b), a) = a.min(b) <= a","a.min(b) != a or lte_from(ℝ.lt, a.min(b), a)","not a.min(b) < a or a.min(b) <= a","not a.min(b) < a","not lte_from(ℝ.lt, a.min(b), a)","Partial_Order.lte[ℝ](a.min(b), a)","a.min(b) != a","a.min(b) = a"]}
{"goal":"max_gte_left","proof":["not Partial_Order.gt[ℝ](a, a.max(b)) or Partial_Order.gt[ℝ](a, b)","not Partial_Order.gt[ℝ](a, b) or a.max(b) = a","a.max(b) < a = Partial_Order.gt[ℝ](a, a.max(b))","a.max(b) >= a or a.max(b) < a","a.max(b) < a","not a.max(b) < a or a.max(b) != a","Partial_Order.gt[ℝ](a, a.max(b))","a.max(b) != a","Partial_Order.gt[ℝ](a, b)","not Partial_Order.gt[ℝ](a, b)"]}
{"goal":"min_lte_right","proof":["not Partial_Order.lte[ℝ](a.min(b), b) or a.min(b) < b or a.min(b) = b","lte_from(ℝ.lt, a.min(b), b) = a.min(b) <= b","a.min(b) != b or lte_from(ℝ.lt, a.min(b), b)","not a.min(b) < b or a.min(b) <= b","not a.min(b) < b","not lte_from(ℝ.lt, a.min(b), b)","Partial_Order.lte[ℝ](a.min(b), b)","a.min(b) != b","a.min(b) = b"]}
{"goal":"max_gte_right","proof":["b.max(a) = a.max(b)","not b.max(a) >= b","b.max(a) >= b"]}
{"goal":"lt_both_imp_lt_min","proof":["not a < b or not a < c or a < b.min(c)"]}
{"goal":"lt_min_imp_lt_left","proof":["not a < b.min(c) or a < b"]}
{"goal":"lt_min_imp_lt_right","proof":["not a < b.min(c) or a < c"]}
{"goal":"gt_both_imp_gt_max","proof":["not Partial_Order.gt[ℝ](a, b) or not Partial_Order.gt[ℝ](a, c) or Partial_Order.gt[ℝ](a, b.max(c))","b < a = Partial_Order.gt[ℝ](a, b)","b.max(c) < a = Partial_Order.gt[ℝ](a, b.max(c))","c < a = Partial_Order.gt[ℝ](a, c)","a > b = b < a","a > b.max(c) = b.max(c) < a","a > c = c < a","not b.max(c) < a","not Partial_Order.gt[ℝ](a, b.max(c))","c < a","b < a","Partial_Order.gt[ℝ](a, b)","Partial_Order.gt[ℝ](a, c)","not Partial_Order.gt[ℝ](a, c)"]}
{"goal":"gt_max_imp_gt_left","proof":["not Partial_Order.gt[ℝ](a, b.max(c)) or Partial_Order.gt[ℝ](a, b)","b < a = Partial_Order.gt[ℝ](a, b)","b.max(c) < a = Partial_Order.gt[ℝ](a, b.max(c))","a > b = b < a","a > b.max(c) = b.max(c) < a","not b < a","not Partial_Order.gt[ℝ](a, b)","b.max(c) < a","Partial_Order.gt[ℝ](a, b.max(c))"]}
{"goal":"gt_max_imp_gt_right","proof":["not a > c.max(b) or a > c","not a > c.max(b)","c.max(b) = b.max(c)"]}
{"goal":"exists(k0: ℚ) { a.max(b) < ℝ.from_rat(k0) }","proof":["let s0: ℕ satisfy { true }","let s1: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s1(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s1(x3, x2) + x2) } }","not a.max(b) < ℝ.from_rat(s1(a.max(b), lib(rat).iop(s0)) + lib(rat).iop(s0))","not lib(rat).iop(s0) > ℚ.0 or a.max(b) < ℝ.from_rat(s1(a.max(b), lib(rat).iop(s0)) + lib(rat).iop(s0))","not lib(rat).iop(s0) > ℚ.0","lib(rat).iop(s0) > ℚ.0"]}
{"goal":"a < ℝ.from_rat(r)","proof":["not Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b)) or Partial_Order.gt[ℝ](ℝ.from_rat(r), a)","a < ℝ.from_rat(r) = Partial_Order.gt[ℝ](ℝ.from_rat(r), a)","a.max(b) < ℝ.from_rat(r) = Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b))","not Partial_Order.gt[ℝ](ℝ.from_rat(r), a)","Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b))"]}
{"goal":"b < ℝ.from_rat(r)","proof":["not Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b)) or Partial_Order.gt[ℝ](ℝ.from_rat(r), b)","a.max(b) < ℝ.from_rat(r) = Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b))","b < ℝ.from_rat(r) = Partial_Order.gt[ℝ](ℝ.from_rat(r), b)","not Partial_Order.gt[ℝ](ℝ.from_rat(r), b)","Partial_Order.gt[ℝ](ℝ.from_rat(r), a.max(b))"]}
{"goal":"rat_dual_upper_bound","proof":["not b < ℝ.from_rat(r) or not a < ℝ.from_rat(r)","not a < ℝ.from_rat(r)"]}
{"goal":"p < ℚ.0","proof":["not ℝ.from_rat(p) < 0 or p < ℚ.0"]}
{"goal":"p.abs = -p","proof":["not p < ℚ.0 or p.abs = -p"]}
{"goal":"ℝ.from_rat(p).abs = -ℝ.from_rat(p)","proof":["not ℝ.from_rat(p).is_negative or ℝ.from_rat(p).abs = -ℝ.from_rat(p)","not ℝ.from_rat(p).is_negative","not ℝ.from_rat(p) < 0 or ℝ.from_rat(p).is_negative"]}
{"goal":"ℝ.from_rat(p.abs) = -ℝ.from_rat(p)","proof":["-ℝ.from_rat(p) != ℝ.from_rat(-p)","-ℝ.from_rat(p) = ℝ.from_rat(-p)"]}
{"goal":"ℝ.from_rat(p).abs = ℝ.from_rat(p.abs)","proof":["ℝ.from_rat(p).abs != -ℝ.from_rat(p)"]}
{"goal":"p >= ℚ.0","proof":["ℝ.from_rat(p).gt_rat(ℚ.0) = p > ℚ.0","ℝ.from_rat(ℚ.0) != ℝ.from_rat(p) or ℚ.0 = p","ℝ.from_rat(p).is_negative or ℝ.from_rat(p).is_positive or ℝ.from_rat(p) = 0","not p > ℚ.0 or p >= ℚ.0","not p > ℚ.0","not ℝ.from_rat(p).is_negative or ℝ.from_rat(p) < 0","ℝ.from_rat(p).gt_rat(ℚ.0) = ℝ.from_rat(p).is_positive","ℚ.0 != p or p >= ℚ.0","ℚ.0 != p","not ℝ.from_rat(p).is_negative","ℝ.from_rat(ℚ.0) != ℝ.from_rat(p)","not ℝ.from_rat(p).gt_rat(ℚ.0)","not ℝ.from_rat(p).is_positive","ℝ.from_rat(p) != 0","ℝ.from_rat(p) = 0"]}
{"goal":"p.abs = p","proof":["not p >= ℚ.0 or not p < ℚ.0 or ℚ.0 > ℚ.0","p < ℚ.0 or p.abs = p","p < ℚ.0","not ℚ.0 > ℚ.0 or ℚ.0 != ℚ.0","ℚ.0 > ℚ.0","not ℚ.0 > ℚ.0"]}
{"goal":"ℝ.from_rat(p).abs = ℝ.from_rat(p)","proof":["ℝ.from_rat(p).abs = ℝ.from_rat(p) or ℝ.from_rat(p).is_negative","ℝ.from_rat(p).is_negative","not ℝ.from_rat(p).is_negative or ℝ.from_rat(p) < 0"]}
{"goal":"ℝ.from_rat(p.abs) = ℝ.from_rat(p)","proof":["p.abs != p"]}
{"goal":"ℝ.from_rat(p).abs = ℝ.from_rat(p.abs)","proof":["ℝ.from_rat(p).abs != ℝ.from_rat(p)"]}
{"goal":"abs_from_rat","proof":[]}
{"goal":"0 <= (a - b).abs","proof":["(a - b).abs >= 0 = 0 <= (a - b).abs","not (a - b).abs >= 0","(a - b).abs >= 0"]}
{"goal":"0 < ε","proof":["not (a - b).abs < ε or not 0 <= (a - b).abs or 0 < ε","not 0 <= (a - b).abs or not (a - b).abs < ε"]}
{"goal":"close_imp_ε_pos","proof":["ε > 0 = 0 < ε"]}
{"goal":"(a - b).abs = (b - a).abs","proof":["-(a - b) = b - a","(-(a - b)).abs = (a - b).abs"]}
{"goal":"close_comm","proof":[]}
{"goal":"(a - b).abs < ε","proof":[]}
{"goal":"a - b <= (a - b).abs","proof":["a - b <= (a - b).abs"]}
{"goal":"a - b < ε","proof":["not (a - b).abs < ε or not a - b <= (a - b).abs or a - b < ε","not a - b <= (a - b).abs or not (a - b).abs < ε"]}
{"goal":"a < b + ε","proof":["not ε + b <= a or ε <= a - b","a >= b + ε or a < b + ε","a >= b + ε","not a - b >= ε or not a - b < ε","ε + b = b + ε","a - b >= ε = ε <= a - b","a >= b + ε = b + ε <= a","b + ε <= a","not a - b >= ε","not ε <= a - b","ε + b <= a","not ε + b <= a"]}
{"goal":"b > a - ε","proof":["not a < b + ε or a - ε < b","b > a - ε = a - ε < b","a - ε < b","not a - ε < b"]}
{"goal":"(b - a).abs < ε","proof":["not (a - b).abs < ε or (b - a).abs < ε"]}
{"goal":"b - a <= (b - a).abs","proof":["b - a <= (b - a).abs"]}
{"goal":"b - a < ε","proof":["not (b - a).abs < ε or not b - a <= (b - a).abs or b - a < ε","not b - a <= (b - a).abs or not (b - a).abs < ε"]}
{"goal":"b < a + ε","proof":["not ε + a <= b or ε <= b - a","b >= a + ε or b < a + ε","b >= a + ε","not b - a >= ε or not b - a < ε","ε + a = a + ε","b - a >= ε = ε <= b - a","b >= a + ε = a + ε <= b","a + ε <= b","not b - a >= ε","not ε <= b - a","ε + a <= b","not ε + a <= b"]}
{"goal":"b - ε < a","proof":["not b < a + ε or b - ε < a"]}
{"goal":"close_imp_bounds","proof":["not a < b + ε"]}
{"goal":"(a - b).abs = b - a","proof":["-(a - b) = b - a","not (a - b).is_negative or (a - b).abs = -(a - b)","not a - b < 0 or (a - b).is_negative","(a - b).abs != -(a - b)","(a - b).is_negative","not (a - b).is_negative"]}
{"goal":"(a - b).abs < ε","proof":["not -ε + b < a or -ε < a - b","not -ε < -(a - b).abs or (a - b).abs < ε","-(b - a) = a - b","b + -ε = b - ε","b + -ε = -ε + b","not -ε < -(a - b).abs","not -ε < -(b - a)","not -ε < a - b","b + -ε < a","not -ε + b < a","-ε + b < a"]}
{"goal":"(a - b).abs = a - b","proof":["(a - b).abs = a - b or (a - b).is_negative","(a - b).is_negative","not (a - b).is_negative or a - b < 0"]}
{"goal":"(a - b).abs < ε","proof":["not a - b < ε","not a < ε + b or a - b < ε","ε + b = b + ε","not a < ε + b","a < ε + b"]}
{"goal":"bounds_imp_close","proof":[]}
{"goal":"b - ε < a","proof":["not b < a + ε or b - ε < a"]}
{"goal":"sum_bounds_imp_close","proof":["not b - ε < a or not a < b + ε or (a - b).abs < ε"]}
{"goal":"self_close","proof":["not a < a + ε or not a < a + ε or (a - a).abs < ε","not a < a + ε","not ε > 0 or a < a + ε"]}
{"goal":"a.abs = a","proof":["not a >= 0 or not a < 0","a.abs = a or a.is_negative","a.is_negative","not a.is_negative or a < 0","not a < 0","a < 0"]}
{"goal":"a.abs <= b","proof":["not a <= b"]}
{"goal":"a < 0","proof":["a >= 0 or a < 0"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a","not a.is_negative","not a < 0 or a.is_negative"]}
{"goal":"-a <= b","proof":["not b < -a or a < -b","not a >= -b or not a < -b","-a > b or -a <= b","-a > b","-a > b = b < -a","b < -a","not a < -b","a < -b"]}
{"goal":"a.abs <= b","proof":[]}
{"goal":"abs_lte","proof":[]}
{"goal":"a + b <= a.abs + b.abs","proof":["not a <= a.abs or not b <= b.abs or a + b <= a.abs + b.abs","a <= a.abs","b <= b.abs"]}
{"goal":"a + b >= -a.abs + -b.abs","proof":["not a >= -a.abs or not b >= -b.abs or a + b >= -a.abs + -b.abs","a >= -a.abs","b >= -b.abs"]}
{"goal":"a.abs + b.abs >= 0","proof":["not a.abs >= 0 or not b.abs >= 0 or a.abs + b.abs >= 0 + 0","a.abs >= 0","b.abs >= 0","0 + 0 = 0","not a.abs + b.abs >= 0 + 0"]}
{"goal":"(a + b).abs <= a.abs + b.abs","proof":["not a + b >= -(a.abs + b.abs) or not a.abs + b.abs >= 0 or not a + b <= a.abs + b.abs or (a + b).abs <= a.abs + b.abs","-a.abs + -b.abs = -(a.abs + b.abs)","not a + b >= -(a.abs + b.abs)","a + b >= -(a.abs + b.abs)"]}
{"goal":"triangle_ineq","proof":[]}
{"goal":"a.abs = (a - b + b).abs","proof":["a + -b != a - b or a - b - -b = a","a + -b = a - b","a - b + --b = a - b - -b","--b = b","(a - b + --b).abs != a.abs","a - b + --b != a","a - b - -b != a"]}
{"goal":"a.abs <= (a - b).abs + b.abs","proof":["(a - b + b).abs <= (a - b).abs + b.abs"]}
{"goal":"a.abs <= (a - b).abs + b.abs","proof":[]}
{"goal":"a.abs - b.abs <= (a - b).abs","proof":["not a.abs <= (a - b).abs + b.abs or a.abs - b.abs <= (a - b).abs"]}
{"goal":"b.abs = (b - a + a).abs","proof":["b + -a != b - a or b - a - -a = b","b + -a = b - a","b - a + --a = b - a - -a","--a = a","(b - a + --a).abs != b.abs","b - a + --a != b","b - a - -a != b"]}
{"goal":"b.abs <= (b - a).abs + a.abs","proof":["(b - a + a).abs <= (b - a).abs + a.abs"]}
{"goal":"b.abs <= (b - a).abs + a.abs","proof":[]}
{"goal":"b.abs - a.abs <= (b - a).abs","proof":["not b.abs <= (b - a).abs + a.abs or b.abs - a.abs <= (b - a).abs"]}
{"goal":"triangle_ineq_sub","proof":[]}
{"goal":"(q - r).abs < ε","proof":[]}
{"goal":"ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)","proof":["ℝ.from_rat(ε) > ℝ.from_rat((q - r).abs) = ε > (q - r).abs","ℝ.from_rat(ε) > ℝ.from_rat((q - r).abs) = ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)","ε > (q - r).abs = (q - r).abs < ε"]}
{"goal":"(ℝ.from_rat(q) - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","proof":["ℝ.from_rat(q) + ℝ.from_rat(-r) = ℝ.from_rat(q + -r)","ℝ.from_rat(q) + -ℝ.from_rat(r) = ℝ.from_rat(q) - ℝ.from_rat(r)","q + -r = q - r","ℝ.from_rat(q - r).abs = ℝ.from_rat((q - r).abs)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","ℝ.from_rat(ε) > (ℝ.from_rat(q) - ℝ.from_rat(r)).abs = (ℝ.from_rat(q) - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","ℝ.from_rat(ε) > ℝ.from_rat((q - r).abs) = ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)"]}
{"goal":"close_rats_imp_close_reals","proof":["not (ℝ.from_rat(q) - ℝ.from_rat(r)).abs < ℝ.from_rat(ε) or (ℝ.from_rat(r) - ℝ.from_rat(q)).abs < ℝ.from_rat(ε)"]}
{"goal":"(ℝ.from_rat(q) - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","proof":[]}
{"goal":"ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)","proof":["ℝ.from_rat(q) + ℝ.from_rat(-r) = ℝ.from_rat(q + -r)","-(ℝ.from_rat(r) - ℝ.from_rat(q)) = ℝ.from_rat(q) - ℝ.from_rat(r)","ℝ.from_rat(q) + -ℝ.from_rat(r) = ℝ.from_rat(q) - ℝ.from_rat(r)","lte_from(ℝ.lt, ℝ.from_rat(ε), (ℝ.from_rat(q) - ℝ.from_rat(r)).abs) = ℝ.from_rat(ε) <= (ℝ.from_rat(q) - ℝ.from_rat(r)).abs","lte_from(ℝ.lt, ℝ.from_rat(ε), ℝ.from_rat((q - r).abs)) = ℝ.from_rat(ε) <= ℝ.from_rat((q - r).abs)","q + -r = q - r","ℝ.from_rat(q - r).abs = ℝ.from_rat((q - r).abs)","-ℝ.from_rat(r) = ℝ.from_rat(-r)","ℝ.from_rat((q - r).abs) >= ℝ.from_rat(ε) or ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)","not (ℝ.from_rat(q) - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) or not (ℝ.from_rat(q) - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","(ℝ.from_rat(q) - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) = ℝ.from_rat(ε) <= (ℝ.from_rat(q) - ℝ.from_rat(r)).abs","ℝ.from_rat((q - r).abs) >= ℝ.from_rat(ε) = ℝ.from_rat(ε) <= ℝ.from_rat((q - r).abs)","(-(ℝ.from_rat(q) - ℝ.from_rat(r))).abs = (ℝ.from_rat(q) - ℝ.from_rat(r)).abs","(-ℝ.from_rat(q - r)).abs = ℝ.from_rat(q - r).abs","--(ℝ.from_rat(r) - ℝ.from_rat(q)) = ℝ.from_rat(r) - ℝ.from_rat(q)","ℝ.from_rat((q - r).abs) >= ℝ.from_rat(ε)","not (ℝ.from_rat(q) - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε)"]}
{"goal":"(q - r).abs < ε","proof":["ℝ.from_rat(ε) > ℝ.from_rat((q - r).abs) = ε > (q - r).abs","ℝ.from_rat(ε) > ℝ.from_rat((q - r).abs) = ℝ.from_rat((q - r).abs) < ℝ.from_rat(ε)","ε > (q - r).abs = (q - r).abs < ε"]}
{"goal":"close_reals_imp_close_rats","proof":[]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(k0) < x and x < ℝ.from_rat(k0 + ε) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not x < ℝ.from_rat(s0(x, ε) + ε) or not ℝ.from_rat(s0(x, ε)) < x","not ε > ℚ.0 or x < ℝ.from_rat(s0(x, ε) + ε)","not ε > ℚ.0 or ℝ.from_rat(s0(x, ε)) < x","ℝ.from_rat(s0(x, ε)) < x","x < ℝ.from_rat(s0(x, ε) + ε)"]}
{"goal":"r - ε < r","proof":["not ε > ℚ.0 or r > r - ε","r > r - ε = r - ε < r","not r > r - ε"]}
{"goal":"ℝ.from_rat(r - ε) < ℝ.from_rat(r)","proof":["ℝ.from_rat(r) > ℝ.from_rat(r - ε) = r > r - ε","ℝ.from_rat(r) > ℝ.from_rat(r - ε) = ℝ.from_rat(r - ε) < ℝ.from_rat(r)","r > r - ε = r - ε < r"]}
{"goal":"ℝ.from_rat(r) - ℝ.from_rat(ε) < ℝ.from_rat(r)","proof":["not ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε) or ℝ.from_rat(r) - ℝ.from_rat(ε) < ℝ.from_rat(r)","not ε > ℚ.0 or ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε)","not ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε)"]}
{"goal":"ℝ.from_rat(r) - ℝ.from_rat(ε) < x","proof":["not ℝ.from_rat(r) - ℝ.from_rat(ε) < ℝ.from_rat(r) or not ℝ.from_rat(r) <= x or ℝ.from_rat(r) - ℝ.from_rat(ε) < x","not ℝ.from_rat(r) < x or ℝ.from_rat(r) <= x","ℝ.from_rat(r) <= x","not ℝ.from_rat(r) - ℝ.from_rat(ε) < ℝ.from_rat(r) or not ℝ.from_rat(r) <= x"]}
{"goal":"rat_approx_exists","proof":["not (x - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","not ℝ.from_rat(r) - ℝ.from_rat(ε) < x or not x < ℝ.from_rat(r) + ℝ.from_rat(ε) or (x - ℝ.from_rat(r)).abs < ℝ.from_rat(ε)","ℝ.from_rat(r) + ℝ.from_rat(ε) = ℝ.from_rat(r + ε)","not x < ℝ.from_rat(r) + ℝ.from_rat(ε)","x < ℝ.from_rat(r) + ℝ.from_rat(ε)"]}
{"goal":"exists(k0: ℚ) { x < ℝ.from_rat(k0) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not x < ℝ.from_rat(s0(x, ε) + ε)","not ε > ℚ.0 or x < ℝ.from_rat(s0(x, ε) + ε)","not ε > ℚ.0"]}
{"goal":"x + ℝ.from_rat(ε) < ℝ.from_rat(r1) + ℝ.from_rat(ε)","proof":["not x < ℝ.from_rat(r1) or x + ℝ.from_rat(ε) < ℝ.from_rat(r1) + ℝ.from_rat(ε)"]}
{"goal":"x + ℝ.from_rat(ε) < ℝ.from_rat(r)","proof":["ℝ.from_rat(r1) + ℝ.from_rat(ε) = ℝ.from_rat(r1 + ε)"]}
{"goal":"ℝ.from_rat(ε) < ℝ.from_rat(r) - x","proof":["not ℝ.from_rat(ε) + x < ℝ.from_rat(r) or ℝ.from_rat(ε) < ℝ.from_rat(r) - x","x + ℝ.from_rat(ε) = ℝ.from_rat(ε) + x","not ℝ.from_rat(ε) + x < ℝ.from_rat(r)","ℝ.from_rat(ε) + x < ℝ.from_rat(r)"]}
{"goal":"ℝ.from_rat(ε) < (ℝ.from_rat(r) - x).abs","proof":["not ℝ.from_rat(ε) < ℝ.from_rat(r) - x or not ℝ.from_rat(r) - x <= (ℝ.from_rat(r) - x).abs or ℝ.from_rat(ε) < (ℝ.from_rat(r) - x).abs","ℝ.from_rat(r) - x <= (ℝ.from_rat(r) - x).abs","not ℝ.from_rat(r) - x <= (ℝ.from_rat(r) - x).abs or not ℝ.from_rat(ε) < ℝ.from_rat(r) - x"]}
{"goal":"ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs","proof":["-(ℝ.from_rat(r) - x) = x - ℝ.from_rat(r)","(x - ℝ.from_rat(r)).abs > ℝ.from_rat(ε) = ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs","(ℝ.from_rat(r) - x).abs > ℝ.from_rat(ε) = ℝ.from_rat(ε) < (ℝ.from_rat(r) - x).abs","(-(ℝ.from_rat(r) - x)).abs = (ℝ.from_rat(r) - x).abs"]}
{"goal":"x < ℝ.from_rat(r)","proof":["not ε > ℚ.0 or x < x + ℝ.from_rat(ε)","not x < x + ℝ.from_rat(ε) or not x + ℝ.from_rat(ε) < ℝ.from_rat(r) or x < ℝ.from_rat(r)","not x + ℝ.from_rat(ε) < ℝ.from_rat(r) or not x < x + ℝ.from_rat(ε)","not x < x + ℝ.from_rat(ε)"]}
{"goal":"rat_upper","proof":["not (x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) or not x < ℝ.from_rat(r)","(x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) = ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs or ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not (x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε)","ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(k0) < x }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not ℝ.from_rat(s0(x, ε)) < x","not ε > ℚ.0 or ℝ.from_rat(s0(x, ε)) < x","not ε > ℚ.0"]}
{"goal":"ℝ.from_rat(r1) - ℝ.from_rat(ε) < x - ℝ.from_rat(ε)","proof":["not ℝ.from_rat(r1) < x or ℝ.from_rat(r1) + -ℝ.from_rat(ε) < x + -ℝ.from_rat(ε)","x + -ℝ.from_rat(ε) = x - ℝ.from_rat(ε)","ℝ.from_rat(r1) + -ℝ.from_rat(ε) = ℝ.from_rat(r1) - ℝ.from_rat(ε)","not ℝ.from_rat(r1) + -ℝ.from_rat(ε) < x - ℝ.from_rat(ε)","ℝ.from_rat(r1) + -ℝ.from_rat(ε) < x + -ℝ.from_rat(ε)"]}
{"goal":"ℝ.from_rat(r) < x - ℝ.from_rat(ε)","proof":["not ℝ.from_rat(r) + ℝ.from_rat(ε) < x or ℝ.from_rat(r) < x - ℝ.from_rat(ε)","ℝ.from_rat(r) + ℝ.from_rat(ε) = ℝ.from_rat(r + ε)","r1 - ε + ε = r1","not ℝ.from_rat(r) + ℝ.from_rat(ε) < x","not ℝ.from_rat(r + ε) < x","ℝ.from_rat(r1 - ε + ε) < x"]}
{"goal":"ℝ.from_rat(ε) < x - ℝ.from_rat(r)","proof":["not ℝ.from_rat(r) < x - ℝ.from_rat(ε) or ℝ.from_rat(r) + ℝ.from_rat(ε) < x","not ℝ.from_rat(ε) + ℝ.from_rat(r) < x or ℝ.from_rat(ε) < x - ℝ.from_rat(r)","ℝ.from_rat(r) + ℝ.from_rat(ε) = ℝ.from_rat(ε) + ℝ.from_rat(r)","not ℝ.from_rat(ε) + ℝ.from_rat(r) < x","ℝ.from_rat(r) + ℝ.from_rat(ε) < x","not ℝ.from_rat(r) + ℝ.from_rat(ε) < x"]}
{"goal":"ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs","proof":["not ℝ.from_rat(ε) < x - ℝ.from_rat(r) or not x - ℝ.from_rat(r) <= (x - ℝ.from_rat(r)).abs or ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs","x - ℝ.from_rat(r) <= (x - ℝ.from_rat(r)).abs","not x - ℝ.from_rat(r) <= (x - ℝ.from_rat(r)).abs or not ℝ.from_rat(ε) < x - ℝ.from_rat(r)"]}
{"goal":"ℝ.from_rat(r) < x","proof":["not ℝ.from_rat(r) < x - ℝ.from_rat(ε) or ℝ.from_rat(r) + ℝ.from_rat(ε) < x","not ε > ℚ.0 or ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε)","not ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε) or not ℝ.from_rat(r) + ℝ.from_rat(ε) < x or ℝ.from_rat(r) < x","not ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε) or not ℝ.from_rat(r) + ℝ.from_rat(ε) < x","ℝ.from_rat(r) < ℝ.from_rat(r) + ℝ.from_rat(ε)","ℝ.from_rat(r) + ℝ.from_rat(ε) < x","not ℝ.from_rat(r) + ℝ.from_rat(ε) < x"]}
{"goal":"rat_lower","proof":["not (x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) or not ℝ.from_rat(r) < x","(x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε) = ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not ℝ.from_rat(ε) < (x - ℝ.from_rat(r)).abs or ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not (x - ℝ.from_rat(r)).abs >= ℝ.from_rat(ε)","ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs","not ℝ.from_rat(ε) <= (x - ℝ.from_rat(r)).abs"]}
{"goal":"ℝ.from_rat(q) - c = ℝ.from_rat(q) - c + -a + a","proof":["ℝ.from_rat(q) - c + -a + --a = ℝ.from_rat(q) - c + -a - -a","ℝ.from_rat(q) - c + -a - -a = ℝ.from_rat(q) - c","--a = a","ℝ.from_rat(q) - c + -a + --a != ℝ.from_rat(q) - c"]}
{"goal":"ℝ.from_rat(q) - c = ℝ.from_rat(q) - a + (a - c)","proof":["-a + (ℝ.from_rat(q) + -c) = -a + ℝ.from_rat(q) + -c","ℝ.from_rat(q) - a + (-c + a) = ℝ.from_rat(q) - a + -c + a","a + -c = a - c","ℝ.from_rat(q) + -a = ℝ.from_rat(q) - a","ℝ.from_rat(q) + -c = ℝ.from_rat(q) - c","ℝ.new(add_gt(ℝ.from_rat(q) - a + -c, a)) = ℝ.from_rat(q) - a + -c + a","ℝ.new(add_gt(ℝ.from_rat(q) - c + -a, a)) = ℝ.from_rat(q) - c + -a + a","-a + ℝ.from_rat(q) = ℝ.from_rat(q) + -a","a + -c = -c + a","ℝ.from_rat(q) - c + -a = -a + (ℝ.from_rat(q) - c)"]}
{"goal":"(ℝ.from_rat(q) - c).abs <= (ℝ.from_rat(q) - a).abs + (a - c).abs","proof":["(ℝ.from_rat(q) - a + (a - c)).abs <= (ℝ.from_rat(q) - a).abs + (a - c).abs"]}
{"goal":"(ℝ.from_rat(q) - a).abs + (a - c).abs < ℝ.from_rat(ε) + (a - c).abs","proof":["not (a - ℝ.from_rat(q)).abs < ℝ.from_rat(ε) or (ℝ.from_rat(q) - a).abs < ℝ.from_rat(ε)","not (ℝ.from_rat(q) - a).abs < ℝ.from_rat(ε) or (ℝ.from_rat(q) - a).abs + (a - c).abs < ℝ.from_rat(ε) + (a - c).abs","(ℝ.from_rat(q) - a).abs < ℝ.from_rat(ε)","not (ℝ.from_rat(q) - a).abs < ℝ.from_rat(ε)"]}
{"goal":"(ℝ.from_rat(q) - c).abs < ℝ.from_rat(ε) + (a - c).abs","proof":["not (ℝ.from_rat(q) - a).abs + (a - c).abs < ℝ.from_rat(ε) + (a - c).abs or not (ℝ.from_rat(q) - c).abs <= (ℝ.from_rat(q) - a).abs + (a - c).abs or (ℝ.from_rat(q) - c).abs < ℝ.from_rat(ε) + (a - c).abs","not (ℝ.from_rat(q) - a).abs + (a - c).abs < ℝ.from_rat(ε) + (a - c).abs or not (ℝ.from_rat(q) - c).abs <= (ℝ.from_rat(q) - a).abs + (a - c).abs"]}
{"goal":"ℝ.from_rat(ε) < r - (a - c).abs","proof":[]}
{"goal":"ℝ.from_rat(ε) + (a - c).abs < r - (a - c).abs + (a - c).abs","proof":["not ℝ.from_rat(ε) < r - (a - c).abs or ℝ.from_rat(ε) + (a - c).abs < r - (a - c).abs + (a - c).abs"]}
{"goal":"ℝ.from_rat(ε) + (a - c).abs < r","proof":["not ℝ.from_rat(ε) < r - (a - c).abs or ℝ.from_rat(ε) + (a - c).abs < r"]}
{"goal":"(ℝ.from_rat(q) - c).abs < r","proof":["not (ℝ.from_rat(q) - c).abs < ℝ.from_rat(ε) + (a - c).abs or not ℝ.from_rat(ε) + (a - c).abs <= r or (ℝ.from_rat(q) - c).abs < r","not ℝ.from_rat(ε) + (a - c).abs < r or ℝ.from_rat(ε) + (a - c).abs <= r","not (ℝ.from_rat(q) - c).abs < ℝ.from_rat(ε) + (a - c).abs or not ℝ.from_rat(ε) + (a - c).abs <= r","ℝ.from_rat(ε) + (a - c).abs <= r","not ℝ.from_rat(ε) + (a - c).abs <= r"]}
{"goal":"rat_intersect_lemma","proof":[]}
{"goal":"r1 - (a - c1).abs > 0","proof":["not 0 + (a - c1).abs < r1 or 0 < r1 - (a - c1).abs","r1 - (a - c1).abs > 0 = 0 < r1 - (a - c1).abs","not 0 < r1 - (a - c1).abs","0 + (a - c1).abs = (a - c1).abs","not 0 + (a - c1).abs < r1","0 + (a - c1).abs < r1"]}
{"goal":"r2 - (a - c2).abs > 0","proof":["not 0 + (a - c2).abs < r2 or 0 < r2 - (a - c2).abs","r2 - (a - c2).abs > 0 = 0 < r2 - (a - c2).abs","not 0 < r2 - (a - c2).abs","0 + (a - c2).abs = (a - c2).abs","not 0 + (a - c2).abs < r2","0 + (a - c2).abs < r2"]}
{"goal":"d > 0","proof":["not r1 - (a - c1).abs > 0 or not r2 - (a - c2).abs > 0 or (r1 - (a - c1).abs).min(r2 - (a - c2).abs) > 0","not (r1 - (a - c1).abs).min(r2 - (a - c2).abs) > 0"]}
{"goal":"exists(k0: ℚ) { 0 < ℝ.from_rat(k0) and ℝ.from_rat(k0) < d }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 > x1 or x0 > ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 > x3 or ℝ.from_rat(s0(x2, x3)) > x3 } }","not 0 < ℝ.from_rat(s0(d, 0)) or not ℝ.from_rat(s0(d, 0)) < d","not d > 0 or ℝ.from_rat(s0(d, 0)) > 0","not d > 0 or d > ℝ.from_rat(s0(d, 0))","d > ℝ.from_rat(s0(d, 0)) = ℝ.from_rat(s0(d, 0)) < d","ℝ.from_rat(s0(d, 0)) > 0 = 0 < ℝ.from_rat(s0(d, 0))","not d > ℝ.from_rat(s0(d, 0)) or ℝ.from_rat(s0(d, 0)) < d","d > ℝ.from_rat(s0(d, 0))","ℝ.from_rat(s0(d, 0)) > 0","0 < ℝ.from_rat(s0(d, 0))","ℝ.from_rat(s0(d, 0)) < d","not ℝ.from_rat(s0(d, 0)) < d"]}
{"goal":"ε > ℚ.0","proof":["ℝ.from_rat(ε).gt_rat(ℚ.0) = ε > ℚ.0","not ℝ.from_rat(ε).gt_rat(ℚ.0)","ℝ.from_rat(ε) > 0 = 0 < ℝ.from_rat(ε)","not ℝ.from_rat(ε) > 0 or ℝ.from_rat(ε).is_positive","ℝ.from_rat(ε).gt_rat(ℚ.0) = ℝ.from_rat(ε).is_positive","not ℝ.from_rat(ε).is_positive","ℝ.from_rat(ε) > 0","not ℝ.from_rat(ε) > 0"]}
{"goal":"ℝ.from_rat(ε) < r1 - (a - c1).abs","proof":["not ℝ.from_rat(ε) < (r1 - (a - c1).abs).min(r2 - (a - c2).abs) or ℝ.from_rat(ε) < r1 - (a - c1).abs","not ℝ.from_rat(ε) < (r1 - (a - c1).abs).min(r2 - (a - c2).abs)"]}
{"goal":"ℝ.from_rat(ε) < r2 - (a - c2).abs","proof":["not ℝ.from_rat(ε) < (r1 - (a - c1).abs).min(r2 - (a - c2).abs) or ℝ.from_rat(ε) < r2 - (a - c2).abs","not ℝ.from_rat(ε) < (r1 - (a - c1).abs).min(r2 - (a - c2).abs)"]}
{"goal":"exists(k0: ℚ) { (a - ℝ.from_rat(k0)).abs < ℝ.from_rat(ε) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or (x1 - ℝ.from_rat(s0(x1, x0))).abs < ℝ.from_rat(x0) } }","not (a - ℝ.from_rat(s0(a, ε))).abs < ℝ.from_rat(ε)","not ε > ℚ.0 or (a - ℝ.from_rat(s0(a, ε))).abs < ℝ.from_rat(ε)"]}
{"goal":"(ℝ.from_rat(q) - c1).abs < r1","proof":["not ℝ.from_rat(ε) < r1 - (a - c1).abs or not (a - ℝ.from_rat(q)).abs < ℝ.from_rat(ε) or not (a - c1).abs < r1 or not ε > ℚ.0 or (ℝ.from_rat(q) - c1).abs < r1","not ℝ.from_rat(ε) < r1 - (a - c1).abs or not (a - ℝ.from_rat(q)).abs < ℝ.from_rat(ε) or not (a - c1).abs < r1 or not ε > ℚ.0"]}
{"goal":"(ℝ.from_rat(q) - c2).abs < r2","proof":["not ℝ.from_rat(ε) < r2 - (a - c2).abs or not (a - ℝ.from_rat(q)).abs < ℝ.from_rat(ε) or not (a - c2).abs < r2 or not ε > ℚ.0 or (ℝ.from_rat(q) - c2).abs < r2","not ℝ.from_rat(ε) < r2 - (a - c2).abs or not (a - ℝ.from_rat(q)).abs < ℝ.from_rat(ε) or not (a - c2).abs < r2 or not ε > ℚ.0"]}
{"goal":"rat_intersect","proof":["not (ℝ.from_rat(q) - c2).abs < r2 or not (ℝ.from_rat(q) - c1).abs < r1","not (ℝ.from_rat(q) - c1).abs < r1"]}
{"goal":"swap_minus_plus","proof":["-c + (a + b) = -c + a + b","a + -c = a - c","a + b + -c = a + b - c","-c + (a + b) = a + b + -c","a + -c = -c + a"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { k0 > ℚ.0 and a.gt_rat(k0) and k1 > ℚ.0 and b.gt_rat(k1) and y = k0 ⋅ k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not pos_mul_truncated_gt(x0, x1, x2) or s0(x0, x1, x2) > ℚ.0 } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not pos_mul_truncated_gt(x3, x4, x5) or x3.gt_rat(s0(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not pos_mul_truncated_gt(x6, x7, x8) or s1(x6, x7, x8) > ℚ.0 } and forall(x9: ℝ, x10: ℝ, x11: ℚ) { not pos_mul_truncated_gt(x9, x10, x11) or x10.gt_rat(s1(x9, x10, x11)) } and forall(x12: ℝ, x13: ℝ, x14: ℚ) { not pos_mul_truncated_gt(x12, x13, x14) or s0(x12, x13, x14) ⋅ s1(x12, x13, x14) = x14 } and forall(x15: ℚ, x16: ℚ, x17: ℝ, x18: ℝ, x19: ℚ) { not x15 > ℚ.0 or not x16 > ℚ.0 or not x17.gt_rat(x15) or not x18.gt_rat(x16) or x15 ⋅ x16 != x19 or pos_mul_truncated_gt(x17, x18, x19) } }","not s0(a, b, y) > ℚ.0 or not s1(a, b, y) > ℚ.0 or not b.gt_rat(s1(a, b, y)) or not a.gt_rat(s0(a, b, y)) or s0(a, b, y) ⋅ s1(a, b, y) != y","not pos_mul_truncated_gt(a, b, y) or s0(a, b, y) ⋅ s1(a, b, y) = y","not pos_mul_truncated_gt(a, b, y) or b.gt_rat(s1(a, b, y))","not pos_mul_truncated_gt(a, b, y) or s1(a, b, y) > ℚ.0","not pos_mul_truncated_gt(a, b, y) or a.gt_rat(s0(a, b, y))","not pos_mul_truncated_gt(a, b, y) or s0(a, b, y) > ℚ.0","s0(a, b, y) > ℚ.0","a.gt_rat(s0(a, b, y))","s1(a, b, y) > ℚ.0","b.gt_rat(s1(a, b, y))","s0(a, b, y) ⋅ s1(a, b, y) = y"]}
{"goal":"y > ℚ.0","proof":["let (s0: ℚ, s1: ℚ) satisfy { s0 > ℚ.0 and a.gt_rat(s0) and s1 > ℚ.0 and b.gt_rat(s1) and s0 ⋅ s1 = y }","not s0 > ℚ.0 or not s1 > ℚ.0 or s0 ⋅ s1 > ℚ.0","not s0 ⋅ s1 > ℚ.0"]}
{"goal":"x / y > ℚ.0","proof":["not x > ℚ.0 or not ℚ.1 / y > ℚ.0 or x ⋅ ℚ.1 / y > ℚ.0","ℚ.1 / y > ℚ.0 = y > ℚ.0","x ⋅ ℚ.1 / y = x / y","x > ℚ.0 = ℚ.0 < x","not x ⋅ ℚ.1 / y > ℚ.0","x > ℚ.0","ℚ.1 / y > ℚ.0","not ℚ.1 / y > ℚ.0"]}
{"goal":"x / y < ℚ.1","proof":["not x < ℚ.1 ⋅ y or not y > ℚ.0 or x / y < ℚ.1","not x < ℚ.1 ⋅ y","ℚ.1 ⋅ y = y"]}
{"goal":"ray > ℚ.0","proof":[]}
{"goal":"x / y ⋅ ray < ray","proof":["not x / y > ℚ.0 or not ray > ℚ.0 or not ray <= ray or not x / y < ℚ.1 or x / y ⋅ ray < ℚ.1 ⋅ ray","ray != ray or ray <= ray","ℚ.1 ⋅ ray = ray","ray <= ray","not x / y ⋅ ray < ℚ.1 ⋅ ray"]}
{"goal":"rax < ray","proof":["not x / y ⋅ ray < ray"]}
{"goal":"a.gt_rat(rax)","proof":["not a.gt_rat(ray) or a.gt_rat(rax) or ray <= rax","ray > rax != ray <= rax","ray > rax = rax < ray","not a.gt_rat(ray) or ray <= rax","ray <= rax","ray > rax","not ray > rax or not ray <= rax"]}
{"goal":"b.gt_rat(rby)","proof":[]}
{"goal":"rax ⋅ rby = x / y ⋅ (ray ⋅ rby)","proof":["x / y ⋅ (ray ⋅ rby) = x / y ⋅ ray ⋅ rby"]}
{"goal":"rax ⋅ rby = x","proof":["x / y ⋅ y = x or ℚ.0 = y","not y > ℚ.0 or ℚ.0 != y","ℚ.0 != y","x / y ⋅ (ray ⋅ rby) != x","x / y ⋅ y != x"]}
{"goal":"ℝ.new(a.gt_rat).gt_rat(rax)","proof":["ℝ.new(a.gt_rat) = a"]}
{"goal":"ℝ.new(b.gt_rat).gt_rat(rby)","proof":["ℝ.new(b.gt_rat) = b"]}
{"goal":"pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), rax ⋅ rby)","proof":["not rax > ℚ.0 or not rby > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(rax) or not ℝ.new(b.gt_rat).gt_rat(rby) or rax ⋅ rby != rax ⋅ rby or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), rax ⋅ rby)","not x / y > ℚ.0 or not ray > ℚ.0 or x / y ⋅ ray > ℚ.0","not rax > ℚ.0 or not rby > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(rax) or not ℝ.new(b.gt_rat).gt_rat(rby) or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), rax ⋅ rby)","not rax > ℚ.0","not x / y > ℚ.0 or x / y ⋅ ray > ℚ.0","not x / y ⋅ ray > ℚ.0","x / y ⋅ ray > ℚ.0"]}
{"goal":"pos_mul_truncated_gt(a, b, x)","proof":["ℝ.new(a.gt_rat) = a","ℝ.new(b.gt_rat) = b"]}
{"goal":"pos_mul_truncated_is_lower_interval","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ, x1: ℚ -> Bool, x2: ℚ) { not ℚ.0 < x0 or not is_lower_interval_truncated(x1) or not x0 < x2 or not x1(x2) or x1(x0) } and forall(x3: ℚ -> Bool) { is_lower_interval_truncated(x3) or x3(s1(x3)) } and forall(x4: ℚ -> Bool) { ℚ.0 < s0(x4) or is_lower_interval_truncated(x4) } and forall(x5: ℚ -> Bool) { s0(x5) < s1(x5) or is_lower_interval_truncated(x5) } and forall(x6: ℚ -> Bool) { not x6(s0(x6)) or is_lower_interval_truncated(x6) } }","not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b))) or not ℚ.0 < s0(pos_mul_truncated_gt(a, b)) or not s0(pos_mul_truncated_gt(a, b)) < s1(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","s0(pos_mul_truncated_gt(a, b)) < s1(pos_mul_truncated_gt(a, b)) or is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","ℚ.0 < s0(pos_mul_truncated_gt(a, b)) or is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","ℚ.0 < s0(pos_mul_truncated_gt(a, b))","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","is_lower_interval_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","s0(pos_mul_truncated_gt(a, b)) < s1(pos_mul_truncated_gt(a, b))"]}
{"goal":"pos_mul_gt(a, b, x)","proof":["not a > 0 or not b > 0 or not x <= ℚ.0 or pos_mul_gt(a, b, x)"]}
{"goal":"x > ℚ.0","proof":["ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0) = x <= ℚ.0","ℝ.from_rat(x) > ℝ.from_rat(ℚ.0) = x > ℚ.0","not ℝ.from_rat(x) > ℝ.from_rat(ℚ.0)","ℝ.from_rat(x) > ℝ.from_rat(ℚ.0) or ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)","not ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)","ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)"]}
{"goal":"pos_mul_truncated_gt(a, b, y)","proof":["not pos_mul_gt(a, b, y) or y <= ℚ.0 or pos_mul_truncated_gt(a, b, y)","y <= ℚ.0","not x > ℚ.0 or not x <= y or y > ℚ.0","not y > ℚ.0 or not y <= ℚ.0 or ℚ.0 > ℚ.0","not x < y or x <= y","not ℚ.0 > ℚ.0 or ℚ.0 != ℚ.0","x <= y","not ℚ.0 > ℚ.0","y > ℚ.0","not y > ℚ.0"]}
{"goal":"pos_mul_truncated_gt(a, b, x)","proof":["not ℚ.0 < x or not is_lower_interval_truncated(pos_mul_truncated_gt(a, b)) or not x < y or not pos_mul_truncated_gt(a, b, y) or pos_mul_truncated_gt(a, b, x)","not a > 0 or not b > 0 or is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","x > ℚ.0 = ℚ.0 < x","ℚ.0 < x","not a > 0 or is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","is_lower_interval_truncated(pos_mul_truncated_gt(a, b))","not is_lower_interval_truncated(pos_mul_truncated_gt(a, b)) or not pos_mul_truncated_gt(a, b, y) or pos_mul_truncated_gt(a, b, x)"]}
{"goal":"pos_mul_gt(a, b, x)","proof":["not a > 0 or not b > 0 or not pos_mul_truncated_gt(a, b, x) or pos_mul_gt(a, b, x)"]}
{"goal":"pos_mul_is_lower_interval","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool, x1: ℚ, x2: ℚ) { not is_lower_interval(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: ℚ -> Bool) { is_lower_interval(x3) or x3(s1(x3)) } and forall(x4: ℚ -> Bool) { s0(x4) < s1(x4) or is_lower_interval(x4) } and forall(x5: ℚ -> Bool) { not x5(s0(x5)) or is_lower_interval(x5) } }","not pos_mul_gt(a, b, s1(pos_mul_gt(a, b))) or not s0(pos_mul_gt(a, b)) < s1(pos_mul_gt(a, b)) or pos_mul_gt(a, b, s0(pos_mul_gt(a, b)))","s0(pos_mul_gt(a, b)) < s1(pos_mul_gt(a, b)) or is_lower_interval(pos_mul_gt(a, b))","not pos_mul_gt(a, b, s0(pos_mul_gt(a, b))) or is_lower_interval(pos_mul_gt(a, b))","is_lower_interval(pos_mul_gt(a, b)) or pos_mul_gt(a, b, s1(pos_mul_gt(a, b)))","pos_mul_gt(a, b, s1(pos_mul_gt(a, b)))","not pos_mul_gt(a, b, s0(pos_mul_gt(a, b)))","s0(pos_mul_gt(a, b)) < s1(pos_mul_gt(a, b))"]}
{"goal":"exists(k0: ℚ) { 0 < ℝ.from_rat(k0) and ℝ.from_rat(k0) < a }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 > x1 or x0 > ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 > x3 or ℝ.from_rat(s0(x2, x3)) > x3 } }","not 0 < ℝ.from_rat(s0(a, 0)) or not ℝ.from_rat(s0(a, 0)) < a","not a > 0 or ℝ.from_rat(s0(a, 0)) > 0","not a > 0 or a > ℝ.from_rat(s0(a, 0))","a > ℝ.from_rat(s0(a, 0)) = ℝ.from_rat(s0(a, 0)) < a","ℝ.from_rat(s0(a, 0)) > 0 = 0 < ℝ.from_rat(s0(a, 0))","not a > ℝ.from_rat(s0(a, 0)) or ℝ.from_rat(s0(a, 0)) < a","a > ℝ.from_rat(s0(a, 0))","ℝ.from_rat(s0(a, 0)) > 0","0 < ℝ.from_rat(s0(a, 0))","ℝ.from_rat(s0(a, 0)) < a","not ℝ.from_rat(s0(a, 0)) < a"]}
{"goal":"exists(k0: ℚ) { 0 < ℝ.from_rat(k0) and ℝ.from_rat(k0) < b }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 > x1 or x0 > ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 > x3 or ℝ.from_rat(s0(x2, x3)) > x3 } }","not 0 < ℝ.from_rat(s0(b, 0)) or not ℝ.from_rat(s0(b, 0)) < b","not b > 0 or ℝ.from_rat(s0(b, 0)) > 0","not b > 0 or b > ℝ.from_rat(s0(b, 0))","b > ℝ.from_rat(s0(b, 0)) = ℝ.from_rat(s0(b, 0)) < b","ℝ.from_rat(s0(b, 0)) > 0 = 0 < ℝ.from_rat(s0(b, 0))","not b > ℝ.from_rat(s0(b, 0)) or ℝ.from_rat(s0(b, 0)) < b","b > ℝ.from_rat(s0(b, 0))","ℝ.from_rat(s0(b, 0)) > 0","0 < ℝ.from_rat(s0(b, 0))","ℝ.from_rat(s0(b, 0)) < b","not ℝ.from_rat(s0(b, 0)) < b"]}
{"goal":"a.gt_rat(ra)","proof":["not a > ℝ.from_rat(ra) or a.gt_rat(ra)","not a > ℝ.from_rat(ra)","a > ℝ.from_rat(ra) = ℝ.from_rat(ra) < a"]}
{"goal":"b.gt_rat(rb)","proof":["not b > ℝ.from_rat(rb) or b.gt_rat(rb)","not b > ℝ.from_rat(rb)","b > ℝ.from_rat(rb) = ℝ.from_rat(rb) < b"]}
{"goal":"ra > ℚ.0","proof":["ℝ.from_rat(ra).gt_rat(ℚ.0) = ra > ℚ.0","not ℝ.from_rat(ra).gt_rat(ℚ.0)","ℝ.from_rat(ra) > 0 = 0 < ℝ.from_rat(ra)","not ℝ.from_rat(ra) > 0 or ℝ.from_rat(ra).is_positive","ℝ.from_rat(ra).gt_rat(ℚ.0) = ℝ.from_rat(ra).is_positive","not ℝ.from_rat(ra).is_positive","ℝ.from_rat(ra) > 0","not ℝ.from_rat(ra) > 0"]}
{"goal":"rb > ℚ.0","proof":["ℝ.from_rat(rb).gt_rat(ℚ.0) = rb > ℚ.0","not ℝ.from_rat(rb).gt_rat(ℚ.0)","ℝ.from_rat(rb) > 0 = 0 < ℝ.from_rat(rb)","not ℝ.from_rat(rb) > 0 or ℝ.from_rat(rb).is_positive","ℝ.from_rat(rb).gt_rat(ℚ.0) = ℝ.from_rat(rb).is_positive","not ℝ.from_rat(rb).is_positive","ℝ.from_rat(rb) > 0","not ℝ.from_rat(rb) > 0"]}
{"goal":"r > ℚ.0","proof":["not ra > ℚ.0 or not rb > ℚ.0 or ra ⋅ rb > ℚ.0","not ra ⋅ rb > ℚ.0"]}
{"goal":"ℝ.new(a.gt_rat).gt_rat(ra)","proof":["ℝ.new(a.gt_rat) = a"]}
{"goal":"ℝ.new(b.gt_rat).gt_rat(rb)","proof":["ℝ.new(b.gt_rat) = b"]}
{"goal":"pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), ra ⋅ rb)","proof":["not ra > ℚ.0 or not rb > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(ra) or not ℝ.new(b.gt_rat).gt_rat(rb) or ra ⋅ rb != ra ⋅ rb or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), ra ⋅ rb)","not ra > ℚ.0 or not rb > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(ra) or not ℝ.new(b.gt_rat).gt_rat(rb) or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), ra ⋅ rb)"]}
{"goal":"pos_mul_truncated_gt(a, b, r)","proof":["not ra > ℚ.0 or not rb > ℚ.0 or not a.gt_rat(ra) or not b.gt_rat(rb) or ra ⋅ rb != ra ⋅ rb or pos_mul_truncated_gt(a, b, ra ⋅ rb)","not pos_mul_truncated_gt(a, b, ra ⋅ rb)","not ra > ℚ.0 or not rb > ℚ.0 or not a.gt_rat(ra) or not b.gt_rat(rb) or pos_mul_truncated_gt(a, b, ra ⋅ rb)"]}
{"goal":"exists(k0: ℚ) { a < ℝ.from_rat(k0) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not a < ℝ.from_rat(s0(a, ra ⋅ rb) + ra ⋅ rb)","not ra ⋅ rb > ℚ.0 or a < ℝ.from_rat(s0(a, ra ⋅ rb) + ra ⋅ rb)","not ra ⋅ rb > ℚ.0"]}
{"goal":"exists(k0: ℚ) { b < ℝ.from_rat(k0) }","proof":["let s0: (ℝ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℝ) { not x0 > ℚ.0 or ℝ.from_rat(s0(x1, x0)) < x1 } and forall(x2: ℚ, x3: ℝ) { not x2 > ℚ.0 or x3 < ℝ.from_rat(s0(x3, x2) + x2) } }","not b < ℝ.from_rat(s0(b, ra ⋅ rb) + ra ⋅ rb)","not ra ⋅ rb > ℚ.0 or b < ℝ.from_rat(s0(b, ra ⋅ rb) + ra ⋅ rb)","not ra ⋅ rb > ℚ.0"]}
{"goal":"ℝ.from_rat(za) < a","proof":["not a.gt_rat(za) or a > ℝ.from_rat(za)","a > ℝ.from_rat(za) = ℝ.from_rat(za) < a","a > ℝ.from_rat(za)","not a > ℝ.from_rat(za)"]}
{"goal":"ℝ.from_rat(zb) < b","proof":["not b.gt_rat(zb) or b > ℝ.from_rat(zb)","b > ℝ.from_rat(zb) = ℝ.from_rat(zb) < b","b > ℝ.from_rat(zb)","not b > ℝ.from_rat(zb)"]}
{"goal":"ℝ.from_rat(za) < ℝ.from_rat(qa)","proof":["not ℝ.from_rat(za) < a or not a <= ℝ.from_rat(qa) or ℝ.from_rat(za) < ℝ.from_rat(qa)","not a < ℝ.from_rat(qa) or a <= ℝ.from_rat(qa)","not ℝ.from_rat(za) < a or not a <= ℝ.from_rat(qa)","a <= ℝ.from_rat(qa)","not a <= ℝ.from_rat(qa)"]}
{"goal":"ℝ.from_rat(zb) < ℝ.from_rat(qb)","proof":["not ℝ.from_rat(zb) < b or not b <= ℝ.from_rat(qb) or ℝ.from_rat(zb) < ℝ.from_rat(qb)","not b < ℝ.from_rat(qb) or b <= ℝ.from_rat(qb)","not ℝ.from_rat(zb) < b or not b <= ℝ.from_rat(qb)","b <= ℝ.from_rat(qb)","not b <= ℝ.from_rat(qb)"]}
{"goal":"za < qa","proof":["not a <= ℝ.from_rat(qa) or not a.gt_rat(za) or ℝ.from_rat(qa).gt_rat(za)","ℝ.from_rat(qa).gt_rat(za) = qa > za","not a < ℝ.from_rat(qa) or a <= ℝ.from_rat(qa)","qa > za = za < qa","not qa > za","a <= ℝ.from_rat(qa)","not a <= ℝ.from_rat(qa) or ℝ.from_rat(qa).gt_rat(za)","not ℝ.from_rat(qa).gt_rat(za)","ℝ.from_rat(qa).gt_rat(za)"]}
{"goal":"zb < qb","proof":["not b <= ℝ.from_rat(qb) or not b.gt_rat(zb) or ℝ.from_rat(qb).gt_rat(zb)","ℝ.from_rat(qb).gt_rat(zb) = qb > zb","not b < ℝ.from_rat(qb) or b <= ℝ.from_rat(qb)","qb > zb = zb < qb","not qb > zb","b <= ℝ.from_rat(qb)","not b <= ℝ.from_rat(qb) or ℝ.from_rat(qb).gt_rat(zb)","not ℝ.from_rat(qb).gt_rat(zb)","ℝ.from_rat(qb).gt_rat(zb)"]}
{"goal":"za ⋅ zb < qa ⋅ qb","proof":["not za > ℚ.0 or not zb > ℚ.0 or not za < qa or not zb < qb or za ⋅ zb < qa ⋅ qb"]}
{"goal":"za ⋅ zb < q","proof":["not za ⋅ zb < qa ⋅ qb"]}
{"goal":"za ⋅ zb != q","proof":["q < q","not q < q or not q < q"]}
{"goal":"ℝ.from_rat(qa) > 0","proof":["not 0 < a or not a <= ℝ.from_rat(qa) or 0 < ℝ.from_rat(qa)","a > 0 = 0 < a","ℝ.from_rat(qa) > 0 = 0 < ℝ.from_rat(qa)","not 0 < ℝ.from_rat(qa)","0 < a","not a < ℝ.from_rat(qa) or a <= ℝ.from_rat(qa)","a <= ℝ.from_rat(qa)","not a <= ℝ.from_rat(qa) or not 0 < a"]}
{"goal":"ℝ.from_rat(qb) > 0","proof":["not 0 < b or not b <= ℝ.from_rat(qb) or 0 < ℝ.from_rat(qb)","b > 0 = 0 < b","ℝ.from_rat(qb) > 0 = 0 < ℝ.from_rat(qb)","not 0 < ℝ.from_rat(qb)","0 < b","not b < ℝ.from_rat(qb) or b <= ℝ.from_rat(qb)","b <= ℝ.from_rat(qb)","not b <= ℝ.from_rat(qb) or not 0 < b"]}
{"goal":"qa > ℚ.0","proof":["ℝ.from_rat(qa).gt_rat(ℚ.0) = qa > ℚ.0","not ℝ.from_rat(qa).gt_rat(ℚ.0)","not ℝ.from_rat(qa) > 0 or ℝ.from_rat(qa).is_positive","ℝ.from_rat(qa).gt_rat(ℚ.0) = ℝ.from_rat(qa).is_positive","ℝ.from_rat(qa).is_positive","not ℝ.from_rat(qa).is_positive"]}
{"goal":"qb > ℚ.0","proof":["ℝ.from_rat(qb).gt_rat(ℚ.0) = qb > ℚ.0","not ℝ.from_rat(qb).gt_rat(ℚ.0)","not ℝ.from_rat(qb) > 0 or ℝ.from_rat(qb).is_positive","ℝ.from_rat(qb).gt_rat(ℚ.0) = ℝ.from_rat(qb).is_positive","ℝ.from_rat(qb).is_positive","not ℝ.from_rat(qb).is_positive"]}
{"goal":"qa ⋅ qb > ℚ.0","proof":["not qa > ℚ.0 or not qb > ℚ.0 or qa ⋅ qb > ℚ.0"]}
{"goal":"q > ℚ.0","proof":["not qa ⋅ qb > ℚ.0"]}
{"goal":"not pos_mul_truncated_gt(a, b, q)","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not pos_mul_truncated_gt(x0, x1, x2) or s0(x0, x1, x2) > ℚ.0 } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not pos_mul_truncated_gt(x3, x4, x5) or x3.gt_rat(s0(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not pos_mul_truncated_gt(x6, x7, x8) or s1(x6, x7, x8) > ℚ.0 } and forall(x9: ℝ, x10: ℝ, x11: ℚ) { not pos_mul_truncated_gt(x9, x10, x11) or x10.gt_rat(s1(x9, x10, x11)) } and forall(x12: ℝ, x13: ℝ, x14: ℚ) { not pos_mul_truncated_gt(x12, x13, x14) or s0(x12, x13, x14) ⋅ s1(x12, x13, x14) = x14 } and forall(x15: ℚ, x16: ℚ, x17: ℝ, x18: ℝ, x19: ℚ) { not x15 > ℚ.0 or not x16 > ℚ.0 or not x17.gt_rat(x15) or not x18.gt_rat(x16) or x15 ⋅ x16 != x19 or pos_mul_truncated_gt(x17, x18, x19) } }","not s0(a, b, q) > ℚ.0 or not s1(a, b, q) > ℚ.0 or not b.gt_rat(s1(a, b, q)) or not a.gt_rat(s0(a, b, q)) or s0(a, b, q) ⋅ s1(a, b, q) != q","not pos_mul_truncated_gt(a, b, q) or s0(a, b, q) ⋅ s1(a, b, q) = q","not pos_mul_truncated_gt(a, b, q) or b.gt_rat(s1(a, b, q))","not pos_mul_truncated_gt(a, b, q) or s1(a, b, q) > ℚ.0","not pos_mul_truncated_gt(a, b, q) or a.gt_rat(s0(a, b, q))","not pos_mul_truncated_gt(a, b, q) or s0(a, b, q) > ℚ.0","s0(a, b, q) > ℚ.0","a.gt_rat(s0(a, b, q))","s1(a, b, q) > ℚ.0","b.gt_rat(s1(a, b, q))","s0(a, b, q) ⋅ s1(a, b, q) = q"]}
{"goal":"pos_mul_truncated_is_cut","proof":["not r > ℚ.0 or not q > ℚ.0 or not pos_mul_truncated_gt(a, b, r) or is_cut_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, q)","not pos_mul_truncated_gt(a, b, r) or not r > ℚ.0 or not q > ℚ.0 or pos_mul_truncated_gt(a, b, q)","not pos_mul_truncated_gt(a, b, r) or not r > ℚ.0"]}
{"goal":"is_cut_truncated(pos_mul_truncated_gt(a, b))","proof":["not a > 0 or not b > 0 or is_cut_truncated(pos_mul_truncated_gt(a, b))"]}
{"goal":"exists(k0: ℚ) { k0 > ℚ.0 and pos_mul_truncated_gt(a, b, k0) }","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not is_cut_truncated(x0) or s0(x0) > ℚ.0 } and forall(x1: ℚ -> Bool) { not is_cut_truncated(x1) or x1(s0(x1)) } and forall(x2: ℚ -> Bool) { not is_cut_truncated(x2) or s1(x2) > ℚ.0 } and forall(x3: ℚ -> Bool) { not is_cut_truncated(x3) or not x3(s1(x3)) } and forall(x4: ℚ, x5: ℚ, x6: ℚ -> Bool) { not x4 > ℚ.0 or not x5 > ℚ.0 or not x6(x4) or is_cut_truncated(x6) or x6(x5) } }","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or not s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","s0(pos_mul_truncated_gt(a, b)) > ℚ.0","pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))"]}
{"goal":"exists(k0: ℚ) { k0 > ℚ.0 and not pos_mul_truncated_gt(a, b, k0) }","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not is_cut_truncated(x0) or s0(x0) > ℚ.0 } and forall(x1: ℚ -> Bool) { not is_cut_truncated(x1) or x1(s0(x1)) } and forall(x2: ℚ -> Bool) { not is_cut_truncated(x2) or s1(x2) > ℚ.0 } and forall(x3: ℚ -> Bool) { not is_cut_truncated(x3) or not x3(s1(x3)) } and forall(x4: ℚ, x5: ℚ, x6: ℚ -> Bool) { not x4 > ℚ.0 or not x5 > ℚ.0 or not x6(x4) or is_cut_truncated(x6) or x6(x5) } }","not s1(pos_mul_truncated_gt(a, b)) > ℚ.0 or pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or s1(pos_mul_truncated_gt(a, b)) > ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","s1(pos_mul_truncated_gt(a, b)) > ℚ.0","not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))"]}
{"goal":"pos_mul_gt(a, b, r)","proof":["not a > 0 or not b > 0 or not pos_mul_truncated_gt(a, b, r) or pos_mul_gt(a, b, r)"]}
{"goal":"not pos_mul_gt(a, b, q)","proof":["not pos_mul_gt(a, b, q) or q <= ℚ.0 or pos_mul_truncated_gt(a, b, q)","q <= ℚ.0","not q > ℚ.0 or not q <= ℚ.0 or ℚ.0 > ℚ.0","not ℚ.0 > ℚ.0 or ℚ.0 != ℚ.0","ℚ.0 > ℚ.0","not ℚ.0 > ℚ.0"]}
{"goal":"pos_mul_is_cut","proof":["let s0: ℚ satisfy { true }","not pos_mul_gt(a, b, r) or pos_mul_gt(a, b, s0)","not pos_mul_gt(a, b, s0) or pos_mul_gt(a, b, q)","not pos_mul_gt(a, b, s0)","pos_mul_gt(a, b, s0)"]}
{"goal":"exists(k0: ℚ) { k0 > ℚ.0 and pos_mul_truncated_gt(a, b, k0) and forall(x0: ℚ) { x0 > ℚ.0 and pos_mul_truncated_gt(a, b, x0) implies x0 <= k0 } }","proof":["let (s0: ℚ -> Bool -> ℚ, s1: (ℚ -> Bool, ℚ) -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not has_greatest_truncated(x0) or s0(x0) > ℚ.0 } and forall(x1: ℚ -> Bool) { not has_greatest_truncated(x1) or x1(s0(x1)) } and forall(x2: ℚ, x3: ℚ -> Bool) { not x2 > ℚ.0 or not has_greatest_truncated(x3) or not x3(x2) or x2 <= s0(x3) } and forall(x4: ℚ, x5: ℚ -> Bool) { not x4 > ℚ.0 or not x5(x4) or s1(x5, x4) > ℚ.0 or has_greatest_truncated(x5) } and forall(x6: ℚ, x7: ℚ -> Bool) { not x6 > ℚ.0 or not x7(x6) or has_greatest_truncated(x7) or x7(s1(x7, x6)) } and forall(x8: ℚ -> Bool, x9: ℚ) { not s1(x8, x9) <= x9 or not x9 > ℚ.0 or not x8(x9) or has_greatest_truncated(x8) } }","let s2: ℚ -> ℚ satisfy { forall(x10: ℚ) { not pos_mul_truncated_gt(a, b, x10) or not x10 > ℚ.0 or s2(x10) > ℚ.0 } and forall(x11: ℚ) { not pos_mul_truncated_gt(a, b, x11) or not x11 > ℚ.0 or pos_mul_truncated_gt(a, b, s2(x11)) } and forall(x12: ℚ) { not pos_mul_truncated_gt(a, b, x12) or not s2(x12) <= x12 or not x12 > ℚ.0 } }","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or not s0(pos_mul_truncated_gt(a, b)) > ℚ.0 or pos_mul_truncated_gt(a, b, s2(s0(pos_mul_truncated_gt(a, b))))","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or not s2(s0(pos_mul_truncated_gt(a, b))) <= s0(pos_mul_truncated_gt(a, b)) or not s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or not s0(pos_mul_truncated_gt(a, b)) > ℚ.0 or s2(s0(pos_mul_truncated_gt(a, b))) > ℚ.0","not s2(s0(pos_mul_truncated_gt(a, b))) > ℚ.0 or not has_greatest_truncated(pos_mul_truncated_gt(a, b)) or not pos_mul_truncated_gt(a, b, s2(s0(pos_mul_truncated_gt(a, b)))) or s2(s0(pos_mul_truncated_gt(a, b))) <= s0(pos_mul_truncated_gt(a, b))","not has_greatest_truncated(pos_mul_truncated_gt(a, b)) or s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not has_greatest_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","s0(pos_mul_truncated_gt(a, b)) > ℚ.0","pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","not pos_mul_truncated_gt(a, b, s2(s0(pos_mul_truncated_gt(a, b)))) or not s2(s0(pos_mul_truncated_gt(a, b))) > ℚ.0 or s2(s0(pos_mul_truncated_gt(a, b))) <= s0(pos_mul_truncated_gt(a, b))","s2(s0(pos_mul_truncated_gt(a, b))) > ℚ.0","pos_mul_truncated_gt(a, b, s2(s0(pos_mul_truncated_gt(a, b))))","not s2(s0(pos_mul_truncated_gt(a, b))) <= s0(pos_mul_truncated_gt(a, b))","s2(s0(pos_mul_truncated_gt(a, b))) <= s0(pos_mul_truncated_gt(a, b))"]}
{"goal":"exists(k0: ℚ, k1: ℚ) { k0 > ℚ.0 and a.gt_rat(k0) and k1 > ℚ.0 and b.gt_rat(k1) and x = k0 ⋅ k1 }","proof":["let (s0: (ℝ, ℝ, ℚ) -> ℚ, s1: (ℝ, ℝ, ℚ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ, x2: ℚ) { not pos_mul_truncated_gt(x0, x1, x2) or s0(x0, x1, x2) > ℚ.0 } and forall(x3: ℝ, x4: ℝ, x5: ℚ) { not pos_mul_truncated_gt(x3, x4, x5) or x3.gt_rat(s0(x3, x4, x5)) } and forall(x6: ℝ, x7: ℝ, x8: ℚ) { not pos_mul_truncated_gt(x6, x7, x8) or s1(x6, x7, x8) > ℚ.0 } and forall(x9: ℝ, x10: ℝ, x11: ℚ) { not pos_mul_truncated_gt(x9, x10, x11) or x10.gt_rat(s1(x9, x10, x11)) } and forall(x12: ℝ, x13: ℝ, x14: ℚ) { not pos_mul_truncated_gt(x12, x13, x14) or s0(x12, x13, x14) ⋅ s1(x12, x13, x14) = x14 } and forall(x15: ℚ, x16: ℚ, x17: ℝ, x18: ℝ, x19: ℚ) { not x15 > ℚ.0 or not x16 > ℚ.0 or not x17.gt_rat(x15) or not x18.gt_rat(x16) or x15 ⋅ x16 != x19 or pos_mul_truncated_gt(x17, x18, x19) } }","not s0(a, b, x) > ℚ.0 or not s1(a, b, x) > ℚ.0 or not b.gt_rat(s1(a, b, x)) or not a.gt_rat(s0(a, b, x)) or s0(a, b, x) ⋅ s1(a, b, x) != x","not pos_mul_truncated_gt(a, b, x) or s0(a, b, x) ⋅ s1(a, b, x) = x","not pos_mul_truncated_gt(a, b, x) or b.gt_rat(s1(a, b, x))","not pos_mul_truncated_gt(a, b, x) or s1(a, b, x) > ℚ.0","not pos_mul_truncated_gt(a, b, x) or a.gt_rat(s0(a, b, x))","not pos_mul_truncated_gt(a, b, x) or s0(a, b, x) > ℚ.0","s0(a, b, x) > ℚ.0","a.gt_rat(s0(a, b, x))","s1(a, b, x) > ℚ.0","b.gt_rat(s1(a, b, x))","s0(a, b, x) ⋅ s1(a, b, x) = x"]}
{"goal":"ℝ.from_rat(xa) < a","proof":["not a.gt_rat(xa) or a > ℝ.from_rat(xa)","a > ℝ.from_rat(xa) = ℝ.from_rat(xa) < a","a > ℝ.from_rat(xa)","not a > ℝ.from_rat(xa)"]}
{"goal":"ℝ.from_rat(xb) < b","proof":["not b.gt_rat(xb) or b > ℝ.from_rat(xb)","b > ℝ.from_rat(xb) = ℝ.from_rat(xb) < b","b > ℝ.from_rat(xb)","not b > ℝ.from_rat(xb)"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(xa) < ℝ.from_rat(k0) and ℝ.from_rat(k0) < a }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not ℝ.from_rat(xa) < ℝ.from_rat(s0(ℝ.from_rat(xa), a)) or not ℝ.from_rat(s0(ℝ.from_rat(xa), a)) < a","not ℝ.from_rat(xa) < a or ℝ.from_rat(s0(ℝ.from_rat(xa), a)) < a","not ℝ.from_rat(xa) < a or ℝ.from_rat(xa) < ℝ.from_rat(s0(ℝ.from_rat(xa), a))","ℝ.from_rat(s0(ℝ.from_rat(xa), a)) < a","ℝ.from_rat(xa) < ℝ.from_rat(s0(ℝ.from_rat(xa), a))","not ℝ.from_rat(xa) < ℝ.from_rat(s0(ℝ.from_rat(xa), a))"]}
{"goal":"exists(k0: ℚ) { ℝ.from_rat(xb) < ℝ.from_rat(k0) and ℝ.from_rat(k0) < b }","proof":["let s0: (ℝ, ℝ) -> ℚ satisfy { forall(x0: ℝ, x1: ℝ) { not x0 < x1 or x0 < ℝ.from_rat(s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 < x3 or ℝ.from_rat(s0(x2, x3)) < x3 } }","not ℝ.from_rat(xb) < ℝ.from_rat(s0(ℝ.from_rat(xb), b)) or not ℝ.from_rat(s0(ℝ.from_rat(xb), b)) < b","not ℝ.from_rat(xb) < b or ℝ.from_rat(s0(ℝ.from_rat(xb), b)) < b","not ℝ.from_rat(xb) < b or ℝ.from_rat(xb) < ℝ.from_rat(s0(ℝ.from_rat(xb), b))","ℝ.from_rat(s0(ℝ.from_rat(xb), b)) < b","ℝ.from_rat(xb) < ℝ.from_rat(s0(ℝ.from_rat(xb), b))","not ℝ.from_rat(xb) < ℝ.from_rat(s0(ℝ.from_rat(xb), b))"]}
{"goal":"qa > xa","proof":["ℝ.from_rat(qa) > ℝ.from_rat(xa) = qa > xa","not ℝ.from_rat(qa) > ℝ.from_rat(xa)","ℝ.from_rat(qa) > ℝ.from_rat(xa) = ℝ.from_rat(xa) < ℝ.from_rat(qa)"]}
{"goal":"qb > xb","proof":["ℝ.from_rat(qb) > ℝ.from_rat(xb) = qb > xb","not ℝ.from_rat(qb) > ℝ.from_rat(xb)","ℝ.from_rat(qb) > ℝ.from_rat(xb) = ℝ.from_rat(xb) < ℝ.from_rat(qb)"]}
{"goal":"qb > ℚ.0","proof":["not xb >= ℚ.0 or not xb < qb or qb > ℚ.0","not xb > ℚ.0 or xb >= ℚ.0","qb > xb = xb < qb","xb < qb","xb >= ℚ.0","not xb >= ℚ.0"]}
{"goal":"qa > ℚ.0","proof":["not xa >= ℚ.0 or not xa < qa or qa > ℚ.0","not xa > ℚ.0 or xa >= ℚ.0","qa > xa = xa < qa","xa < qa","xa >= ℚ.0","not xa >= ℚ.0"]}
{"goal":"a.gt_rat(qa)","proof":["not a > ℝ.from_rat(qa) or a.gt_rat(qa)","not a > ℝ.from_rat(qa)","a > ℝ.from_rat(qa) = ℝ.from_rat(qa) < a"]}
{"goal":"b.gt_rat(qb)","proof":["not b > ℝ.from_rat(qb) or b.gt_rat(qb)","not b > ℝ.from_rat(qb)","b > ℝ.from_rat(qb) = ℝ.from_rat(qb) < b"]}
{"goal":"qa ⋅ qb > xa ⋅ xb","proof":["not xa > ℚ.0 or not xb > ℚ.0 or not xa < qa or not xb < qb or xa ⋅ xb < qa ⋅ qb","qa > xa = xa < qa","qa ⋅ qb > xa ⋅ xb = xa ⋅ xb < qa ⋅ qb","qb > xb = xb < qb","not xa ⋅ xb < qa ⋅ qb","xb < qb","xa < qa","not xa < qa"]}
{"goal":"q > x","proof":[]}
{"goal":"q > ℚ.0","proof":["not x >= ℚ.0 or not x < q or q > ℚ.0","not x > ℚ.0 or x >= ℚ.0","q > x = x < q","x < q","x >= ℚ.0","not x >= ℚ.0"]}
{"goal":"ℝ.new(a.gt_rat).gt_rat(qa)","proof":["ℝ.new(a.gt_rat) = a"]}
{"goal":"ℝ.new(b.gt_rat).gt_rat(qb)","proof":["ℝ.new(b.gt_rat) = b"]}
{"goal":"pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), qa ⋅ qb)","proof":["not qa > ℚ.0 or not qb > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(qa) or not ℝ.new(b.gt_rat).gt_rat(qb) or qa ⋅ qb != qa ⋅ qb or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), qa ⋅ qb)","not qa > ℚ.0 or not qb > ℚ.0 or not ℝ.new(a.gt_rat).gt_rat(qa) or not ℝ.new(b.gt_rat).gt_rat(qb) or pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), qa ⋅ qb)"]}
{"goal":"pos_mul_truncated_gt(a, b, q)","proof":["ℝ.new(a.gt_rat) = a","ℝ.new(b.gt_rat) = b"]}
{"goal":"false","proof":["not pos_mul_truncated_gt(a, b, q) or not q > ℚ.0 or q <= x","q > x != q <= x","ℝ.new(a.gt_rat) = a","ℝ.new(b.gt_rat) = b","pos_mul_truncated_gt(ℝ.new(a.gt_rat), ℝ.new(b.gt_rat), q)","pos_mul_truncated_gt(ℝ.new(a.gt_rat), b, q)","pos_mul_truncated_gt(a, b, q)","not q > x or not q <= x","q <= x","not q <= x"]}
{"goal":"pos_mul_truncated_has_no_greatest","proof":[]}
{"goal":"is_cut_truncated(pos_mul_truncated_gt(a, b))","proof":["not a > 0 or not b > 0 or is_cut_truncated(pos_mul_truncated_gt(a, b))"]}
{"goal":"exists(k0: ℚ) { k0 > ℚ.0 and pos_mul_truncated_gt(a, b, k0) }","proof":["let (s0: ℚ -> Bool -> ℚ, s1: ℚ -> Bool -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not is_cut_truncated(x0) or s0(x0) > ℚ.0 } and forall(x1: ℚ -> Bool) { not is_cut_truncated(x1) or x1(s0(x1)) } and forall(x2: ℚ -> Bool) { not is_cut_truncated(x2) or s1(x2) > ℚ.0 } and forall(x3: ℚ -> Bool) { not is_cut_truncated(x3) or not x3(s1(x3)) } and forall(x4: ℚ, x5: ℚ, x6: ℚ -> Bool) { not x4 > ℚ.0 or not x5 > ℚ.0 or not x6(x4) or is_cut_truncated(x6) or x6(x5) } }","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b))) or not s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or s0(pos_mul_truncated_gt(a, b)) > ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","s0(pos_mul_truncated_gt(a, b)) > ℚ.0","pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))","not pos_mul_truncated_gt(a, b, s0(pos_mul_truncated_gt(a, b)))"]}
{"goal":"pos_mul_gt(a, b, r)","proof":["not a > 0 or not b > 0 or not pos_mul_truncated_gt(a, b, r) or pos_mul_gt(a, b, r)"]}
{"goal":"r > x","proof":["not r > ℚ.0 or not ℚ.0 > x or r > x","not x <= ℚ.0 or x < ℚ.0 or ℚ.0 = x","ℚ.0 > x = x < ℚ.0","not r > ℚ.0 or not ℚ.0 > x","not ℚ.0 > x","not x < ℚ.0","ℚ.0 = x"]}
{"goal":"not is_greatest(pos_mul_gt(a, b), x)","proof":["not r > ℚ.0 or not r <= x or x > ℚ.0","not x > ℚ.0 or not x <= ℚ.0 or ℚ.0 > ℚ.0","not is_greatest(pos_mul_gt(a, b), x) or not pos_mul_gt(a, b, r) or r <= x","not ℚ.0 > ℚ.0 or ℚ.0 != ℚ.0","not pos_mul_gt(a, b, r) or r <= x","r <= x","not ℚ.0 > ℚ.0","x > ℚ.0","not x > ℚ.0"]}
{"goal":"x > ℚ.0","proof":["ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0) = x <= ℚ.0","ℝ.from_rat(x) > ℝ.from_rat(ℚ.0) = x > ℚ.0","not ℝ.from_rat(x) > ℝ.from_rat(ℚ.0)","ℝ.from_rat(x) > ℝ.from_rat(ℚ.0) or ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)","not ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)","ℝ.from_rat(x) <= ℝ.from_rat(ℚ.0)"]}
{"goal":"pos_mul_gt(a, b, x)","proof":["not is_greatest(pos_mul_gt(a, b), x) or pos_mul_gt(a, b, x)"]}
{"goal":"pos_mul_truncated_gt(a, b, x)","proof":["not pos_mul_gt(a, b, x) or x <= ℚ.0 or pos_mul_truncated_gt(a, b, x)"]}
{"goal":"pos_mul_gt(a, b, y)","proof":["not a > 0 or not b > 0 or not pos_mul_truncated_gt(a, b, y) or pos_mul_gt(a, b, y)"]}
{"goal":"y <= x","proof":["not is_greatest(pos_mul_gt(a, b), x) or not pos_mul_gt(a, b, y) or y <= x","not is_greatest(pos_mul_gt(a, b), x) or not pos_mul_gt(a, b, y)"]}
{"goal":"has_greatest_truncated(pos_mul_truncated_gt(a, b))","proof":["let (s0: ℚ -> Bool -> ℚ, s1: (ℚ -> Bool, ℚ) -> ℚ) satisfy { forall(x0: ℚ -> Bool) { not has_greatest_truncated(x0) or s0(x0) > ℚ.0 } and forall(x1: ℚ -> Bool) { not has_greatest_truncated(x1) or x1(s0(x1)) } and forall(x2: ℚ, x3: ℚ -> Bool) { not x2 > ℚ.0 or not has_greatest_truncated(x3) or not x3(x2) or x2 <= s0(x3) } and forall(x4: ℚ, x5: ℚ -> Bool) { not x4 > ℚ.0 or not x5(x4) or s1(x5, x4) > ℚ.0 or has_greatest_truncated(x5) } and forall(x6: ℚ, x7: ℚ -> Bool) { not x6 > ℚ.0 or not x7(x6) or has_greatest_truncated(x7) or x7(s1(x7, x6)) } and forall(x8: ℚ -> Bool, x9: ℚ) { not s1(x8, x9) <= x9 or not x9 > ℚ.0 or not x8(x9) or has_greatest_truncated(x8) } }","not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b), x)) or not s1(pos_mul_truncated_gt(a, b), x) > ℚ.0 or s1(pos_mul_truncated_gt(a, b), x) <= x","not s1(pos_mul_truncated_gt(a, b), x) <= x or not x > ℚ.0 or not pos_mul_truncated_gt(a, b, x) or has_greatest_truncated(pos_mul_truncated_gt(a, b))","not x > ℚ.0 or not pos_mul_truncated_gt(a, b, x) or s1(pos_mul_truncated_gt(a, b), x) > ℚ.0 or has_greatest_truncated(pos_mul_truncated_gt(a, b))","not x > ℚ.0 or not pos_mul_truncated_gt(a, b, x) or has_greatest_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b), x))","not pos_mul_truncated_gt(a, b, x) or not x > ℚ.0 or s1(pos_mul_truncated_gt(a, b), x) > ℚ.0","s1(pos_mul_truncated_gt(a, b), x) > ℚ.0","not s1(pos_mul_truncated_gt(a, b), x) <= x or not pos_mul_truncated_gt(a, b, x) or not x > ℚ.0","not s1(pos_mul_truncated_gt(a, b), x) <= x","not pos_mul_truncated_gt(a, b, x) or not x > ℚ.0 or pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b), x))","not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b), x))","pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b), x))"]}
{"goal":"false","proof":["not has_greatest_truncated(pos_mul_truncated_gt(a, b)) or not a > 0 or not b > 0"]}
{"goal":"not is_greatest(pos_mul_gt(a, b), x)","proof":[]}
{"goal":"not has_greatest(pos_mul_gt(a, b))","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b)))","not has_greatest(pos_mul_gt(a, b)) or is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b)))"]}
{"goal":"pos_mul_has_no_greatest","proof":["let s0: ℚ -> Bool -> ℚ satisfy { forall(x0: ℚ -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: ℚ -> Bool, x2: ℚ) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b))) or s0(pos_mul_gt(a, b)) <= ℚ.0","let (s1: ℚ -> Bool -> ℚ, s2: ℚ -> Bool -> ℚ) satisfy { forall(x3: ℚ -> Bool) { not is_cut_truncated(x3) or s1(x3) > ℚ.0 } and forall(x4: ℚ -> Bool) { not is_cut_truncated(x4) or x4(s1(x4)) } and forall(x5: ℚ -> Bool) { not is_cut_truncated(x5) or s2(x5) > ℚ.0 } and forall(x6: ℚ -> Bool) { not is_cut_truncated(x6) or not x6(s2(x6)) } and forall(x7: ℚ, x8: ℚ, x9: ℚ -> Bool) { not x7 > ℚ.0 or not x8 > ℚ.0 or not x9(x7) or is_cut_truncated(x9) or x9(x8) } }","not a > 0 or not b > 0 or not pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b))) or pos_mul_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","not s1(pos_mul_truncated_gt(a, b)) > ℚ.0 or not s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b)) or s0(pos_mul_gt(a, b)) > ℚ.0","not is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b))) or not pos_mul_gt(a, b, s1(pos_mul_truncated_gt(a, b))) or s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b))","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or s1(pos_mul_truncated_gt(a, b)) > ℚ.0","not has_greatest(pos_mul_gt(a, b)) or is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b)))","s0(pos_mul_gt(a, b)) > ℚ.0 != s0(pos_mul_gt(a, b)) <= ℚ.0","not is_cut_truncated(pos_mul_truncated_gt(a, b)) or pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","is_greatest(pos_mul_gt(a, b), s0(pos_mul_gt(a, b)))","not s0(pos_mul_gt(a, b)) > ℚ.0 or not s0(pos_mul_gt(a, b)) <= ℚ.0","s1(pos_mul_truncated_gt(a, b)) > ℚ.0","pos_mul_truncated_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","s0(pos_mul_gt(a, b)) <= ℚ.0","not pos_mul_gt(a, b, s1(pos_mul_truncated_gt(a, b))) or s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b))","pos_mul_gt(a, b, s1(pos_mul_truncated_gt(a, b)))","not s0(pos_mul_gt(a, b)) > ℚ.0","not s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b)) or s0(pos_mul_gt(a, b)) > ℚ.0","s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b))","not s1(pos_mul_truncated_gt(a, b)) <= s0(pos_mul_gt(a, b))"]}
{"goal":"is_lower_interval(pos_mul_gt(a, b))","proof":["not a > 0 or not b > 0 or is_lower_interval(pos_mul_gt(a, b))"]}
{"goal":"is_cut(pos_mul_gt(a, b))","proof":["let (s0: (ℝ, ℝ) -> ℚ, s1: (ℝ, ℝ) -> ℚ) satisfy { forall(x0: ℝ, x1: ℝ) { not x0 > 0 or not x1 > 0 or pos_mul_gt(x0, x1, s0(x0, x1)) } and forall(x2: ℝ, x3: ℝ) { not x2 > 0 or not x3 > 0 or not pos_mul_gt(x2, x3, s1(x2, x3)) } }","not a > 0 or not b > 0 or not pos_mul_gt(a, b, s1(a, b))","not a > 0 or not b > 0 or pos_mul_gt(a, b, s0(a, b))","let s2: ℚ satisfy { true }","not pos_mul_gt(a, b, s0(a, b)) or is_cut(pos_mul_gt(a, b)) or pos_mul_gt(a, b, s2)","not pos_mul_gt(a, b, s2) or is_cut(pos_mul_gt(a, b)) or pos_mul_gt(a, b, s1(a, b))","not pos_mul_gt(a, b, s0(a, b)) or pos_mul_gt(a, b, s2)","not pos_mul_gt(a, b, s2) or pos_mul_gt(a, b, s1(a, b))","not a > 0 or pos_mul_gt(a, b, s0(a, b))","pos_mul_gt(a, b, s0(a, b))","not pos_mul_gt(a, b, s1(a, b)) or not a > 0","not pos_mul_gt(a, b, s1(a, b))","pos_mul_gt(a, b, s2)","not pos_mul_gt(a, b, s2)"]}
{"goal":"not has_greatest(pos_mul_gt(a, b))","proof":["not has_greatest(pos_mul_gt(a, b)) or not a > 0 or not b > 0"]}
{"goal":"pos_mul_is_dedekind_cut","proof":["not is_cut(pos_mul_gt(a, b)) or not is_lower_interval(pos_mul_gt(a, b)) or is_dedekind_cut(pos_mul_gt(a, b)) or has_greatest(pos_mul_gt(a, b))"]}
