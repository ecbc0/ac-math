{"goal":"ℕ.1 <= n + ℕ.1","proof":["n + ℕ.1 >= ℕ.1 = ℕ.1 <= n + ℕ.1","not n + ℕ.1 >= ℕ.1","n.suc >= ℕ.1 or n.suc = ℕ.0","n + ℕ.1 = n.suc","not n.suc >= ℕ.1","n.suc != ℕ.0"]}
{"goal":"ℤ.1 <= ℤ.from_nat(n + ℕ.1)","proof":["ℤ.from_nat(ℕ.1) <= ℤ.from_nat(n + ℕ.1) = ℕ.1 <= n + ℕ.1"]}
{"goal":"1 <= ℚ.from_nat(n + ℕ.1)","proof":["not ℤ.1 <= ℤ.from_nat(n + ℕ.1) or ℚ.from_int(ℤ.1) <= ℚ.from_int(ℤ.from_nat(n + ℕ.1))","ℚ.from_int(ℤ.from_nat(n + ℕ.1)) = ℚ.from_nat(n + ℕ.1)","not ℚ.from_int(ℤ.1) <= ℚ.from_nat(n + ℕ.1)","ℚ.from_int(ℤ.1) <= ℚ.from_int(ℤ.from_nat(n + ℕ.1))","not ℚ.from_int(ℤ.1) <= ℚ.from_int(ℤ.from_nat(n + ℕ.1))"]}
{"goal":"0 < ℚ.from_nat(n + ℕ.1)","proof":["not 1 > 0 or not 1 <= ℚ.from_nat(n + ℕ.1) or ℚ.from_nat(n + ℕ.1) > 0","ℚ.from_nat(n + ℕ.1) > 0 = 0 < ℚ.from_nat(n + ℕ.1)","not ℚ.from_nat(n + ℕ.1) > 0","not 1 > 0"]}
{"goal":"iop_pos","proof":["1 / ℚ.from_nat(n + ℕ.1) = iop(n)","1 / ℚ.from_nat(n + ℕ.1) > 0 = ℚ.from_nat(n + ℕ.1) > 0","ℚ.from_nat(n + ℕ.1) > 0 = 0 < ℚ.from_nat(n + ℕ.1)"]}
{"goal":"pos_ne_zero","proof":["0 > 0","0 > a","not a > 0 or not a < 0","0 > a = a < 0","not a < 0","a < 0"]}
{"goal":"iop_ne_zero","proof":["not iop(n) > 0 or iop(n) != 0","not iop(n) > 0","iop(n) > 0"]}
{"goal":"ℚ.from_nat(n + ℕ.1) > 0","proof":["1 / ℚ.from_nat(n + ℕ.1) = iop(n)","1 / ℚ.from_nat(n + ℕ.1) > 0 = ℚ.from_nat(n + ℕ.1) > 0","iop(n) > 0","not 1 / ℚ.from_nat(n + ℕ.1) > 0"]}
{"goal":"iop_recip","proof":["1 / ℚ.from_nat(n + ℕ.1) = iop(n)","1 / (1 / ℚ.from_nat(n + ℕ.1)) = ℚ.from_nat(n + ℕ.1) or ℚ.from_nat(n + ℕ.1) = 0","not ℚ.from_nat(n + ℕ.1) > 0 or ℚ.from_nat(n + ℕ.1) != 0","ℚ.from_nat(n + ℕ.1) != 0","1 / (1 / ℚ.from_nat(n + ℕ.1)) != ℚ.from_nat(n + ℕ.1)","1 / (1 / ℚ.from_nat(n + ℕ.1)) = ℚ.from_nat(n + ℕ.1)"]}
{"goal":"iop(n) * 1 / iop(n) = 1","proof":["iop(n) * 1 / iop(n) = 1 or iop(n) = 0","iop(n) = 0","not iop(n) > 0 or iop(n) != 0","iop(n) > 0"]}
{"goal":"iop(n) * ℚ.from_nat(n + ℕ.1) = 1","proof":["1 / iop(n) = ℚ.from_nat(n + ℕ.1)"]}
{"goal":"iop(n) * 1 + iop(n) * ℚ.from_nat(n) = 1","proof":["iop(n) * 1 + iop(n) * ℚ.from_nat(n) = iop(n) * (1 + ℚ.from_nat(n))","ℚ.from_nat(n) + ℚ.from_nat(ℕ.1) = ℚ.from_nat(n + ℕ.1)","1 / iop(n) = ℚ.from_nat(n + ℕ.1)","iop(n) * (1 + ℚ.from_nat(n)) = (1 + ℚ.from_nat(n)) * iop(n)","iop(n) * 1 / iop(n) = 1 / iop(n) * iop(n)","ℚ.from_nat(n) + 1 = 1 + ℚ.from_nat(n)"]}
{"goal":"iop(n) + iop(n) * ℚ.from_nat(n) = 1","proof":["iop(n) * 1 = 1 * iop(n)","iop(n) * ℚ.from_nat(n) = ℚ.from_nat(n) * iop(n)","iop(n) * ℚ.from_nat(n) + iop(n) * 1 = iop(n) * 1 + iop(n) * ℚ.from_nat(n)","iop(n) + ℚ.from_nat(n) * iop(n) = ℚ.from_nat(n) * iop(n) + iop(n)","1 * iop(n) = iop(n)"]}
{"goal":"iop(n) * ℚ.from_nat(n) = 1 - iop(n)","proof":["iop(n) * ℚ.from_nat(n) + iop(n) - iop(n) = iop(n) * ℚ.from_nat(n)","iop(n) + iop(n) * ℚ.from_nat(n) = iop(n) * ℚ.from_nat(n) + iop(n)","iop(n) + iop(n) * ℚ.from_nat(n) - iop(n) != iop(n) * ℚ.from_nat(n)"]}
{"goal":"iop_mul_lt_one","proof":["not iop(n) > 0 or 1 > 1 - iop(n)","1 > iop(n) * ℚ.from_nat(n) = iop(n) * ℚ.from_nat(n) < 1","iop(n) > 0","not 1 > iop(n) * ℚ.from_nat(n)","not 1 > 1 - iop(n)"]}
{"goal":"a.num > ℤ.0","proof":["a > 0 = 0 < a","a.num > ℤ.0 = ℤ.0 < a.num","0 < a = a.is_positive","a.num.is_positive = a.is_positive","ℤ.0 < a.num = a.num.is_positive"]}
{"goal":"a.denom > ℤ.0","proof":["rat_base.is_reduced(-a.num, a.denom)","not rat_base.is_reduced(-a.num, a.denom) or a.denom > ℤ.0","not rat_base.is_reduced(-a.num, a.denom)"]}
{"goal":"a.denom >= ℤ.1","proof":["not a.denom * ℤ.1 > ℤ.0 or not ℤ.1.divides(a.denom * ℤ.1) or ℤ.1 <= a.denom * ℤ.1","a.denom * ℤ.1 != a.denom * ℤ.1 or ℤ.1.divides(a.denom * ℤ.1)","a.denom * ℤ.1 >= ℤ.1 = ℤ.1 <= a.denom * ℤ.1","a.denom * ℤ.1 = a.denom","not a.denom * ℤ.1 >= ℤ.1","not ℤ.1 <= a.denom * ℤ.1","ℤ.1.divides(a.denom * ℤ.1)","a.denom * ℤ.1 > ℤ.0","not a.denom * ℤ.1 > ℤ.0"]}
{"goal":"a = ℚ.from_int(a.num) / ℚ.from_int(a.denom)","proof":["ℚ.from_int(a.num) / ℚ.from_int(a.denom) = a"]}
{"goal":"1 <= ℚ.from_int(a.denom)","proof":["not ℤ.1 <= a.denom or ℚ.from_int(ℤ.1) <= ℚ.from_int(a.denom)","a.denom >= ℤ.1 = ℤ.1 <= a.denom","ℤ.1 <= a.denom","ℚ.from_int(ℤ.1) <= ℚ.from_int(a.denom)","not ℚ.from_int(ℤ.1) <= ℚ.from_int(a.denom)"]}
{"goal":"a <= ℚ.from_int(a.denom) * a","proof":["not a > 0 or not 1 <= ℚ.from_int(a.denom) or 1 * a <= ℚ.from_int(a.denom) * a","1 * a = a","not 1 * a <= ℚ.from_int(a.denom) * a"]}
{"goal":"pos_lte_num","proof":["a * ℚ.from_int(a.denom) = ℚ.from_int(a.num)","a * ℚ.from_int(a.denom) = ℚ.from_int(a.denom) * a"]}
{"goal":"lt_some_int","proof":["not a < ℚ.from_int(rat_base.floor(a) + ℤ.1)","a < ℚ.from_int(rat_base.floor(a) + ℤ.1)"]}
{"goal":"exists(k0: ℤ) { a < ℚ.from_int(k0) }","proof":["not a < ℚ.from_int(rat_base.floor(a) + ℤ.1)","a < ℚ.from_int(rat_base.floor(a) + ℤ.1)"]}
{"goal":"i <= ℤ.from_nat(n)","proof":["not i <= ℤ.from_nat(lib(int.int_base).abs(i))","i <= ℤ.from_nat(lib(int.int_base).abs(i))"]}
{"goal":"ℚ.from_int(i) <= ℚ.from_nat(n)","proof":["not i <= ℤ.from_nat(n) or ℚ.from_int(i) <= ℚ.from_int(ℤ.from_nat(n))","ℚ.from_int(ℤ.from_nat(n)) = ℚ.from_nat(n)","ℚ.from_int(i) <= ℚ.from_int(ℤ.from_nat(n))","not ℚ.from_int(i) <= ℚ.from_int(ℤ.from_nat(n))"]}
{"goal":"lt_some_nat","proof":["not a < ℚ.from_nat(n)","not a < ℚ.from_int(i) or not ℚ.from_int(i) < ℚ.from_nat(n) or a < ℚ.from_nat(n)","not ℚ.from_int(i) <= ℚ.from_nat(n) or ℚ.from_int(i) < ℚ.from_nat(n) or ℚ.from_nat(n) = ℚ.from_int(i)","not ℚ.from_int(i) < ℚ.from_nat(n) or not a < ℚ.from_int(i)","not ℚ.from_int(i) < ℚ.from_nat(n)","ℚ.from_nat(n) = ℚ.from_int(i)"]}
{"goal":"1 / ε > 0","proof":["1 / ε > 0 = ε > 0"]}
{"goal":"exists(k0: ℕ) { 1 / ε < ℚ.from_nat(k0) }","proof":["let s0: ℚ -> ℕ satisfy { forall(x0: ℚ) { x0 < ℚ.from_nat(s0(x0)) } }","not 1 / ε < ℚ.from_nat(s0(1 / ε))","1 / ε < ℚ.from_nat(s0(1 / ε))"]}
{"goal":"ℚ.from_nat(n) <= ℚ.from_nat(i)","proof":["not n < i or ℚ.from_nat(n) < ℚ.from_nat(i)","not n <= i or n < i or i = n","not ℚ.from_nat(n) < ℚ.from_nat(i) or ℚ.from_nat(n) <= ℚ.from_nat(i)","not ℚ.from_nat(n) < ℚ.from_nat(i)","ℚ.from_nat(i) != ℚ.from_nat(n) or ℚ.from_nat(n) <= ℚ.from_nat(i)","ℚ.from_nat(i) != ℚ.from_nat(n)","i != n","not n < i","n < i"]}
{"goal":"1 / ε < ℚ.from_nat(i)","proof":["not 1 / ε < ℚ.from_nat(n) or not ℚ.from_nat(n) < ℚ.from_nat(i) or 1 / ε < ℚ.from_nat(i)","not ℚ.from_nat(n) <= ℚ.from_nat(i) or ℚ.from_nat(n) < ℚ.from_nat(i) or ℚ.from_nat(i) = ℚ.from_nat(n)","not 1 / ε < ℚ.from_nat(n) or not ℚ.from_nat(n) < ℚ.from_nat(i)","not ℚ.from_nat(n) < ℚ.from_nat(i)","ℚ.from_nat(i) = ℚ.from_nat(n)"]}
{"goal":"1 / ε * ε < ℚ.from_nat(i) * ε","proof":["not ε > 0 or not 1 / ε < ℚ.from_nat(i) or 1 / ε * ε < ℚ.from_nat(i) * ε"]}
{"goal":"1 < ℚ.from_nat(i) * ε","proof":["not 1 <= 1 / ε * ε or not 1 / ε * ε < ℚ.from_nat(i) * ε or 1 < ℚ.from_nat(i) * ε","1 / ε * ε = 1 or 0 = ε","not ε > 0 or 0 != ε","0 != ε","1 / ε * ε != 1 or 1 <= 1 / ε * ε","not 1 / ε * ε < ℚ.from_nat(i) * ε or not 1 <= 1 / ε * ε","not 1 <= 1 / ε * ε","1 / ε * ε = 1","1 / ε * ε != 1"]}
{"goal":"ℚ.from_nat(i) * iop(i) < 1","proof":["iop(i) * ℚ.from_nat(i) < 1","iop(i) * ℚ.from_nat(i) = ℚ.from_nat(i) * iop(i)"]}
{"goal":"ℚ.from_nat(i) * iop(i) < ℚ.from_nat(i) * ε","proof":["not ℚ.from_nat(i) * iop(i) < 1 or not 1 < ℚ.from_nat(i) * ε or ℚ.from_nat(i) * iop(i) < ℚ.from_nat(i) * ε","not ℚ.from_nat(i) * iop(i) < 1 or not 1 < ℚ.from_nat(i) * ε"]}
{"goal":"iop(i) < ε","proof":["not ℚ.from_nat(i) * iop(i) < ℚ.from_nat(i) * ε or not ℚ.from_nat(i) > 0 or iop(i) < ε","not ℚ.from_nat(i) > 0","not 1 / ε > 0 or not 1 / ε <= ℚ.from_nat(i) or ℚ.from_nat(i) > 0","not 1 / ε < ℚ.from_nat(i) or 1 / ε <= ℚ.from_nat(i)","1 / ε <= ℚ.from_nat(i)"]}
{"goal":"iop_gets_lt","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { x0 <= s0(x0) } and forall(x1: ℕ) { not iop(s0(x1)) < ε } }","not iop(s0(n)) < ε","n <= s0(n)","not n <= s0(n) or iop(s0(n)) < ε"]}
{"goal":"three_is_positive","proof":["3 > 0 = 0 < 3","not 0 < 3","0 < 3 = 3.is_positive","not 3.is_positive","3.num.is_positive = 3.is_positive","not 3.num.is_positive","3.num.pos_part = ℕ.0 or 3.num.is_positive","ℚ.from_int(ℤ.3).num = ℤ.3","ℤ.from_nat(ℕ.4 - ℕ.1).pos_part = ℕ.4 - ℕ.1","3.num.pos_part = ℕ.0"]}
{"goal":"ℤ.3 = ℤ.2 + ℤ.1","proof":["ℤ.from_nat(ℕ.2) + ℤ.from_nat(ℕ.1) = ℤ.from_nat(ℕ.2 + ℕ.1)","ℕ.2 + ℕ.1 = ℕ.1 + ℕ.2"]}
{"goal":"3 = 2 + 1","proof":["ℚ.from_int(ℤ.2) + ℚ.from_int(ℤ.1) = ℚ.from_int(ℤ.2 + ℤ.1)"]}
{"goal":"3 * x = (2 + 1) * x","proof":["2 + 1 != 3"]}
{"goal":"3 * x = 2 * x + 1 * x","proof":["2 * x + 1 * x = (2 + 1) * x"]}
{"goal":"times_three","proof":["x + (x + x) = x + x + x","2 * x = x + x","2 * x + 1 * x = 1 * x + 2 * x","1 * x = x"]}
{"goal":"x / 3 + x / 3 + x / 3 = (x + x + x) / 3","proof":["3 * x * 3.reciprocal = 3 * (x * 3.reciprocal)","x + x + x = 3 * x","x / 3 + x / 3 + x / 3 = 3 * x / 3","x / 3 + x / 3 + x / 3 != (3 * x) / 3","3 * x * 3.reciprocal = (3 * x) / 3","x * 3.reciprocal = x / 3","(3 * x) / 3 != 3 * x / 3","3 * (x * 3.reciprocal) != (3 * x) / 3"]}
{"goal":"x / 3 + x / 3 + x / 3 = (3 * x) / 3","proof":["(x + x + x) / 3 != (3 * x) / 3","x + x + x != 3 * x","x + x + x = 3 * x"]}
{"goal":"(x * 3) / 3 = x","proof":["(x * 3) / 3 = x or 3 = 0","3 = 0","not 3 > 0 or 3 != 0","not 3 > 0"]}
{"goal":"three_thirds","proof":["(3 * x) / 3 != x","x * 3 = 3 * x"]}
{"goal":"1 > 0","proof":[]}
{"goal":"a * 1 = 0","proof":["a * 1 = 1 * a","1 * a != 0","1 * 0 != 0","1 * 0 = 0"]}
{"goal":"a * 1 < b","proof":["not 0 < b","b > 0 = 0 < b"]}
{"goal":"1 > 0 and a * 1 < b","proof":["not a * 1 < b"]}
{"goal":"a > 0","proof":["a > 0 or a < 0 or 0 = a","a < 0","not 0 <= a or 0 < a or 0 = a","not 0 < a or not a < 0","0 < a","not 0 < a"]}
{"goal":"exists(k0: ℚ) { k0 > 0 and k0 < b }","proof":["let s0: ℕ satisfy { true }","let s1: (ℕ, ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ, x2: ℕ) { x0 <= s1(x0, x1, x2) } and forall(x3: ℕ, x4: ℕ, x5: ℕ) { x3 <= s1(x4, x3, x5) } and forall(x6: ℕ, x7: ℕ, x8: ℕ) { x6 <= s1(x7, x8, x6) } }","let s2: ℚ -> ℕ satisfy { forall(x9: ℚ, x10: ℕ) { not x9 > 0 or not s2(x9) <= x10 or iop(x10) < x9 } }","not iop(s1(s0, s0, s2(b))) > 0 or not iop(s1(s0, s0, s2(b))) < b","not b > 0 or not s2(b) <= s1(s0, s0, s2(b)) or iop(s1(s0, s0, s2(b))) < b","s2(b) <= s1(s0, s0, s2(b))","iop(s1(s0, s0, s2(b))) > 0","not iop(s1(s0, s0, s2(b))) < b","not s2(b) <= s1(s0, s0, s2(b))"]}
{"goal":"ε > 0","proof":["not a * ε > 0 or not a > 0 or ε > 0","(0 + c) / a * a = 0 + c or 0 = a","(a * ε - 0).is_positive = 0 < a * ε","a * ε > 0 = 0 < a * ε","c > 0 = 0 < c","ε * a = a * ε","0 < c = c.is_positive","a * ε - 0 = a * ε","0 + c = c","not a * ε > 0 or not a > 0","not a * ε > 0","(0 + c) / a * a = 0 + c"]}
{"goal":"a * ε = c","proof":["a * c / a = c or 0 = a","a * c / a != c"]}
{"goal":"a * ε < b","proof":[]}
{"goal":"ε > 0 and a * ε < b","proof":["not a * ε < b"]}
{"goal":"some_mul_lt","proof":["let s0: ℚ satisfy { s0 > 0 or 0 = a and (a * s0 < b or 0 = a) }","not a * 1 < b or not 1 > 0","not a * s0 < b or not s0 > 0","not a * 1 < b","0 != a","s0 > 0","a * s0 < b","not a * s0 < b"]}
{"goal":"not r < 0","proof":["let s0: ℚ satisfy { true }","not r < 0 or s0 + r < s0","s0 + r < s0","not r > 0 or s0 < s0 + r","not s0 < s0 + r or not s0 + r < s0","s0 < s0 + r","not s0 < s0 + r"]}
{"goal":"(a - b).abs * r = (a * r - b * r).abs","proof":["r * a - r * b = r * (a - b)","r.abs * (a - b).abs = (r * (a - b)).abs","r < 0 or r.abs = r","a * r = r * a","b * r = r * b","r * (a - b).abs = (a - b).abs * r","r.abs = r"]}
{"goal":"close_mul_pos","proof":["not (a - b).abs * r < ε * r","not r > 0 or not (a - b).abs < ε or (a - b).abs * r < ε * r"]}
{"goal":"(-a - -b).abs = (b - a).abs","proof":["-a - -b != b - a","0 - a - -b = 0 - (a + -b)","-(a - b) = b - a","a + -b = a - b","0 - (a - b) = -(a - b)","0 - a = -a"]}
{"goal":"(-a - -b).abs < ε","proof":["not (b - a).abs < ε","(b - a).abs < ε = (a - b).abs < ε"]}
{"goal":"close_neg","proof":[]}
{"goal":"a * c = 0","proof":["a * 0 != 0","a * 0 = 0"]}
{"goal":"b * c = 0","proof":["b * 0 != 0","b * 0 = 0"]}
{"goal":"a * c <= b * c","proof":[]}
{"goal":"c > 0","proof":["c > 0 or c < 0 or 0 = c","c < 0","not 0 <= c or 0 < c or 0 = c","not 0 < c or not c < 0","0 < c","not 0 < c"]}
{"goal":"a * c <= b * c","proof":["not c > 0 or not a <= b or a * c <= b * c"]}
{"goal":"lte_mul_nonneg","proof":[]}
{"goal":"exists(k0: ℚ) { b < k0 }","proof":["let s0: ℕ satisfy { true }","not b < b + iop(s0)","not iop(s0) > 0 or b < b + iop(s0)","not iop(s0) > 0","iop(s0) > 0"]}
{"goal":"a < c and b < c","proof":["not a < c","not a < b or not b < c or a < c","not b < c or not a < b"]}
{"goal":"b <= a","proof":["a > b or a < b or b = a","a > b = b < a","not b < a or b <= a","not b < a","b != a or b <= a","b != a","not a > b","a > b"]}
{"goal":"exists(k0: ℚ) { a < k0 }","proof":["let s0: ℕ satisfy { true }","not a < a + iop(s0)","not iop(s0) > 0 or a < a + iop(s0)","not iop(s0) > 0","iop(s0) > 0"]}
{"goal":"a < c and b < c","proof":["not b < c","not b < a or not a < c or b < c","not b <= a or b < a or b = a","not a < c or not b < a","not b < a","b = a"]}
{"goal":"bounding_both","proof":["let s0: ℚ satisfy { a < s0 and b < s0 }","not b < s0 or not a < s0","not a < s0"]}
{"goal":"exists(k0: ℚ) { a(ℕ.0).abs < k0 }","proof":["let s0: ℕ satisfy { true }","not a(ℕ.0).abs < a(ℕ.0).abs + iop(s0)","not iop(s0) > 0 or a(ℕ.0).abs < a(ℕ.0).abs + iop(s0)","not iop(s0) > 0","iop(s0) > 0"]}
{"goal":"i <= ℕ.0 implies a(i).abs < zero_bound","proof":["not i <= ℕ.0 or i = ℕ.0","i = ℕ.0"]}
{"goal":"finite_seq_abs_bounded(a, ℕ.0)","proof":["let (s0: (ℕ -> ℚ, ℕ) -> ℚ, s1: (ℕ -> ℚ, ℕ, ℚ) -> ℕ) satisfy { forall(x0: ℕ, x1: ℕ, x2: ℕ -> ℚ) { not x0 <= x1 or not finite_seq_abs_bounded(x2, x1) or x2(x0).abs < s0(x2, x1) } and forall(x3: ℕ -> ℚ, x4: ℕ, x5: ℚ) { s1(x3, x4, x5) <= x4 or finite_seq_abs_bounded(x3, x4) } and forall(x6: ℕ -> ℚ, x7: ℕ, x8: ℚ) { not x6(s1(x6, x7, x8)).abs < x8 or finite_seq_abs_bounded(x6, x7) } }","not s1(a, ℕ.0, zero_bound) <= ℕ.0 or a(s1(a, ℕ.0, zero_bound)).abs < zero_bound","s1(a, ℕ.0, zero_bound) <= ℕ.0 or finite_seq_abs_bounded(a, ℕ.0)","not a(s1(a, ℕ.0, zero_bound)).abs < zero_bound or finite_seq_abs_bounded(a, ℕ.0)","s1(a, ℕ.0, zero_bound) <= ℕ.0","not a(s1(a, ℕ.0, zero_bound)).abs < zero_bound"]}
{"goal":"f(ℕ.0)","proof":["finite_seq_abs_bounded(a, ℕ.0) = f(ℕ.0)"]}
{"goal":"exists(k0: ℚ) { forall(x0: ℕ) { x0 <= k implies a(x0).abs < k0 } }","proof":["let (s1: (ℕ -> ℚ, ℕ) -> ℚ, s2: (ℕ -> ℚ, ℕ, ℚ) -> ℕ) satisfy { forall(x2: ℕ, x3: ℕ, x4: ℕ -> ℚ) { not x2 <= x3 or not finite_seq_abs_bounded(x4, x3) or x4(x2).abs < s1(x4, x3) } and forall(x5: ℕ -> ℚ, x6: ℕ, x7: ℚ) { s2(x5, x6, x7) <= x6 or finite_seq_abs_bounded(x5, x6) } and forall(x8: ℕ -> ℚ, x9: ℕ, x10: ℚ) { not x8(s2(x8, x9, x10)).abs < x10 or finite_seq_abs_bounded(x8, x9) } }","let s0: ℚ -> ℕ satisfy { forall(x0: ℚ) { s0(x0) <= k } and forall(x1: ℚ) { not a(s0(x1)).abs < x1 } }","not a(s0(s1(a, k))).abs < s1(a, k)","s0(s1(a, k)) <= k","finite_seq_abs_bounded(a, k) = f(k)","not s0(s1(a, k)) <= k or not finite_seq_abs_bounded(a, k) or a(s0(s1(a, k))).abs < s1(a, k)","finite_seq_abs_bounded(a, k)","not s0(s1(a, k)) <= k or not finite_seq_abs_bounded(a, k)"]}
{"goal":"exists(k0: ℚ) { a(k.suc).abs < k0 }","proof":["let s0: ℕ satisfy { true }","not a(k.suc).abs < a(k.suc).abs + iop(s0)","not iop(s0) > 0 or a(k.suc).abs < a(k.suc).abs + iop(s0)","not iop(s0) > 0","iop(s0) > 0"]}
{"goal":"exists(k0: ℚ) { base_bound < k0 and extra_bound < k0 }","proof":["let s0: (ℚ, ℚ) -> ℚ satisfy { forall(x0: ℚ, x1: ℚ) { x0 < s0(x0, x1) } and forall(x2: ℚ, x3: ℚ) { x2 < s0(x3, x2) } }","not extra_bound < s0(base_bound, extra_bound) or not base_bound < s0(base_bound, extra_bound)","extra_bound < s0(base_bound, extra_bound)","not base_bound < s0(base_bound, extra_bound)","base_bound < s0(base_bound, extra_bound)"]}
{"goal":"a(i).abs < bound","proof":["not i <= k or a(i).abs < base_bound","not a(i).abs < base_bound or not base_bound < bound or a(i).abs < bound","not a(i).abs < base_bound or not base_bound < bound","a(i).abs < base_bound","not a(i).abs < base_bound"]}
{"goal":"i = k.suc","proof":["i < k + ℕ.1 = i <= k","not i <= k.suc or i < k.suc or k.suc = i","i < k.suc","k + ℕ.1 = ℕ.1 + k","lib(int.int_base).abs(-ℤ.from_nat(k)) = k","ℕ.1 + lib(int.int_base).abs(-ℤ.from_nat(k)) = lib(int.int_base).abs(-ℤ.from_nat(k)).suc"]}
{"goal":"a(i).abs < extra_bound","proof":["not a(k.suc).abs < extra_bound"]}
{"goal":"a(i).abs < bound","proof":["not a(i).abs < extra_bound or not extra_bound < bound or a(i).abs < bound","not a(i).abs < extra_bound or not extra_bound < bound"]}
{"goal":"finite_seq_abs_bounded(a, k.suc)","proof":["let (s0: (ℕ -> ℚ, ℕ) -> ℚ, s1: (ℕ -> ℚ, ℕ, ℚ) -> ℕ) satisfy { forall(x0: ℕ, x1: ℕ, x2: ℕ -> ℚ) { not x0 <= x1 or not finite_seq_abs_bounded(x2, x1) or x2(x0).abs < s0(x2, x1) } and forall(x3: ℕ -> ℚ, x4: ℕ, x5: ℚ) { s1(x3, x4, x5) <= x4 or finite_seq_abs_bounded(x3, x4) } and forall(x6: ℕ -> ℚ, x7: ℕ, x8: ℚ) { not x6(s1(x6, x7, x8)).abs < x8 or finite_seq_abs_bounded(x6, x7) } }","not s1(a, k.suc, bound) <= k.suc or a(s1(a, k.suc, bound)).abs < bound","s1(a, k.suc, bound) <= k.suc or finite_seq_abs_bounded(a, k.suc)","not a(s1(a, k.suc, bound)).abs < bound or finite_seq_abs_bounded(a, k.suc)","s1(a, k.suc, bound) <= k.suc","not a(s1(a, k.suc, bound)).abs < bound"]}
{"goal":"f(k.suc)","proof":["finite_seq_abs_bounded(a, k.suc) = f(k.suc)"]}
{"goal":"finite_seq_abs_bounded","proof":["let (s1: (ℕ -> ℚ, ℕ) -> ℚ, s2: (ℕ -> ℚ, ℕ, ℚ) -> ℕ) satisfy { forall(x2: ℕ, x3: ℕ, x4: ℕ -> ℚ) { not x2 <= x3 or not finite_seq_abs_bounded(x4, x3) or x4(x2).abs < s1(x4, x3) } and forall(x5: ℕ -> ℚ, x6: ℕ, x7: ℚ) { s2(x5, x6, x7) <= x6 or finite_seq_abs_bounded(x5, x6) } and forall(x8: ℕ -> ℚ, x9: ℕ, x10: ℚ) { not x8(s2(x8, x9, x10)).abs < x10 or finite_seq_abs_bounded(x8, x9) } }","let s0: ℚ -> ℕ satisfy { forall(x0: ℚ) { s0(x0) <= n } and forall(x1: ℚ) { not a(s0(x1)).abs < x1 } }","not a(s0(s1(a, n))).abs < s1(a, n)","s0(s1(a, n)) <= n","let s3: ℕ -> Bool -> ℕ satisfy { forall(x11: ℕ -> Bool, x12: ℕ) { not x11(ℕ.0) or x11(s3(x11)) or x11(x12) } and forall(x13: ℕ -> Bool, x14: ℕ) { not x13(s3(x13).suc) or not x13(ℕ.0) or x13(x14) } }","not f(s3(f)) or f(s3(f).suc)","finite_seq_abs_bounded(a, n) = f(n)","not s0(s1(a, n)) <= n or not finite_seq_abs_bounded(a, n) or a(s0(s1(a, n))).abs < s1(a, n)","not f(s3(f).suc) or not f(ℕ.0) or f(n)","not f(ℕ.0) or f(s3(f)) or f(s3(f))","not s0(s1(a, n)) <= n or not finite_seq_abs_bounded(a, n)","not finite_seq_abs_bounded(a, n)","not f(n)","f(s3(f)) or f(s3(f))","f(s3(f))","not f(s3(f).suc)","f(s3(f).suc)"]}
{"goal":"a.abs = -a","proof":["not a < ℤ.0 or a.abs = -a"]}
{"goal":"reduce(a.abs, b).abs = reduce(a, b).abs","proof":["ℚ.from_int(int.unit_sign(a)) * reduce(ℤ.from_nat(lib(int.int_base).abs(a)), b) = reduce(int.unit_sign(a) * ℤ.from_nat(lib(int.int_base).abs(a)), b)","int.unit_sign(a) * ℤ.from_nat(lib(int.int_base).abs(a)) = a","not a < ℤ.0 or int.unit_sign(a) = -ℤ.1","-1 * reduce(a.abs, b) = -reduce(a.abs, b)","(-reduce(a.abs, b)).abs = reduce(a.abs, b).abs","ℤ.from_nat(lib(int.int_base).abs(a)) = a.abs","int.unit_sign(a) = -ℤ.1","(-reduce(a.abs, b)).abs != reduce(a, b).abs","-reduce(a.abs, b) != reduce(a, b)"]}
{"goal":"a.abs = a","proof":["ℤ.from_nat(lib(int.int_base).abs(a)) = a or a.is_negative","ℤ.from_nat(lib(int.int_base).abs(a)) = a.abs","ℤ.from_nat(lib(int.int_base).abs(a)) != a","a < ℤ.0 = a.is_negative","a.is_negative","not a.is_negative"]}
{"goal":"reduce(a.abs, b).abs = reduce(a, b).abs","proof":[]}
{"goal":"abs_reduce_left","proof":[]}
{"goal":"reduce_neg_num","proof":["ℚ.from_int(-ℤ.1) * reduce(a, b) = reduce(-ℤ.1 * a, b)","-ℤ.1 * a = -(ℤ.1 * a)","-1 * reduce(a, b) = -reduce(a, b)","ℤ.1 * a = a"]}
{"goal":"reduce_neg_denom","proof":["-reduce(a, b) = reduce(-a, b)","reduce(a, -b) != reduce(-a, b)","reduce(a, -b) = reduce(-a, b)"]}
{"goal":"b.abs = -b","proof":["not b < ℤ.0 or b.abs = -b"]}
{"goal":"reduce(a, b.abs).abs = reduce(a, b).abs","proof":["-reduce(a, b) = reduce(a, -b)","(-reduce(a, b)).abs = reduce(a, b).abs"]}
{"goal":"b.abs = b","proof":["ℤ.from_nat(lib(int.int_base).abs(b)) = b or b.is_negative","ℤ.from_nat(lib(int.int_base).abs(b)) = b.abs","ℤ.from_nat(lib(int.int_base).abs(b)) != b","b < ℤ.0 = b.is_negative","b.is_negative","not b.is_negative"]}
{"goal":"reduce(a, b.abs).abs = reduce(a, b).abs","proof":[]}
{"goal":"abs_reduce_right","proof":[]}
{"goal":"reduce(a, b) >= 0","proof":["reduce(a, b) != 0 or reduce(a, b) >= 0","reduce(a, b) != 0","reduce(ℤ.0, b) = 0"]}
{"goal":"reduce(a, b) >= 0","proof":["ℤ.0 != b or reduce(a, b) = 0","reduce(a, b) != 0 or reduce(a, b) >= 0","reduce(a, b) != 0"]}
{"goal":"a > ℤ.0","proof":["a > ℤ.0 or a < ℤ.0 or ℤ.0 = a","a < ℤ.0","not ℤ.0 <= a or ℤ.0 < a or ℤ.0 = a","not a < ℤ.0 or not ℤ.0 < a","a >= ℤ.0 = ℤ.0 <= a","ℤ.0 <= a","not ℤ.0 < a","ℤ.0 < a"]}
{"goal":"b > ℤ.0","proof":["b > ℤ.0 or b < ℤ.0 or ℤ.0 = b","b < ℤ.0","not ℤ.0 <= b or ℤ.0 < b or ℤ.0 = b","not b < ℤ.0 or not ℤ.0 < b","b >= ℤ.0 = ℤ.0 <= b","ℤ.0 <= b","not ℤ.0 < b","ℤ.0 < b"]}
{"goal":"reduce(a, b) > 0","proof":["not a > ℤ.0 or not b > ℤ.0 or reduce(a, b) > 0"]}
{"goal":"reduce(a, b) >= 0","proof":["not reduce(a, b) > 0 or reduce(a, b) >= 0"]}
{"goal":"reduce_nonneg","proof":[]}
{"goal":"not a.abs < ℤ.0","proof":["not a.abs < ℤ.0 or a.abs.abs = -a.abs","not ℤ.0 < a.abs or not a.abs < ℤ.0","not ℤ.0 < a.abs","a.abs.abs = -a.abs","ℤ.from_nat(lib(int.int_base).abs(a)) = a.abs","ℤ.from_nat(lib(int.int_base).abs(a.abs)) = a.abs.abs","ℤ.from_nat(lib(int.int_base).abs(a)) < ℤ.0 = ℤ.from_nat(lib(int.int_base).abs(a)).is_negative","ℤ.0 < a.abs = a.abs.is_positive","(-a.abs).is_negative = a.abs.is_positive","lib(int.int_base).abs(ℤ.from_nat(lib(int.int_base).abs(a))) = lib(int.int_base).abs(a)"]}
{"goal":"not b.abs < ℤ.0","proof":["not b.abs < ℤ.0 or b.abs.abs = -b.abs","not ℤ.0 < b.abs or not b.abs < ℤ.0","not ℤ.0 < b.abs","b.abs.abs = -b.abs","ℤ.from_nat(lib(int.int_base).abs(b)) = b.abs","ℤ.from_nat(lib(int.int_base).abs(b.abs)) = b.abs.abs","ℤ.from_nat(lib(int.int_base).abs(b)) < ℤ.0 = ℤ.from_nat(lib(int.int_base).abs(b)).is_negative","ℤ.0 < b.abs = b.abs.is_positive","(-b.abs).is_negative = b.abs.is_positive","lib(int.int_base).abs(ℤ.from_nat(lib(int.int_base).abs(b))) = lib(int.int_base).abs(b)"]}
{"goal":"not reduce(a.abs, b.abs) < 0","proof":["not a.abs >= ℤ.0 or not ℤ.from_nat(lib(int.int_base).abs(b)) >= ℤ.0 or reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) >= 0","reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) >= 0 != reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) < 0","a.abs >= ℤ.0 = ℤ.0 <= a.abs","ℤ.from_nat(lib(int.int_base).abs(b)) = b.abs","ℤ.0 <= a.abs != a.abs.is_negative","a.abs < ℤ.0 = a.abs.is_negative","not a.abs.is_negative","ℤ.from_nat(lib(int.int_base).abs(b)) >= ℤ.0","reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) < 0","ℤ.0 <= a.abs or a.abs.is_negative","not ℤ.0 <= a.abs or a.abs >= ℤ.0","not reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) >= 0 or not reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) < 0","ℤ.0 <= a.abs","not reduce(a.abs, ℤ.from_nat(lib(int.int_base).abs(b))) >= 0","a.abs >= ℤ.0","not a.abs >= ℤ.0"]}
{"goal":"reduce_abs","proof":["reduce(a.abs, b.abs).abs = reduce(a.abs, b).abs","reduce(a.abs, b).abs = reduce(a, b).abs","reduce(a.abs, b.abs) < 0 or reduce(a.abs, b.abs).abs = reduce(a.abs, b.abs)","reduce(a.abs, b).abs != reduce(a.abs, b.abs)","reduce(a.abs, b.abs).abs = reduce(a.abs, b.abs)","reduce(a.abs, b.abs).abs != reduce(a.abs, b.abs)"]}
{"goal":"p = q","proof":["q * r != p * r or 0 = r or q = p","0 = r","not r < r or not r < r","r > 0 = 0 < r","0 < r","r < r"]}
{"goal":"p <= q","proof":["q != p or p <= q"]}
{"goal":"p * r < q * r","proof":["not p * r <= q * r or p * r < q * r or q * r = p * r"]}
{"goal":"p < q","proof":["not p * r < q * r or not r > 0 or p < q"]}
{"goal":"p <= q","proof":["not p < q or p <= q"]}
{"goal":"lte_cancel_mul_pos","proof":[]}
{"goal":"reduce(a, c) = reduce(b, c)","proof":["ℤ.0 != ℤ.0 or reduce(a, ℤ.0) = 0","ℤ.0 != ℤ.0 or reduce(b, ℤ.0) = 0","reduce(a, ℤ.0) = 0","reduce(b, ℤ.0) = 0"]}
{"goal":"reduce(a, c) <= reduce(b, c)","proof":["reduce(b, c) != reduce(a, c) or reduce(a, c) <= reduce(b, c)"]}
{"goal":"c > ℤ.0","proof":["c > ℤ.0 or c < ℤ.0 or ℤ.0 = c","c < ℤ.0","not ℤ.0 <= c or ℤ.0 < c or ℤ.0 = c","not c < ℤ.0 or not ℤ.0 < c","c >= ℤ.0 = ℤ.0 <= c","ℤ.0 <= c","not ℤ.0 < c","ℤ.0 < c"]}
{"goal":"reduce(a, c) * ℚ.from_int(c) = ℚ.from_int(a)","proof":["ℚ.from_int(c) * reduce(a, c) = reduce(c * a, c)","reduce(c, c) * ℚ.from_int(a) = reduce(c * a, c)","reduce(c, c) = 1 or ℤ.0 = c","reduce(a, c) * ℚ.from_int(c) = ℚ.from_int(c) * reduce(a, c)","1 * ℚ.from_int(a) = ℚ.from_int(a)","reduce(c, c) = 1"]}
{"goal":"reduce(b, c) * ℚ.from_int(c) = ℚ.from_int(b)","proof":["ℚ.from_int(c) * reduce(b, c) = reduce(c * b, c)","reduce(c, c) * ℚ.from_int(b) = reduce(c * b, c)","reduce(c, c) = 1 or ℤ.0 = c","reduce(b, c) * ℚ.from_int(c) = ℚ.from_int(c) * reduce(b, c)","1 * ℚ.from_int(b) = ℚ.from_int(b)","reduce(c, c) = 1"]}
{"goal":"ℚ.from_int(a) <= ℚ.from_int(b)","proof":["not a <= b or ℚ.from_int(a) <= ℚ.from_int(b)"]}
{"goal":"reduce(a, c) * ℚ.from_int(c) <= reduce(b, c) * ℚ.from_int(c)","proof":[]}
{"goal":"ℚ.from_int(c) > 0","proof":["ℚ.from_int(c) > 0 = 0 < ℚ.from_int(c)","c > ℤ.0 = ℤ.0 < c","0 < ℚ.from_int(c) = ℚ.from_int(c).is_positive","ℚ.from_int(c).num.is_positive = ℚ.from_int(c).is_positive","ℤ.0 < c = c.is_positive","ℚ.from_int(c).num = c"]}
{"goal":"reduce(a, c) <= reduce(b, c)","proof":["not reduce(a, c) * ℚ.from_int(c) <= reduce(b, c) * ℚ.from_int(c) or not ℚ.from_int(c) > 0 or reduce(a, c) <= reduce(b, c)"]}
{"goal":"reduce_lte","proof":[]}
{"goal":"exists(k0: ℤ, k1: ℤ, k2: ℤ) { a = reduce(k0, k2) and b = reduce(k1, k2) }","proof":["let (s0: (ℚ, ℚ) -> ℤ, s1: (ℚ, ℚ) -> ℤ, s2: (ℚ, ℚ) -> ℤ) satisfy { forall(x0: ℚ, x1: ℚ) { reduce(s0(x0, x1), s2(x0, x1)) = x0 } and forall(x2: ℚ, x3: ℚ) { reduce(s1(x2, x3), s2(x2, x3)) = x3 } }","reduce(s1(b, a), s2(b, a)) != a or reduce(s0(b, a), s2(b, a)) != b","reduce(s1(b, a), s2(b, a)) = a","reduce(s0(b, a), s2(b, a)) = b","reduce(s1(b, a), s2(b, a)) != a"]}
{"goal":"a + b = reduce(an + bn, c)","proof":["reduce(an, c) + reduce(bn, c) = reduce(an + bn, c)"]}
{"goal":"(a + b).abs = reduce((an + bn).abs, c.abs)","proof":["reduce((an + bn).abs, c.abs) = reduce(an + bn, c).abs"]}
{"goal":"(an + bn).abs <= an.abs + bn.abs","proof":["(an + bn).abs <= an.abs + bn.abs"]}
{"goal":"not c.abs < ℤ.0","proof":["not c.abs < ℤ.0 or c.abs.abs = -c.abs","not ℤ.0 < c.abs or not c.abs < ℤ.0","not ℤ.0 < c.abs","c.abs.abs = -c.abs","ℤ.from_nat(lib(int.int_base).abs(c)) = c.abs","ℤ.from_nat(lib(int.int_base).abs(c.abs)) = c.abs.abs","ℤ.from_nat(lib(int.int_base).abs(c)) < ℤ.0 = ℤ.from_nat(lib(int.int_base).abs(c)).is_negative","ℤ.0 < c.abs = c.abs.is_positive","(-c.abs).is_negative = c.abs.is_positive","lib(int.int_base).abs(ℤ.from_nat(lib(int.int_base).abs(c))) = lib(int.int_base).abs(c)"]}
{"goal":"reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs)","proof":["not c.abs >= ℤ.0 or not (an + bn).abs <= an.abs + bn.abs or reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs)","not c.abs >= ℤ.0","ℤ.from_nat(lib(int.int_base).abs(c)) = c.abs","ℤ.from_nat(lib(int.int_base).abs(c)) >= ℤ.0"]}
{"goal":"reduce(an.abs + bn.abs, c.abs) = reduce(an, c).abs + reduce(bn, c).abs","proof":["reduce(an.abs, c.abs) + reduce(bn.abs, c.abs) = reduce(an.abs + bn.abs, c.abs)","reduce(an.abs, c.abs) = reduce(an, c).abs","reduce(bn.abs, c.abs) = reduce(bn, c).abs"]}
{"goal":"reduce(an.abs + bn.abs, c.abs) = a.abs + b.abs","proof":[]}
{"goal":"triangle_ineq","proof":["not (a + b).abs <= reduce(an.abs + bn.abs, c.abs)"]}
{"goal":"nonneg_lt_imp_pos","proof":["not 0 <= a or not a < b or 0 < b","0 > a != 0 <= a","a >= 0 != a < 0","0 > a = a < 0","b > 0 = 0 < b","not 0 < b","not 0 <= a or not a < b","not 0 <= a","not 0 > a or a < 0","not a >= 0 or not a < 0","not a < 0","0 > a or 0 <= a","not 0 > a","0 > a"]}
{"goal":"a * c <= b * c","proof":["not 0 <= c or not a <= b or a * c <= b * c","not c > 0 or not a <= b or a * c <= b * c","not c >= 0 or c > 0 or 0 = c","not a < b or a <= b","not c > 0 or not a <= b","not 0 <= c or not a <= b","0 != c or 0 <= c","a <= b","not 0 <= c","not c > 0","0 != c","0 = c"]}
{"goal":"b > 0","proof":["not a >= 0 or not a < b or b > 0"]}
{"goal":"b * c < b * d","proof":["not b > 0 or not c < d or c * b < d * b","b * c = c * b","d * b = b * d","not b * c < d * b","not c * b < d * b"]}
{"goal":"lt_pos_mul_lt_pos","proof":["not a * c < b * c or not b * c < b * d or a * c < b * d","not a * c <= b * c or a * c < b * c or b * c = a * c","not b * c < b * d or not a * c < b * c","not a * c < b * c","b * c = a * c"]}
{"goal":"abs_nonneg","proof":["(1 * a.abs).abs = (1 * a).abs","not a.abs < 0 or a.abs.abs = -a.abs","(0 - a.abs).is_positive = a.abs < 0","not a.abs > 0 or not a.abs < 0","not a.abs > 0","a.abs > 0 = 0 < a.abs","a.abs.abs = -a.abs","(-a).abs = a.abs","0 - a.abs = -a.abs","0 < a.abs = a.abs.is_positive","(-a).abs - 0 = (-a).abs","a - 0 = a","1 * (a - 0) = a - 0","1 * (a.abs - 0) = a.abs - 0"]}
{"goal":"not b < 0","proof":["not a <= b or not b < 0 or a < 0","not a > 0 or not a <= b or b > 0","not a >= 0 or a > 0 or 0 = a","not b > 0 or not b < 0","not b > 0","not a > 0","0 = a","a > 0 = 0 < a","not a <= b or a < 0","a < 0"]}
{"goal":"not d < 0","proof":["not c <= d or not d < 0 or c < 0","not c > 0 or not c <= d or d > 0","not c >= 0 or c > 0 or 0 = c","not d > 0 or not d < 0","not d > 0","not c > 0","0 = c","c > 0 = 0 < c","not c <= d or c < 0","c < 0"]}
{"goal":"c * b <= d * b","proof":["not 0 <= b or not c <= d or c * b <= d * b","not 0 <= b","not b > 0 or not c <= d or c * b <= d * b","not b > 0","b > 0 or b < 0 or 0 = b","0 = b"]}
{"goal":"a * c <= b * d","proof":["c * a = a * c","d * a = a * d"]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a"]}
{"goal":"a * c <= b * d","proof":["not a * c <= b * c","c <= c","not 0 <= c or not a <= b or a * c <= b * c","not c > 0 or not a <= b or a * c <= b * c","not c > 0","not 0 <= c","c > 0 or c < 0 or 0 = c","0 = c"]}
{"goal":"c < d","proof":["not c <= d or c < d or d = c"]}
{"goal":"a * c < b * d","proof":["not a >= 0 or not c >= 0 or not a < b or not c < d or a * c < b * d","a >= 0 != a < 0","c >= 0 != c < 0","not c >= 0 or not a >= 0","a >= 0 or a < 0","c >= 0 or c < 0","c >= 0","a >= 0","not a >= 0"]}
{"goal":"a * c <= b * d","proof":["not a * c < b * d or a * c <= b * d"]}
{"goal":"lte_mul_lte","proof":[]}
{"goal":"add_div_distrib","proof":["a * c.reciprocal + b * c.reciprocal = (a + b) * c.reciprocal","(a + b) * c.reciprocal = (a + b) / c","a * c.reciprocal = a / c","b * c.reciprocal = b / c"]}
{"goal":"sub_div_distrib","proof":["c.reciprocal * a - c.reciprocal * b = c.reciprocal * (a - b)","(a - b) * c.reciprocal = (a - b) / c","a * c.reciprocal = a / c","b * c.reciprocal = b / c","(a - b) * c.reciprocal = c.reciprocal * (a - b)","a * c.reciprocal = c.reciprocal * a","b * c.reciprocal = c.reciprocal * b"]}
{"goal":"a * b = 0","proof":["b * a = a * b","b * a != 0","b * 0 = 0"]}
{"goal":"1 / (a * b) = 0","proof":["reduce(0.denom, 0.num) = 0.reciprocal","0.num != ℤ.0 or reduce(0.denom, 0.num) = 0","1 / (a * b) = (a * b).reciprocal","(a * b).reciprocal != 0","0.reciprocal != 0","reduce(0.denom, 0.num) != 0"]}
{"goal":"1 / (a * b) = 1 / a * 1 / b","proof":["1 / a * 1 / b != 0","1 / 0 = 0","1 / a != 0 or 1 / a * 1 / b = 0","1 / a = 0","1 / a != 0"]}
{"goal":"a * b = 0","proof":["a * 0 != 0","0 != 0 or a * 0 = 0"]}
{"goal":"1 / (a * b) = 0","proof":["reduce(0.denom, 0.num) = 0.reciprocal","0.num != ℤ.0 or reduce(0.denom, 0.num) = 0","1 / (a * b) = (a * b).reciprocal","(a * b).reciprocal != 0","0.reciprocal != 0","reduce(0.denom, 0.num) != 0"]}
{"goal":"1 / (a * b) = 1 / a * 1 / b","proof":["1 / a * 1 / b != 0","1 / 0 = 0","1 / b != 0 or 1 / a * 1 / b = 0","1 / b = 0","1 / b != 0"]}
{"goal":"1 / (a * b) * (a * b) = 1","proof":["a * b != 0 or 0 = a or 0 = b","1 / (a * b) * (a * b) = 1 or a * b = 0","a * b = 0"]}
{"goal":"1 / (a * b) = 1 / a * 1 / b","proof":["1 / (a * b) * (a * b) = 1 / (a * b) * a * b","(1 / (a * b) * a * b) / b = 1 / (a * b) * a or 0 = b","(1 / (a * b) * a) / a = 1 / (a * b) or 0 = a","(b.reciprocal * b) / b = b.reciprocal or 0 = b","b.reciprocal * 1 / a = b.reciprocal / a","b.reciprocal * b = 1 or 0 = b","b.reciprocal * b = 1","1 / b * 1 / a = 1 / a * 1 / b","(1 / (a * b) * a) / a = 1 / (a * b)","(1 / (a * b) * a * b) / b = 1 / (a * b) * a","(b.reciprocal * b) / b = b.reciprocal"]}
{"goal":"recip_mul","proof":["1 / (a * b) != (a * b).reciprocal","1 / (a * b) = (a * b).reciprocal"]}
{"goal":"a / b * c / d = a * 1 / b * (c * 1 / d)","proof":["reduce((a * 1 / b).num * (c * 1 / d).num, (a * 1 / b).denom * (c * 1 / d).denom) = a * 1 / b * (c * 1 / d)","reduce((a / b).num * (c / d).num, (a / b).denom * (c / d).denom) = a / b * c / d","a * 1 / b = a / b","c * 1 / d = c / d"]}
{"goal":"a / b * c / d = a * c * (1 / b * 1 / d)","proof":["1 / b * (1 / d * (a * c)) = 1 / b * 1 / d * (a * c)","1 / b * (a * (c * 1 / d)) = 1 / b * a * (c * 1 / d)","a * (c * d.reciprocal) = a * c * d.reciprocal","c * 1 / d = c / d","c * d.reciprocal = c / d","a * 1 / b = 1 / b * a","a * c * (1 / b * 1 / d) = 1 / b * 1 / d * (a * c)","d.reciprocal * (a * c) = a * c * d.reciprocal","1 / d = d.reciprocal"]}
{"goal":"1 / b * 1 / d = 1 / (b * d)","proof":["1 / b * 1 / d = 1 / (b * d)"]}
{"goal":"a / b * c / d = a * c * 1 / (b * d)","proof":["a * c * (1 / b * 1 / d) != a / b * c / d"]}
{"goal":"mul_fractions","proof":["a * c * 1 / (b * d) = (a * c) / (b * d)"]}
{"goal":"a / a * b / c = (a * b) / (a * c)","proof":["a / a * b / c = (a * b) / (a * c)"]}
{"goal":"cancel_left_num_denom","proof":["a * a.reciprocal = 1 or 0 = a","a * a.reciprocal = a / a","b / c * a / a = a / a * b / c","b / c * 1 = b / c","a * a.reciprocal = 1"]}
{"goal":"cancel_to_reciprocal","proof":["(a * 1) / (a * b) = 1 / b or 0 = a","a * 1 = a","(a * 1) / (a * b) != 1 / b"]}
{"goal":"b / (a * b) = 1 / a","proof":["b / (b * a) = 1 / a or 0 = b or 0 = a","b * a = a * b","b / (b * a) != 1 / a"]}
{"goal":"a / (a * b) = 1 / b","proof":["a / (a * b) = 1 / b or 0 = a or 0 = b"]}
{"goal":"(b - a) / (a * b) = b / (a * b) - a / (a * b)","proof":["b / (a * b) - a / (a * b) = (b - a) / (a * b)"]}
{"goal":"recip_diff","proof":[]}
{"goal":"lt_mul_lte","proof":["not a >= 0 or not c >= 0 or not a < b or not c < d or a * c < b * d","not d > 0 or not a < b or a * d < b * d","not c > 0 or not c <= d or d > 0","not c <= d or c < d or d = c","a >= 0 != a < 0","not c > 0 or c >= 0","c >= 0","d > 0","not a >= 0 or not c < d","a >= 0 or a < 0","a >= 0","c < d or d = c","not c < d","d = c","not d > 0 or a * d < b * d","not a * d < b * d","a * d < b * d"]}
{"goal":"a * reduce(0.denom, ℤ.0) = 0","proof":["ℤ.0 != ℤ.0 or reduce(ℤ.1, ℤ.0) = 0","a * 0 = 0","a * reduce(ℤ.1, ℤ.0) != 0","reduce(ℤ.1, ℤ.0) = 0"]}
{"goal":"a * 1 / 0 = 0","proof":["reduce(0.denom, 0.num) = 0.reciprocal","a * 1 / 0 = 1 / 0 * a","a * reduce(0.denom, ℤ.0) = reduce(0.denom, ℤ.0) * a","1 / 0 = 0.reciprocal","ℚ.new(ℤ.0, ℤ.1) = ℚ.from_int(ℤ.0)","ℚ.from_int(ℤ.0).num = ℤ.0"]}
{"goal":"div_zero","proof":["a * 1 / 0 = a / 0"]}
{"goal":"a.reciprocal = 0","proof":["1 / a = a.reciprocal","1 / a != 0","1 / 0 = 0"]}
{"goal":"a.reciprocal.reciprocal = 0","proof":["0.reciprocal != 0"]}
{"goal":"a.reciprocal.reciprocal = a","proof":["a.reciprocal.reciprocal = a or 0 = a"]}
{"goal":"recip_recip_raw","proof":["a.reciprocal.reciprocal != 0"]}
{"goal":"recip_recip","proof":["1 / (1 / a) = (1 / a).reciprocal","1 / a = a.reciprocal","(1 / a).reciprocal != a","a.reciprocal.reciprocal != a","a.reciprocal.reciprocal = a"]}
{"goal":"a < 0","proof":[]}
{"goal":"1 / b < 0","proof":["1 / b < 0 = b < 0"]}
{"goal":"div_neg_neg","proof":["not a < 0 or not b.reciprocal < 0 or a * b.reciprocal > 0","a * b.reciprocal = a / b","not a * b.reciprocal > 0","1 / b = b.reciprocal","not b.reciprocal < 0","b.reciprocal < 0"]}
{"goal":"-1 != 0","proof":["1 / (1 / 2) > 0 = 1 / 2 > 0","-(0 - -1) = -1 - 0","-(0 - 1) = 1 - 0","0 + -1 = 0 - 1","1 / (1 / 2) = 2","2 * 0 = 0 + 0","not -1 > 0 or -1 != 0","not -1 > 0","0 - 1 = -1","0 - 0 = 0","1 - 0 = 1","2 * 1 = 2"]}
{"goal":"(-1 * a) / (-1 * b) = a / b","proof":["(-1 * a) / (-1 * b) = a / b or -1 = 0"]}
{"goal":"(-1 * a) / -b = a / b","proof":["-1 * b = -b"]}
{"goal":"div_negs_cancel","proof":["-1 * a = -a"]}
{"goal":"a.abs = a","proof":["not a >= 0 or not a < 0 or 0 > 0","a < 0 or a.abs = a","a < 0","not 0 > 0 or 0 != 0","0 > 0","not 0 > 0"]}
{"goal":"(1 / a).abs = 1 / a.abs","proof":["(1 / a).abs != 1 / a","1 / a < 0 = a < 0","1 / a < 0 or (1 / a).abs = 1 / a","not a.abs < 0","1 / a < 0","a < 0"]}
{"goal":"a < 0","proof":["a > 0 or a < 0 or 0 = a","not a > 0 or a >= 0","0 != a or a >= 0","0 != a","not a > 0","a > 0"]}
{"goal":"1 / a < 0","proof":["1 / a < 0 = a < 0"]}
{"goal":"a.abs = -a","proof":["not a < 0 or a.abs = -a"]}
{"goal":"(1 / a).abs = 1 / a.abs","proof":["(1 / a).abs != 1 / -a","1 / -a = -1 / a","(1 / a).abs != -1 / a","not 1 / a < 0 or (1 / a).abs = -1 / a"]}
{"goal":"abs_reciprocal","proof":[]}
{"goal":"abs_div","proof":["a.abs * b.reciprocal.abs = (a * b.reciprocal).abs","(1 / b).abs = 1 / b.abs","a * b.reciprocal = a / b","a.abs * b.abs.reciprocal = a.abs / b.abs","1 / b = b.reciprocal","1 / b.abs = b.abs.reciprocal"]}
{"goal":"abs_of_div","proof":["a.abs * b.reciprocal.abs = (a * b.reciprocal).abs","(1 / b).abs = 1 / b.abs","a * b.reciprocal = a / b","a.abs * b.abs.reciprocal = a.abs / b.abs","1 / b = b.reciprocal","1 / b.abs = b.abs.reciprocal"]}
{"goal":"lt_make_left_denom","proof":["not a < b / c.reciprocal or not c.reciprocal > 0 or a * c.reciprocal < b","not c > 0 or c.reciprocal > 0","a * c.reciprocal = a / c","b * c.reciprocal.reciprocal = b / c.reciprocal","not a * c.reciprocal < b","c.reciprocal.reciprocal = c","c.reciprocal > 0","a < b * c.reciprocal.reciprocal","not a < b / c.reciprocal","a < b / c.reciprocal"]}
{"goal":"1 / b > 0","proof":["1 / b > 0 = b > 0"]}
{"goal":"a * b * 1 / b < c * 1 / b","proof":["not 1 / b > 0 or not a * b < c or a * b * 1 / b < c * 1 / b"]}
{"goal":"a * b * 1 / b = a","proof":["(a * b) / b = a or 0 = b","a * b * 1 / b = (a * b) / b","(a * b) / b != a","0 = b","not b > 0 or 0 != b"]}
{"goal":"a < c * 1 / b","proof":["not a * b * 1 / b < c * 1 / b"]}
{"goal":"lt_make_right_denom","proof":["c * 1 / b = c / b"]}
{"goal":"lt_elim_left_denom","proof":["not a * b.reciprocal < c or not b.reciprocal > 0 or a < c / b.reciprocal","not b > 0 or b.reciprocal > 0","a * b.reciprocal = a / b","c * b.reciprocal.reciprocal = c / b.reciprocal","b.reciprocal.reciprocal = b","not a < c * b.reciprocal.reciprocal","not a < c / b.reciprocal","b.reciprocal > 0","a * b.reciprocal < c","not a * b.reciprocal < c"]}
{"goal":"mul_div_swap","proof":["a * (c.reciprocal * b) = a * c.reciprocal * b","a * c.reciprocal = a / c","b * c.reciprocal = b / c","b * c.reciprocal = c.reciprocal * b"]}
{"goal":"zero_recip","proof":["1 / 0 = 0"]}
{"goal":"rat_total","proof":["a > b or a < b or b = a","a > b = b < a","not a < b or a <= b","not b < a or b <= a","not b < a","not a < b","b != a or b <= a","b != a","not a > b","a > b"]}
