{"goal":"exists(k0: ℕ) { k0.proper_divides(n) }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: ℕ, x2: ℕ) { not x1.proper_divides(x2) or x2.is_composite } }","not s0(n).proper_divides(n)","not n.is_composite or s0(n).proper_divides(n)"]}
{"goal":"exists(k0: ℕ) { a * k0 = n }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0.proper_divides(x1) or 0 != x1 } and forall(x2: ℕ, x3: ℕ) { not x2.proper_divides(x3) or 1 < x2 } and forall(x4: ℕ, x5: ℕ) { not x4.proper_divides(x5) or x4 < x5 } and forall(x6: ℕ, x7: ℕ) { not x6.proper_divides(x7) or x6 * s0(x6, x7) = x7 } and forall(x8: ℕ, x9: ℕ, x10: ℕ) { not 1 < x8 or not x8 < x9 or x8 * x10 != x9 or x8.proper_divides(x9) or 0 = x9 } }","a * s0(a, n) != n","not a.proper_divides(n) or a * s0(a, n) = n"]}
{"goal":"b.proper_divides(n)","proof":["not a.proper_divides(n) or a * b != n or b.proper_divides(n)"]}
{"goal":"1 < a and a < n and (1 < b and b < n) and a * b = n","proof":["not 1 < b or not 1 < a or not b < n or not a < n","not a.proper_divides(n) or a < n","not b.proper_divides(n) or b < n","not a.proper_divides(n) or 1 < a","not b.proper_divides(n) or 1 < b","1 < b","1 < a","b < n","a < n","not a < n"]}
{"goal":"n.is_direct_composite","proof":["not 1 < a or not 1 < b or not a < n or not b < n or a * b != n or n.is_direct_composite"]}
{"goal":"composite_is_direct_composite","proof":["n.is_direct_composite or n.is_composite","not n.is_direct_composite or not n.is_composite","not n.is_composite","n.is_direct_composite","let (s0: ℕ -> ℕ, s1: ℕ -> ℕ) satisfy { forall(x0: ℕ) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: ℕ) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: ℕ) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: ℕ) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: ℕ) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: ℕ, x6: ℕ, x7: ℕ) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(n) or not s0(n) < n or s0(n) * s1(n) != n or s0(n).proper_divides(n) or 0 = n","not n <= 0 or not s1(n) < n or s1(n) < 0","not n.is_direct_composite or s0(n) * s1(n) = n","not n.is_direct_composite or s1(n) < n","not n.is_direct_composite or s0(n) < n","not n.is_direct_composite or 1 < s0(n)","not s0(n).proper_divides(n) or n.is_composite","not s0(n).proper_divides(n)","0 != n or n <= 0","not s1(n) < 0","1 < s0(n)","s0(n) < n","s1(n) < n","s0(n) * s1(n) = n","not n <= 0 or s1(n) < 0","not n <= 0","0 = n","0 != n"]}
{"goal":"n.is_prime implies not n.is_composite","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: ℕ, x2: ℕ) { not x1.proper_divides(x2) or x2.is_composite } }","not n.is_composite or s0(n).proper_divides(n)","s0(n).proper_divides(n)","not n.is_prime or not s0(n).proper_divides(n)"]}
{"goal":"composite_is_not_prime","proof":["not n.is_composite","not n > 1 or not n.is_prime","let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not x0.is_prime or x0 > 1 } and forall(x1: ℕ, x2: ℕ) { not x1.is_prime or not x2.proper_divides(x1) } and forall(x3: ℕ) { not x3 > 1 or s0(x3).proper_divides(x3) or x3.is_prime } }","not n > 1 or s0(n).proper_divides(n) or n.is_prime","not n.is_prime or n > 1","not s0(n).proper_divides(n) or n.is_composite","not s0(n).proper_divides(n)","not n > 1 or n.is_prime","n.is_prime","not n > 1","n > 1"]}
{"goal":"k.divides(k)","proof":["k * 1 != k or k.divides(k)","k * 1 != k","k * 1 = k"]}
{"goal":"has_prime_divisor(k)","proof":["not k.is_prime or not k.divides(k) or has_prime_divisor(k)"]}
{"goal":"k.is_direct_composite","proof":["k.is_direct_composite = k.is_composite"]}
{"goal":"exists(k0: ℕ, k1: ℕ) { 1 < k0 and k0 < k and k = k0 * k1 }","proof":["let (s0: ℕ -> ℕ, s1: ℕ -> ℕ) satisfy { forall(x0: ℕ) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: ℕ) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: ℕ) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: ℕ) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: ℕ) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: ℕ, x6: ℕ, x7: ℕ) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(k) or not s0(k) < k or s0(k) * s1(k) != k","not k.is_direct_composite or s0(k) * s1(k) = k","not k.is_direct_composite or s0(k) < k","not k.is_direct_composite or 1 < s0(k)","1 < s0(k)","s0(k) < k","s0(k) * s1(k) = k"]}
{"goal":"has_prime_divisor(b)","proof":["not true_below(has_prime_divisor, k) or not b < k or has_prime_divisor(b)","not true_below(has_prime_divisor, k) or not b < k"]}
{"goal":"exists(k0: ℕ) { k0.is_prime and k0.divides(b) }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not 1 < x0 or not has_prime_divisor(x0) or s0(x0).is_prime } and forall(x1: ℕ) { not 1 < x1 or not has_prime_divisor(x1) or s0(x1).divides(x1) } and forall(x2: ℕ) { 1 < x2 or has_prime_divisor(x2) } and forall(x3: ℕ, x4: ℕ) { not x3.is_prime or not x3.divides(x4) or has_prime_divisor(x4) } }","not s0(b).divides(b) or not s0(b).is_prime","not 1 < b or not has_prime_divisor(b) or s0(b).is_prime","not 1 < b or not has_prime_divisor(b) or s0(b).divides(b)","s0(b).is_prime","s0(b).divides(b)","not s0(b).divides(b)"]}
{"goal":"p.divides(k)","proof":["not p.divides(b * c)","not p.divides(b) or p.divides(b * c)"]}
{"goal":"has_prime_divisor(k)","proof":["not p.is_prime or not p.divides(k) or has_prime_divisor(k)"]}
{"goal":"has_prime_divisor(k)","proof":["1 < k or has_prime_divisor(k)","1 < k","not k > 1 or k.is_prime or k.is_composite","not k > 1","k > 1 = 1 < k"]}
{"goal":"has_prime_divisor(n)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { true_below(x0, s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2)) or x2(x3) } }","not true_below(has_prime_divisor, s0(has_prime_divisor)) or has_prime_divisor(s0(has_prime_divisor))","true_below(has_prime_divisor, s0(has_prime_divisor)) or has_prime_divisor(n)","true_below(has_prime_divisor, s0(has_prime_divisor))","not has_prime_divisor(s0(has_prime_divisor)) or has_prime_divisor(n)","has_prime_divisor(s0(has_prime_divisor))","not has_prime_divisor(s0(has_prime_divisor))"]}
{"goal":"has_prime_divisor","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not 1 < x0 or not has_prime_divisor(x0) or s0(x0).is_prime } and forall(x1: ℕ) { not 1 < x1 or not has_prime_divisor(x1) or s0(x1).divides(x1) } and forall(x2: ℕ) { 1 < x2 or has_prime_divisor(x2) } and forall(x3: ℕ, x4: ℕ) { not x3.is_prime or not x3.divides(x4) or has_prime_divisor(x4) } }","not s0(n).divides(n) or not s0(n).is_prime","not 1 < n or not has_prime_divisor(n) or s0(n).is_prime","not 1 < n or not has_prime_divisor(n) or s0(n).divides(n)","s0(n).is_prime","s0(n).divides(n)","not s0(n).divides(n)"]}
{"goal":"forall(x0: ℕ, x1: ℕ, x2: ℕ) { x0 * (x1 * x2) = x0 * x1 * x2 } and forall(x3: ℕ) { x3 * 1 = x3 } and forall(x4: ℕ, x5: ℕ) { x4 * x5 = x5 * x4 }","proof":["let (s0: ℕ, s1: ℕ, s2: ℕ, s3: ℕ, s4: ℕ, s5: ℕ) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 or s5 * s4 != s4 * s5 or s3 * 1 != s3 }","s0 * (s1 * s2) = s0 * s1 * s2","s3 * 1 = 1 * s3","s5 * s4 = s4 * s5","s3 * 1 != s3","1 * s3 != s3","1 * s3 = s3"]}
{"goal":"product(l) = k","proof":["sum[ℕ](List.singleton(k)) = k","sum[ℕ](List.singleton(k)) != product(l)","product(l) != sum[ℕ](l)","product(l) = sum[ℕ](l)"]}
{"goal":"m ∈ l implies m = k","proof":["not m ∈ List.cons(k, List.nil[ℕ]) or m ∈ List.nil[ℕ] or m = k","List.cons(k, List.nil[ℕ]) = List.singleton(k)","not m ∈ List.nil[ℕ] or List.nil[ℕ] != List.nil[ℕ]","not m ∈ List.nil[ℕ]","not m ∈ List.cons(k, List.nil[ℕ]) or m ∈ List.nil[ℕ]","not m ∈ List.cons(k, List.nil[ℕ])"]}
{"goal":"k.is_prime","proof":[]}
{"goal":"m ∈ l implies m.is_prime","proof":["not k.is_prime"]}
{"goal":"all_prime(l)","proof":["let s0: List[ℕ] -> ℕ satisfy { forall(x0: List[ℕ], x1: ℕ) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[ℕ]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[ℕ]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(l) ∈ l or s0(l).is_prime","s0(l) ∈ l or all_prime(l)","s0(l) ∈ l","not s0(l).is_prime or all_prime(l)","s0(l).is_prime","not s0(l).is_prime"]}
{"goal":"prime_decomposition(k)","proof":["product(l) != k or not all_prime(l) or prime_decomposition(k)"]}
{"goal":"k.is_direct_composite","proof":["k.is_direct_composite = k.is_composite"]}
{"goal":"exists(k0: ℕ, k1: ℕ) { 1 < k0 and k0 < k and (1 < k1 and k1 < k) and k0 * k1 = k }","proof":["let (s0: ℕ -> ℕ, s1: ℕ -> ℕ) satisfy { forall(x0: ℕ) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: ℕ) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: ℕ) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: ℕ) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: ℕ) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: ℕ, x6: ℕ, x7: ℕ) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(k) or not 1 < s1(k) or not s0(k) < k or not s1(k) < k or s0(k) * s1(k) != k","not k.is_direct_composite or s0(k) * s1(k) = k","not k.is_direct_composite or s1(k) < k","not k.is_direct_composite or 1 < s1(k)","not k.is_direct_composite or s0(k) < k","not k.is_direct_composite or 1 < s0(k)","1 < s0(k)","s0(k) < k","1 < s1(k)","s1(k) < k","s0(k) * s1(k) = k"]}
{"goal":"prime_decomposition(a)","proof":["not true_below(prime_decomposition, k) or not a < k or prime_decomposition(a)","not true_below(prime_decomposition, k) or not a < k"]}
{"goal":"prime_decomposition(b)","proof":["not true_below(prime_decomposition, k) or not b < k or prime_decomposition(b)","not true_below(prime_decomposition, k) or not b < k"]}
{"goal":"exists(k0: List[ℕ]) { all_prime(k0) and a = product(k0) }","proof":["let s0: ℕ -> List[ℕ] satisfy { forall(x0: ℕ) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: ℕ) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: ℕ) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[ℕ], x4: ℕ) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(a)) != a or not all_prime(s0(a))","not 1 < a or not prime_decomposition(a) or all_prime(s0(a))","not 1 < a or not prime_decomposition(a) or product(s0(a)) = a","all_prime(s0(a))","product(s0(a)) = a","product(s0(a)) != a"]}
{"goal":"exists(k0: List[ℕ]) { all_prime(k0) and b = product(k0) }","proof":["let s0: ℕ -> List[ℕ] satisfy { forall(x0: ℕ) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: ℕ) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: ℕ) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[ℕ], x4: ℕ) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(b)) != b or not all_prime(s0(b))","not 1 < b or not prime_decomposition(b) or all_prime(s0(b))","not 1 < b or not prime_decomposition(b) or product(s0(b)) = b","all_prime(s0(b))","product(s0(b)) = b","product(s0(b)) != b"]}
{"goal":"x ∈ la + lb implies x ∈ la or x ∈ lb","proof":["not x ∈ la + lb or x ∈ la or x ∈ lb"]}
{"goal":"x ∈ la implies x.is_prime","proof":["not all_prime(la) or not x ∈ la or x.is_prime"]}
{"goal":"x ∈ lb implies x.is_prime","proof":["not all_prime(lb) or not x ∈ lb or x.is_prime"]}
{"goal":"x ∈ l implies x.is_prime","proof":["not x ∈ la + lb","x ∈ la + lb"]}
{"goal":"all_prime(l)","proof":["let s0: List[ℕ] -> ℕ satisfy { forall(x0: List[ℕ], x1: ℕ) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[ℕ]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[ℕ]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(l) ∈ l or s0(l).is_prime","s0(l) ∈ l or all_prime(l)","s0(l) ∈ l","not s0(l).is_prime or all_prime(l)","s0(l).is_prime","not s0(l).is_prime"]}
{"goal":"product(la + lb) = a * b","proof":["sum[ℕ](la) * sum[ℕ](lb) = sum[ℕ](la + lb)","product(l) = sum[ℕ](l)","product(la) = sum[ℕ](la)","product(lb) = sum[ℕ](lb)"]}
{"goal":"product(l) = k","proof":[]}
{"goal":"prime_decomposition(k)","proof":["product(l) != k or not all_prime(l) or prime_decomposition(k)"]}
{"goal":"prime_decomposition(k)","proof":["1 < k or prime_decomposition(k)","1 < k","not k > 1 or k.is_prime or k.is_composite","not k > 1","k > 1 = 1 < k"]}
{"goal":"prime_decomposition(n)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { true_below(x0, s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2)) or x2(x3) } }","not true_below(prime_decomposition, s0(prime_decomposition)) or prime_decomposition(s0(prime_decomposition))","true_below(prime_decomposition, s0(prime_decomposition)) or prime_decomposition(n)","true_below(prime_decomposition, s0(prime_decomposition))","not prime_decomposition(s0(prime_decomposition)) or prime_decomposition(n)","prime_decomposition(s0(prime_decomposition))","not prime_decomposition(s0(prime_decomposition))"]}
{"goal":"prime_decomposition","proof":["let s0: ℕ -> List[ℕ] satisfy { forall(x0: ℕ) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: ℕ) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: ℕ) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[ℕ], x4: ℕ) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(n)) != n or not all_prime(s0(n))","not 1 < n or not prime_decomposition(n) or all_prime(s0(n))","not 1 < n or not prime_decomposition(n) or product(s0(n)) = n","all_prime(s0(n))","product(s0(n)) = n","product(s0(n)) != n"]}
{"goal":"1 < m","proof":["1 < n.factorial + 1 = 1 <= n.factorial","not 1 < n.factorial + 1","not 1 <= n.factorial","1 <= n.factorial"]}
{"goal":"exists(k0: ℕ) { k0.is_prime and k0.divides(m) }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { not 1 < x0 or s0(x0).is_prime } and forall(x1: ℕ) { not 1 < x1 or s0(x1).divides(x1) } }","not s0(m).divides(m) or not s0(m).is_prime","not 1 < m or s0(m).divides(m)","not 1 < m or s0(m).is_prime","s0(m).is_prime","s0(m).divides(m)","not s0(m).divides(m)"]}
{"goal":"p > 1","proof":["not p.is_prime or p > 1"]}
{"goal":"p != 1","proof":["p > p","not p < p or not p < p","p > p = p < p","p < p"]}
{"goal":"p.divides(n.factorial)","proof":["p = 0","1 != 0","0 > 1","0 > 1 = 1 < 0","1 < 0","not 1 < 0 or 1 <= 0","not 1 <= 0 or 1 = 0","1 <= 0","not 1 <= 0"]}
{"goal":"p.divides(n.factorial + 1)","proof":[]}
{"goal":"not function(x0: ℕ, x1: ℕ) { x0.divides(x1) and x0.divides(x1 + 1) implies x0 = 1 }(p, n.factorial)","proof":["not p.divides(n.factorial + 1)"]}
{"goal":"false","proof":["not p.divides(n.factorial + 1) or not p.divides(n.factorial) or 1 = p"]}
{"goal":"not p <= n","proof":[]}
{"goal":"p > n","proof":["n < p or p < n or p = n","p > n = n < p","not n < p","not p < n or p <= n","p != n or p <= n","p != n","not p < n","p < n"]}
{"goal":"exists_infinite_primes","proof":["not p > n or not p.is_prime","not p.is_prime"]}
