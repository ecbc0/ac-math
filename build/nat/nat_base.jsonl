{"goal":"add_zero","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not add_zero(a) or 0 + a = a","not add_zero(s0(add_zero)) or 0 + s0(add_zero) = s0(add_zero)","0 + 0 != 0 or 0 + 0 != 0 or add_zero(0)","s0(add_zero).suc + 0 != s0(add_zero).suc or 0 + s0(add_zero).suc != s0(add_zero).suc or add_zero(s0(add_zero).suc)","s0(add_zero).suc != s0(add_zero).suc or 0 + s0(add_zero).suc = (0 + s0(add_zero)).suc","not add_zero(s0(add_zero).suc) or not add_zero(0) or add_zero(a)","not add_zero(0) or add_zero(s0(add_zero)) or add_zero(a)","0 != 0 or 0 + 0 = 0","0 != 0 or a + 0 = a","0 != 0 or s0(add_zero).suc + 0 = s0(add_zero).suc","0 + 0 = 0","a + 0 = a","s0(add_zero).suc + 0 = s0(add_zero).suc","0 + a != a","not add_zero(a)","add_zero(0)","0 + s0(add_zero).suc = (0 + s0(add_zero)).suc","add_zero(s0(add_zero))","not add_zero(s0(add_zero).suc)","0 + s0(add_zero) = s0(add_zero)","0 + s0(add_zero).suc != s0(add_zero).suc"]}
{"goal":"1 + 0.suc = 1.suc","proof":["0.suc != 0.suc or 1 + 0.suc = (1 + 0).suc","1 + 0 = 1","1 + 0.suc != (1 + 0).suc"]}
{"goal":"one_plus_one","proof":["1 + 1 != 1.suc"]}
{"goal":"a + 0.suc = (a + 0).suc","proof":["0.suc != 0.suc or a + 0.suc = (a + 0).suc"]}
{"goal":"add_one_right","proof":["a + 0 = a","a + 0.suc = a.suc"]}
{"goal":"f(0)","proof":["n1 + 0.suc != n1.suc + 0 or f(0)","n1 + 1 = n1.suc","n1.suc + 0 = n1.suc","n1 + 0.suc != n1.suc + 0"]}
{"goal":"n1 + m.suc.suc = (n1 + m.suc).suc","proof":["m.suc.suc != m.suc.suc or n1 + m.suc.suc = (n1 + m.suc).suc"]}
{"goal":"(n1 + m.suc).suc = (n1.suc + m).suc","proof":["not f(m) or n1 + m.suc = n1.suc + m","n1 + m.suc != n1.suc + m","n1 + m.suc = n1.suc + m"]}
{"goal":"n1.suc + m.suc = (n1.suc + m).suc","proof":["m.suc != m.suc or n1.suc + m.suc = (n1.suc + m).suc"]}
{"goal":"f(m.suc)","proof":["n1 + m.suc.suc != n1.suc + m.suc or f(m.suc)","n1 + m.suc.suc = (n1.suc + m).suc","n1 + m.suc.suc != n1.suc + m.suc","n1 + m.suc.suc = n1.suc + m.suc"]}
{"goal":"f(n2)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(0) or f(n2)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n2)","not f(s0(f))","f(s0(f))"]}
{"goal":"add_suc","proof":["not f(n2) or n1 + n2.suc = n1.suc + n2"]}
{"goal":"0.suc + a = (0 + a).suc","proof":["0 + a + 1 = (0 + a).suc","a + 1 = a.suc","0 + a = a","0 + a.suc = a.suc"]}
{"goal":"add_one_left","proof":["0 + 1 = 0.suc","0 + 1 = 1","0 + a.suc = a.suc"]}
{"goal":"a + 0 = 0 + a","proof":["0 != 0 or a + 0 = a","0 + a = a","a + 0 != a"]}
{"goal":"add_comm(a, 0)","proof":["a + 0 != 0 + a or add_comm(a, 0)"]}
{"goal":"f(0)","proof":["add_comm(a, 0) = f(0)"]}
{"goal":"add_comm(a, n)","proof":["add_comm(a, n) = f(n)"]}
{"goal":"a + n.suc = (a + n).suc","proof":["n.suc != n.suc or a + n.suc = (a + n).suc"]}
{"goal":"(a + n).suc = (n + a).suc","proof":["not add_comm(a, n) or n + a = a + n","n + a != a + n","n + a = a + n"]}
{"goal":"n + a.suc = (n + a).suc","proof":["a.suc != a.suc or n + a.suc = (n + a).suc"]}
{"goal":"n + a.suc = n.suc + a","proof":[]}
{"goal":"add_comm(a, n.suc)","proof":["a + n.suc != n.suc + a or add_comm(a, n.suc)","a + n.suc != n.suc + a"]}
{"goal":"f(n.suc)","proof":["add_comm(a, n.suc) = f(n.suc)"]}
{"goal":"add_comm(a, b)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","add_comm(a, b) = f(b)","not f(b)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","not f(s0(f))","f(s0(f))"]}
{"goal":"add_comm","proof":["not add_comm(a, b) or b + a = a + b"]}
{"goal":"add_assoc_one","proof":["a + b.suc = (a + b).suc","a + b + 1 = 1 + (a + b)","b + 1 = 1 + b","1 + (a + b) = (a + b).suc","1 + b = b.suc"]}
{"goal":"f(0)","proof":["add_assoc(a, b, 0) = f(0)","a + (b + 0) != a + b + 0 or add_assoc(a, b, 0)","not add_assoc(a, b, 0)","a + b + 0 = a + b","b + 0 = b","a + (b + 0) != a + b + 0"]}
{"goal":"f(n + 1)","proof":["add_assoc(a, b, n + 1) = f(n + 1)","add_assoc(a, b, n) = f(n)","a + (b + n.suc) != a + b + n.suc or add_assoc(a, b, n.suc)","not add_assoc(a, b, n) or a + (b + n) = a + b + n","a + (b + n + 1) = a + (b + n) + 1","a + b + (n + 1) = a + b + n + 1","b + (n + 1) = b + n + 1","n + 1 = 1 + n","not add_assoc(a, b, n + 1)","1 + n = n.suc","n + 1 = n.suc","not add_assoc(a, b, n.suc)","add_assoc(a, b, n)","a + (b + n.suc) != a + b + n.suc","a + (b + n) = a + b + n"]}
{"goal":"add_assoc(a, b, c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","add_assoc(a, b, c) = f(c)","not f(c)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"add_assoc","proof":["not add_assoc(a, b, c) or a + (b + c) = a + b + c"]}
{"goal":"mul_zero","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not mul_zero(a) or 0 ⋅ a = 0","not mul_zero(s0(mul_zero)) or 0 ⋅ s0(mul_zero) = 0","0 ⋅ 0 != 0 or 0 ⋅ 0 != 0 or mul_zero(0)","s0(mul_zero).suc ⋅ 0 != 0 or 0 ⋅ s0(mul_zero).suc != 0 or mul_zero(s0(mul_zero).suc)","s0(mul_zero).suc != s0(mul_zero).suc or 0 ⋅ s0(mul_zero) + 0 = 0 ⋅ s0(mul_zero).suc","not mul_zero(s0(mul_zero).suc) or not mul_zero(0) or mul_zero(a)","not mul_zero(0) or mul_zero(s0(mul_zero)) or mul_zero(a)","0 != 0 or 0 ⋅ 0 = 0","0 != 0 or a ⋅ 0 = 0","0 != 0 or s0(mul_zero).suc ⋅ 0 = 0","0 + 0 = 0","0 ⋅ 0 = 0","a ⋅ 0 = 0","s0(mul_zero).suc ⋅ 0 = 0","0 ⋅ a != 0","not mul_zero(a)","mul_zero(0)","0 ⋅ s0(mul_zero) + 0 = 0 ⋅ s0(mul_zero).suc","mul_zero(s0(mul_zero))","not mul_zero(s0(mul_zero).suc)","0 ⋅ s0(mul_zero) = 0","0 ⋅ s0(mul_zero).suc != 0"]}
{"goal":"mul_suc_right","proof":["b + 1 != b.suc or a ⋅ (b + 1) = a ⋅ b + a","b + 1 != b.suc","b + 1 = 1 + b","1 + b = b.suc"]}
{"goal":"f(0)","proof":["(a + 1) ⋅ 0 != a ⋅ 0 + 0 or f(0)","(a + 1) ⋅ 0 = 0","a ⋅ 0 = 0","a ⋅ 0 + 0 = a ⋅ 0","(a + 1) ⋅ 0 != a ⋅ 0 + 0"]}
{"goal":"(a + 1) ⋅ (n + 1) = (a + 1) ⋅ n + (a + 1)","proof":["(a + 1) ⋅ n + (a + 1) = (a + 1) ⋅ (n + 1)"]}
{"goal":"(a + 1) ⋅ n + (a + 1) = a ⋅ n + n + (a + 1)","proof":["not f(n) or (a + 1) ⋅ n = a ⋅ n + n","(a + 1) ⋅ n != a ⋅ n + n","(a + 1) ⋅ n = a ⋅ n + n"]}
{"goal":"a ⋅ n + a + (n + 1) = a ⋅ (n + 1) + (n + 1)","proof":["a ⋅ (n + 1) != a ⋅ n + a","a ⋅ (n + 1) = a ⋅ n + a"]}
{"goal":"f(n + 1)","proof":["a ⋅ (n + 1) + (n + 1) != (a + 1) ⋅ (n + 1) or f(n + 1)","not f(n) or (a + 1) ⋅ n = a ⋅ n + n","a ⋅ (n + 1) = a ⋅ n + a","n + (a ⋅ n + (a + 1)) = n + a ⋅ n + (a + 1)","a.suc != a.suc or a ⋅ n + a.suc = (a ⋅ n + a).suc","n + (a ⋅ (n + 1)).suc = n.suc + a ⋅ (n + 1)","n + 1 + (a ⋅ n + a) = a ⋅ n + a + (n + 1)","n + 1 = 1 + n","n + a ⋅ n = a ⋅ n + n","1 + n = n.suc","a + 1 = a.suc","a ⋅ n + a.suc = (a ⋅ n + a).suc","a ⋅ (n + 1) + (n + 1) != (a + 1) ⋅ (n + 1)","(a + 1) ⋅ n = a ⋅ n + n"]}
{"goal":"mul_suc_left","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(b) or (a + 1) ⋅ b = a ⋅ b + b","not f(b)","not f(s0(f).suc) or not f(0) or f(b)","not f(0) or f(s0(f)) or f(b)","s0(f) + 1 = s0(f).suc","f(s0(f)) or f(b)","f(s0(f))","not f(s0(f).suc) or f(b)","not f(s0(f).suc)","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"a ⋅ 0 = 0 ⋅ a","proof":["0 != 0 or a ⋅ 0 = 0","0 ⋅ a = 0","a ⋅ 0 != 0"]}
{"goal":"mul_comm(a, 0)","proof":["a ⋅ 0 != 0 ⋅ a or mul_comm(a, 0)"]}
{"goal":"f(0)","proof":["mul_comm(a, 0) = f(0)","a * 0 != 0 * a or mul_comm(a, 0)","not mul_comm(a, 0)","0 * a = 0","a * 0 = 0","a * 0 != 0 * a"]}
{"goal":"a ⋅ (n + 1) = a ⋅ n + a","proof":["a ⋅ (n + 1) = a ⋅ n + a"]}
{"goal":"a ⋅ n + a = n ⋅ a + a","proof":["mul_comm(a, n) = f(n)","not mul_comm(a, n) or n ⋅ a = a ⋅ n","n ⋅ a != a ⋅ n","mul_comm(a, n)","not mul_comm(a, n)"]}
{"goal":"(n + 1) ⋅ a = n ⋅ a + a","proof":["(n + 1) ⋅ a = n ⋅ a + a"]}
{"goal":"f(n + 1)","proof":["mul_comm(a, n + 1) = f(n + 1)","a ⋅ (n + 1) != (n + 1) ⋅ a or mul_comm(a, n + 1)","a ⋅ (n + 1) = a ⋅ n + a","not mul_comm(a, n + 1)","(n + 1) ⋅ a = a ⋅ n + a","a ⋅ (n + 1) != (n + 1) ⋅ a","a ⋅ (n + 1) = (n + 1) ⋅ a"]}
{"goal":"f(b)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"mul_comm(a, b)","proof":["mul_comm(a, b) = f(b)","not f(b)","let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"mul_comm","proof":["not mul_comm(a, b) or b ⋅ a = a ⋅ b"]}
{"goal":"one_mul_one","proof":["(0 + 1) ⋅ 1 = 0 ⋅ 1 + 1","0 ⋅ 1 = 0","0 + 1 = 1","(0 + 1) ⋅ 1 != 1","0 ⋅ 1 + 1 != 1"]}
{"goal":"f(0)","proof":["distrib_right(a, b, 0) = f(0)","a ⋅ b + a ⋅ 0 != a ⋅ (b + 0) or distrib_right(a, b, 0)","not distrib_right(a, b, 0)","a ⋅ 0 = 0","a ⋅ b + 0 = a ⋅ b","b + 0 = b","a ⋅ b + a ⋅ 0 != a ⋅ (b + 0)"]}
{"goal":"distrib_right(a, b, x)","proof":["distrib_right(a, b, x) = f(x)"]}
{"goal":"a ⋅ (b + x) = a ⋅ b + a ⋅ x","proof":["not distrib_right(a, b, x) or a ⋅ b + a ⋅ x = a ⋅ (b + x)"]}
{"goal":"distrib_right(a, b, x + 1)","proof":["a ⋅ b + a ⋅ (x + 1) != a ⋅ (b + (x + 1)) or distrib_right(a, b, x + 1)","a ⋅ (x + 1) = a ⋅ x + a","a ⋅ b + (a ⋅ x + a) = a ⋅ b + a ⋅ x + a","b + (x + 1) = b + x + 1","a ⋅ b + a ⋅ (x + 1) != a ⋅ (b + (x + 1))"]}
{"goal":"distrib_right(a, b, c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","distrib_right(a, b, c) = f(c)","distrib_right(a, b, s0(f) + 1) = f(s0(f) + 1)","not f(c)","not f(s0(f)) or distrib_right(a, b, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","distrib_right(a, b, s0(f) + 1)","not distrib_right(a, b, s0(f) + 1)"]}
{"goal":"distrib_right","proof":["not distrib_right(a, b, c) or a ⋅ b + a ⋅ c = a ⋅ (b + c)"]}
{"goal":"distrib_left","proof":["c ⋅ a + c ⋅ b = c ⋅ (a + b)","c ⋅ (a + b) = (a + b) ⋅ c","c ⋅ a = a ⋅ c","c ⋅ b = b ⋅ c"]}
{"goal":"f(0)","proof":["mul_assoc(a, b, 0) = f(0)","a ⋅ (b ⋅ 0) != a ⋅ b ⋅ 0 or mul_assoc(a, b, 0)","not mul_assoc(a, b, 0)","b ⋅ 0 != 0 or a ⋅ (b ⋅ 0) = 0","a ⋅ b ⋅ 0 = 0","b ⋅ 0 = 0","a ⋅ (b ⋅ 0) != a ⋅ b ⋅ 0","a ⋅ (b ⋅ 0) != 0"]}
{"goal":"a ⋅ b ⋅ x = a ⋅ (b ⋅ x)","proof":["mul_assoc(a, b, x) = f(x)","not mul_assoc(a, b, x) or a ⋅ (b ⋅ x) = a ⋅ b ⋅ x","mul_assoc(a, b, x)","not mul_assoc(a, b, x)"]}
{"goal":"f(x + 1)","proof":["mul_assoc(a, b, x + 1) = f(x + 1)","a ⋅ (b ⋅ (x + 1)) != a ⋅ b ⋅ (x + 1) or mul_assoc(a, b, x + 1)","a ⋅ (b ⋅ x) + a ⋅ b = a ⋅ (b ⋅ x + b)","b ⋅ (x + 1) = b ⋅ x + b","not mul_assoc(a, b, x + 1)","a ⋅ (b ⋅ x) + a ⋅ b = a ⋅ b ⋅ (x + 1)","a ⋅ b ⋅ (x + 1) = a ⋅ (b ⋅ x + b)","a ⋅ (b ⋅ (x + 1)) != a ⋅ b ⋅ (x + 1)","a ⋅ (b ⋅ (x + 1)) = a ⋅ b ⋅ (x + 1)"]}
{"goal":"mul_assoc(a, b, c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","mul_assoc(a, b, c) = f(c)","not f(c)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"mul_assoc","proof":["not mul_assoc(a, b, c) or a ⋅ (b ⋅ c) = a ⋅ b ⋅ c"]}
{"goal":"a ⋅ 0 + a = a","proof":["a + a ⋅ 0 = a ⋅ 0 + a","a ⋅ 0 != 0 or a + a ⋅ 0 = a","a + a ⋅ 0 != a","a ⋅ 0 = 0"]}
{"goal":"mul_one_right","proof":["(0 + 1) ⋅ a = 0 ⋅ a + a","a ⋅ 0 = 0 ⋅ a","a ⋅ 1 = 1 ⋅ a","0 + 1 = 1"]}
{"goal":"mul_one_left","proof":["a ⋅ 1 = 1 ⋅ a","a ⋅ 1 != a","a ⋅ 1 = a"]}
{"goal":"suc_ne(0)","proof":["0.suc = 0 or suc_ne(0)","0.suc = 0","0.suc != 0"]}
{"goal":"n.suc != n","proof":["n.suc != n or not suc_ne(n)"]}
{"goal":"n.suc.suc != n.suc","proof":["n.suc.suc != n.suc or n.suc = n"]}
{"goal":"suc_ne(n.suc)","proof":["n.suc.suc = n.suc or suc_ne(n.suc)"]}
{"goal":"suc_ne(a)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not suc_ne(s0(suc_ne)) or suc_ne(s0(suc_ne).suc)","not suc_ne(s0(suc_ne).suc) or not suc_ne(0) or suc_ne(a)","not suc_ne(s0(suc_ne).suc)","not suc_ne(0) or suc_ne(s0(suc_ne)) or suc_ne(a)","not suc_ne(s0(suc_ne))","suc_ne(s0(suc_ne))"]}
{"goal":"suc_ne","proof":["a.suc != a or not suc_ne(a)"]}
{"goal":"a.suc != b.suc","proof":["b.suc != a.suc or b = a"]}
{"goal":"suc_cancels","proof":["a + 1 = 1 + a","b + 1 = 1 + b","1 + a = a.suc","1 + b = b.suc"]}
{"goal":"f(0)","proof":["add_identity_left(a, 0) = f(0)","0 != a or add_identity_left(a, 0)","a + 0 = 0 or add_identity_left(a, 0)","not add_identity_left(a, 0)","a + 0 = a","0 != a","a + 0 = 0","a + 0 != 0"]}
{"goal":"f(x + 1)","proof":["add_identity_left(a, x + 1) = f(x + 1)","add_identity_left(a, x) = f(x)","0 != a or add_identity_left(a, x + 1)","a + x.suc = x.suc or add_identity_left(a, x.suc)","a + x != x or not add_identity_left(a, x) or 0 = a","x.suc != x.suc or a + x.suc = (a + x).suc","not add_identity_left(a, x + 1)","(a + x).suc != x.suc or a + x = x","x + 1 = x.suc","not add_identity_left(a, x.suc)","add_identity_left(a, x)","a + x.suc = (a + x).suc","0 != a","a + x != x","a + x.suc = x.suc","(a + x).suc != x.suc","(a + x).suc = x.suc"]}
{"goal":"add_identity_left(a, b)","proof":["add_identity_left(a, b) = f(b)","not f(b)","let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"add_identity_left","proof":["a + b != b or not add_identity_left(a, b) or 0 = a"]}
{"goal":"add_identity_right","proof":["a + b != b or 0 = a","a + b != b","a + b = b + a"]}
{"goal":"f(0)","proof":["add_cancels_right(a, b, 0) = f(0)","a + 0 != a or add_cancels_right(a, a + 0, 0)","b + 0 = a + 0 or add_cancels_right(a, b, 0)","not add_cancels_right(a, b, 0)","a + 0 = a","b + 0 = b","add_cancels_right(a, a + 0, 0)","not add_cancels_right(a, b + 0, 0)","b + 0 = a + 0"]}
{"goal":"add_cancels_right(a, b, n)","proof":["add_cancels_right(a, b, n) = f(n)"]}
{"goal":"add_cancels_right(a, b, n + 1)","proof":["b != a or add_cancels_right(a, b, n + 1)","b + (n + 1) = a + (n + 1) or add_cancels_right(a, b, n + 1)","b + n != a + n or not add_cancels_right(a, b, n) or b = a","b != a","a + (n + 1) = a + n + 1","b + (n + 1) = b + n + 1","b + n != a + n","b + (n + 1) = a + (n + 1)","b + (n + 1) = a + n + 1","b + n + 1 != a + n + 1","b + n + 1 = a + n + 1"]}
{"goal":"add_cancels_right(a, b, c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","add_cancels_right(a, b, c) = f(c)","add_cancels_right(a, b, s0(f) + 1) = f(s0(f) + 1)","not f(c)","not f(s0(f)) or add_cancels_right(a, b, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","add_cancels_right(a, b, s0(f) + 1)","not add_cancels_right(a, b, s0(f) + 1)"]}
{"goal":"add_cancels_right","proof":["b + c != a + c or not add_cancels_right(a, b, c) or b = a"]}
{"goal":"add_cancels_left","proof":["b + c != a + c or b = a","a + c = c + a","b + c = c + b","b + c != a + c","b + c = c + a"]}
{"goal":"suc_positive","proof":["n.suc != 0"]}
{"goal":"exists(k0: ℕ) { a = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","s0(a) + 1 != a","s0(a).suc = a or 0 = a","s0(a) + 1 = s0(a).suc","s0(a).suc = a"]}
{"goal":"a + b = (n + b).suc","proof":["1 + n + b = 1 + (n + b)","n + 1 = 1 + n","n + b = b + n","1 + (b + n) = (b + n).suc"]}
{"goal":"a + b != 0","proof":["(n + b).suc = 0","(n + b).suc != 0"]}
{"goal":"exists(k0: ℕ) { b = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","s0(b) + 1 != b","s0(b).suc = b or 0 = b","s0(b) + 1 = s0(b).suc","s0(b).suc = b"]}
{"goal":"a + b = (a + n).suc","proof":["n.suc != b or (a + n).suc = a + b","n.suc != b","n + 1 = 1 + n","1 + n = b","1 + n = n.suc"]}
{"goal":"a + b != 0","proof":["0 + b = 0","0 + b != 0 or 0 = b"]}
{"goal":"nonzero_add_to_nonzero","proof":["0 + b = 0","0 + b != 0 or 0 = b"]}
{"goal":"add_to_zero","proof":["a + b != 0 or 0 = b","a + b != 0 or 0 = a","0 = a","0 = b","0 != b"]}
{"goal":"non_zero_gte_one","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","1 + s0(n) != n or 1 < n or s0(n) = 0","n >= 1 = 1 <= n","not 1 <= n","not 1 < n or 1 <= n","not 1 < n","s0(n).suc = n or 0 = n","0.suc != n or 0.suc <= n","1 + s0(n) = s0(n).suc","not 0.suc <= n","s0(n).suc = n","0.suc != n","1 + s0(n) = n","s0(n) = 0"]}
{"goal":"exists(k0: ℕ) { a + k0 = b and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b or s0(a, b) = 0","not a < b or a + s0(a, b) = b","not a < b or s0(a, b) != 0","s0(a, b) != 0","a + s0(a, b) = b","a + s0(a, b) != b"]}
{"goal":"exists(k0: ℕ) { b + k0 = c and n1 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b + s0(b, c) != c or n1 = 0","b + s0(b, c) != c","not b < c or b + s0(b, c) = c"]}
{"goal":"a + (n1 + n2) = c","proof":["a + (n1 + n2) = a + n1 + n2"]}
{"goal":"a < c","proof":["a + (n1 + n2) != c or a < c or n1 + n2 = 0","n1 + n2 = 0","n1 + n2 != 0 or n1 = 0"]}
{"goal":"lt_trans","proof":["a + (n1 + n2) != c or a < c or n1 + n2 = 0","n1 + n2 = 0","let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","s0(n1).suc + n2 = (s0(n1) + n2).suc","s0(n1).suc = n1 or n1 = 0","(s0(n1) + n2).suc != 0","s0(n1).suc = n1","s0(n1).suc + n2 = 0"]}
{"goal":"nat_is_transitive","proof":["let (s0: (ℕ, ℕ) -> Bool -> ℕ, s1: (ℕ, ℕ) -> Bool -> ℕ, s2: (ℕ, ℕ) -> Bool -> ℕ) satisfy { forall(x0: (ℕ, ℕ) -> Bool, x1: ℕ, x2: ℕ, x3: ℕ) { not is_transitive[ℕ](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (ℕ, ℕ) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[ℕ](x4) } and forall(x5: (ℕ, ℕ) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[ℕ](x5) } and forall(x6: (ℕ, ℕ) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[ℕ](x6) } }","not s0(ℕ.lt) < s1(ℕ.lt) or not s1(ℕ.lt) < 0 + s2(ℕ.lt) or s0(ℕ.lt) < 0 + s2(ℕ.lt)","not s0(ℕ.lt) < s2(ℕ.lt) or is_transitive[ℕ](ℕ.lt)","not s0(ℕ.lt) < s2(ℕ.lt)","s1(ℕ.lt) < s2(ℕ.lt) or is_transitive[ℕ](ℕ.lt)","s1(ℕ.lt) < s2(ℕ.lt)","s0(ℕ.lt) < s1(ℕ.lt) or is_transitive[ℕ](ℕ.lt)","s0(ℕ.lt) < s1(ℕ.lt)","0 + s2(ℕ.lt) = s2(ℕ.lt)","s1(ℕ.lt) < 0 + s2(ℕ.lt)","not s0(ℕ.lt) < 0 + s2(ℕ.lt)","not s1(ℕ.lt) < 0 + s2(ℕ.lt) or s0(ℕ.lt) < 0 + s2(ℕ.lt)"]}
{"goal":"exists(k0: ℕ) { k0 != 0 and a + k0 = a }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, a) != a or s0(a, a) = 0","not a < a or a + s0(a, a) = a","not a < a or s0(a, a) != 0","s0(a, a) != 0","a + s0(a, a) = a","a + s0(a, a) != a"]}
{"goal":"not function(x0: ℕ, x1: ℕ) { x1 + x0 = x1 implies x0 = 0 }(a, a + n)","proof":["a + n != a or 0 = n"]}
{"goal":"false","proof":["a + n != a or 0 = n"]}
{"goal":"lt_and_eq_is_different_thing","proof":[]}
{"goal":"lt_acyclic","proof":["not a < b or not b < a or a < a","not a < b or a < a","a < a","not a < a"]}
{"goal":"nat_is_acyclic","proof":["let (s0: (ℕ, ℕ) -> Bool -> ℕ, s1: (ℕ, ℕ) -> Bool -> ℕ) satisfy { forall(x0: (ℕ, ℕ) -> Bool, x1: ℕ, x2: ℕ) { not is_acyclic[ℕ](x0) or not x0(x1, x2) or not x0(x2, x1) } and forall(x3: (ℕ, ℕ) -> Bool) { x3(s0(x3), s1(x3)) or is_acyclic[ℕ](x3) } and forall(x4: (ℕ, ℕ) -> Bool) { x4(s1(x4), s0(x4)) or is_acyclic[ℕ](x4) } }","s1(ℕ.lt) < s0(ℕ.lt) or is_acyclic[ℕ](ℕ.lt)","s1(ℕ.lt) < s0(ℕ.lt)","s0(ℕ.lt) < s1(ℕ.lt) or is_acyclic[ℕ](ℕ.lt)","s0(ℕ.lt) < s1(ℕ.lt)","not s0(ℕ.lt) < s1(ℕ.lt) or not s1(ℕ.lt) < s0(ℕ.lt)"]}
{"goal":"is_acyclic[ℕ](ℕ.lt) and is_transitive[ℕ](ℕ.lt)","proof":["not is_transitive[ℕ](ℕ.lt)"]}
{"goal":"exists(k0: ℕ) { a + k0 = 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 0 != 0","a + s0(a, 0) != 0","not a < 0 or a + s0(a, 0) = 0","not a < 0","not a <= 0 or a < 0 or 0 = a","0 = a","a + 0 = a"]}
{"goal":"only_zero_lte_zero","proof":["0 + a != a or 0 < a or 0 = a","not a <= 0 or a < 0 or 0 = a","a < 0","not a < 0 or not 0 < a","0 + a = a","0 + a != a or 0 < a","not 0 < a","0 < a"]}
{"goal":"a != 0","proof":["0 < 0","not 0 < 0 or not 0 < 0"]}
{"goal":"false","proof":["not a < 0 or a <= 0","not a <= 0 or 0 = a","a <= 0","not a <= 0"]}
{"goal":"not_lt_zero","proof":[]}
{"goal":"zero_or_suc","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","s0(a) + 1 != a","s0(a).suc = a or 0 = a","s0(a).suc = a","s0(a) + 1 = s0(a).suc"]}
{"goal":"exists(k0: ℕ) { a + 1 + k0 = b + 1 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 1 + s0(a + 1, b + 1) != b + 1","not a + 1 < b + 1 or a + 1 + s0(a + 1, b + 1) = b + 1"]}
{"goal":"a + n = b","proof":["1 + a + n = 1 + (a + n)","a + 1 = 1 + a","a + n + 1 = 1 + (a + n)"]}
{"goal":"lt_cancel_suc","proof":["a + n != b or a < b or n = 0","n = 0","not b + 1 < a + 1 or not a + 1 < b + 1","n + (a + 1) = a + 1 + n","a + 1 = a.suc","0 + a.suc = a.suc","not b + 1 < a + 1"]}
{"goal":"lte_cancel_suc","proof":["not a + 1 < b + 1 or a < b","not a + 1 <= b + 1 or a + 1 < b + 1 or b + 1 = a + 1","b + 1 != a + 1 or b = a","not a < b or a <= b","not a < b","b != a or a <= b","b != a","b + 1 != a + 1","not a + 1 < b + 1","a + 1 < b + 1"]}
{"goal":"lt_and_lte","proof":["not a < b or not b < c or a < c","not b <= c or b < c or c = b","not b < c or not a < b","not b < c","c = b"]}
{"goal":"lte_and_lt","proof":["not a < b or not b < c or a < c","not a <= b or a < b or b = a","not b < c or not a < b","not a < b","b = a"]}
{"goal":"lte_trans","proof":["not b <= c or not a < b or a < c","not a <= b or a < b or b = a","not a < c or a <= c","not a < c","a < b or b = a","not a < b or a < c","not a < b","b = a"]}
{"goal":"exists(k0: ℕ) { a + k0 = b and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b or s0(a, b) = 0","not a < b or a + s0(a, b) = b","not a < b or s0(a, b) != 0","s0(a, b) != 0","a + s0(a, b) = b","a + s0(a, b) != b"]}
{"goal":"exists(k0: ℕ) { n = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(n) + 1 != n","s0(n) + 1 = n or n = 0"]}
{"goal":"a + 1 = b","proof":["0 + 1 = n","a + 1 != a + n","1 != n","0 + 1 = 1"]}
{"goal":"m != 0","proof":[]}
{"goal":"a + m + 1 = b","proof":["a + (m + 1) = a + m + 1"]}
{"goal":"a + 1 < b","proof":["1 + a + m = 1 + (a + m)","a + 1 + m != b or a + 1 < b or m = 0","a + 1 = 1 + a","a + m + 1 = 1 + (a + m)","a + 1 + m != b or m = 0","a + 1 + m != b"]}
{"goal":"a + 1 <= b","proof":["not a + 1 < b or a + 1 <= b","not a + 1 < b","m = 0","a + 1 != b or a + 1 <= b","a + 1 = b","a + 1 != b"]}
{"goal":"lt_suc_left","proof":["not a + 1 < b or a + 1 <= b","not a + 1 < b","m = 0","a + 1 != b or a + 1 <= b","a + 1 = b","a + 1 != b"]}
{"goal":"exists(k0: ℕ) { a + k0 = b + 1 and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b + 1) != b + 1 or s0(a, b + 1) = 0","not a < b + 1 or a + s0(a, b + 1) = b + 1","not a < b + 1 or s0(a, b + 1) != 0","s0(a, b + 1) != 0","a + s0(a, b + 1) = b + 1","a + s0(a, b + 1) != b + 1"]}
{"goal":"exists(k0: ℕ) { n = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(n) + 1 != n","s0(n) + 1 = n or n = 0"]}
{"goal":"a + m = b","proof":["a + m.suc = (a + m).suc","b + 1 = 1 + b","m + 1 = 1 + m","(a + m).suc != b.suc or a + m = b","(a + m).suc != b.suc","1 + b = b.suc","1 + m = m.suc"]}
{"goal":"a = b","proof":["a + m != a","a + 0 != a","0 != 0 or a + 0 = a"]}
{"goal":"a < b","proof":["a + m != b or a < b or m = 0"]}
{"goal":"lt_suc_right","proof":["not a + 1 <= b + 1 or a <= b","not a < b + 1 or a + 1 <= b + 1","not a + 1 <= b + 1","a + 1 <= b + 1"]}
{"goal":"exists(k0: ℕ) { a + k0 = b }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b","not a < b or a + s0(a, b) = b"]}
{"goal":"a + c + n = b + c","proof":["c + (a + n) = c + a + n","c + a = a + c","c + b = b + c"]}
{"goal":"lt_add_left","proof":["a + c + n != b + c or a + c < b + c or n = 0","n = 0","not b < a or not a < b","a + 0 = 0 + a","0 + a = a","not b < a"]}
{"goal":"0 = a or 0 < a","proof":["0 + a != a or 0 < a or 0 = a","0 + a != a or 0 = a","0 + a != a","0 + a = a"]}
{"goal":"f(0)","proof":["trichotomy(a, 0) = f(0)","0 != a or trichotomy(a, 0)","not 0 < a or trichotomy(a, 0)","not trichotomy(a, 0)","0 != a","not 0 < a","0 < a"]}
{"goal":"trichotomy(a, x)","proof":["trichotomy(a, x) = f(x)"]}
{"goal":"a < x or x < a or a = x","proof":["not trichotomy(a, x) or a < x or x < a or x = a"]}
{"goal":"a < x + 1","proof":["not a <= x or not x < x + 1 or a < x + 1","x + 1 != x + 1 or x < x + 1 or 1 = 0","0.suc != 0","not x < x + 1 or not a <= x","not x < x + 1","x < x + 1 or 1 = 0","1 = 0"]}
{"goal":"trichotomy(a, x + 1)","proof":["not a < x + 1 or trichotomy(a, x + 1)"]}
{"goal":"x + 1 <= a","proof":["not x < a or x + 1 <= a"]}
{"goal":"trichotomy(a, x + 1)","proof":["x + 1 != a or trichotomy(a, x + 1)","not x + 1 < a or trichotomy(a, x + 1)","x + 1 != a","not x + 1 < a","not x + 1 <= a or x + 1 < a or x + 1 = a"]}
{"goal":"trichotomy(a, x + 1)","proof":["not a < x or a <= x","not a < x","x = a","x != a or a <= x"]}
{"goal":"trichotomy(a, b)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","trichotomy(a, b) = f(b)","trichotomy(a, s0(f) + 1) = f(s0(f) + 1)","not f(b)","not f(s0(f)) or trichotomy(a, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","trichotomy(a, s0(f) + 1)","not trichotomy(a, s0(f) + 1)"]}
{"goal":"trichotomy","proof":["not trichotomy(a, b) or a < b or b < a or b = a"]}
{"goal":"nat_is_trichotomy","proof":["let (s0: (ℕ, ℕ) -> Bool -> ℕ, s1: (ℕ, ℕ) -> Bool -> ℕ) satisfy { forall(x0: (ℕ, ℕ) -> Bool, x1: ℕ, x2: ℕ) { not is_trichotomy[ℕ](x0) or x1 = x2 or x0(x1, x2) or x0(x2, x1) } and forall(x3: (ℕ, ℕ) -> Bool) { not x3(s0(x3), s1(x3)) or is_trichotomy[ℕ](x3) } and forall(x4: (ℕ, ℕ) -> Bool) { not x4(s1(x4), s0(x4)) or is_trichotomy[ℕ](x4) } and forall(x5: (ℕ, ℕ) -> Bool) { s1(x5) != s0(x5) or is_trichotomy[ℕ](x5) } }","s1(ℕ.lt) < s0(ℕ.lt) or s0(ℕ.lt) < s1(ℕ.lt) or s1(ℕ.lt) = s0(ℕ.lt)","not s1(ℕ.lt) < s0(ℕ.lt) or is_trichotomy[ℕ](ℕ.lt)","not s1(ℕ.lt) < s0(ℕ.lt)","not s0(ℕ.lt) < s1(ℕ.lt) or is_trichotomy[ℕ](ℕ.lt)","not s0(ℕ.lt) < s1(ℕ.lt)","s1(ℕ.lt) != s0(ℕ.lt) or is_trichotomy[ℕ](ℕ.lt)","s1(ℕ.lt) = s0(ℕ.lt)","s1(ℕ.lt) != s0(ℕ.lt)"]}
{"goal":"forall(x0: ℕ, x1: ℕ) { Partial_Order.lt[ℕ](x0, x1) or Partial_Order.lt[ℕ](x1, x0) or x0 = x1 }","proof":["let (s0: ℕ, s1: ℕ) satisfy { not s0 < s1 and not s1 < s0 and s1 != s0 }","s0 < s1 or s1 < s0 or s1 = s0"]}
{"goal":"a < b implies a + 1 <= b","proof":["not a < b or a + 1 <= b"]}
{"goal":"a + 1 > b","proof":["a + 0.suc != a + 0.suc or a < a + 0.suc or 0.suc = 0","a + 0.suc > a = a < a + 0.suc","0.suc != 0","not a + 0.suc > b","not a + 0.suc > a","not a < a + 0.suc","a < a + 0.suc or 0.suc = 0"]}
{"goal":"a + 1 > b","proof":["not a <= a + 1 or not b < a or b < a + 1","not b < a or not a < a + 1 or b < a + 1","a + 1 != a + 1 or a < a + 1 or 1 = 0","a + 1 > b = b < a + 1","a > b = b < a","not b < a + 1","b < a","1 != 0 or a + 1 = a","a + 1 != a or a <= a + 1","a < a + 1 or 1 = 0","not a < a + 1 or not b < a","not a < a + 1","not a <= a + 1 or not b < a","not a <= a + 1","a + 1 != a","1 = 0","1 != 0"]}
{"goal":"lt_suc_left_augment","proof":["a + 1 <= b or a < b","not a + 1 <= b or not a < b","not a < b","a + 1 <= b","not a + 1 <= b or not b < a + 1 or b < b","b < a or a < b or b = a","a + 1 > b = b < a + 1","a > b = b < a","not b < b","b < a or b = a","not b < a + 1 or b < b","not b < a + 1","not a + 1 > b","b != a","not a > b","b < a","not b < a"]}
{"goal":"a < b + 1 implies a <= b","proof":["not a + 1 <= b + 1 or a <= b","a + 1 <= b + 1 = a < b + 1","not a + 1 <= b + 1","a + 1 <= b + 1"]}
{"goal":"a > b","proof":["b + 1 <= a = b < a","a > b = b < a","not b < a","b + 1 != a or b + 1 <= a","not b + 1 <= a","b + 1 <= a"]}
{"goal":"a > b","proof":["b + 1 <= a = b < a","a > b + 1 = b + 1 < a","a > b = b < a","not b < a","b + 1 < a","not b + 1 < a or b + 1 <= a","not b + 1 <= a","b + 1 <= a"]}
{"goal":"lt_suc_right_augment","proof":["a < b + 1 or a <= b","a <= b","not a < b + 1","not a <= b or not b < b + 1 or a < b + 1","b + 1 <= b + 1 = b < b + 1","b + 1 != b + 1 or b + 1 <= b + 1","b + 1 <= b + 1","not b + 1 <= b + 1 or b < b + 1","not b < b + 1 or not a <= b","not b < b + 1"]}
{"goal":"gt_suc_left","proof":["b < a + 1 = b <= a","a >= b = b <= a","a + 1 > b != b <= a","a + 1 > b = b < a + 1"]}
{"goal":"gt_suc_right","proof":["b + 1 <= a = b < a","a >= b + 1 = b + 1 <= a","not b + 1 <= a","not b < a","a > b = b < a"]}
{"goal":"exists(k0: ℕ) { k0 + 1 = b }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(b) + 1 != b","s0(b) + 1 = b or 0 = b"]}
{"goal":"a ⋅ b = a ⋅ b_pred + a","proof":["a ⋅ (b_pred + 1) = a ⋅ b_pred + a"]}
{"goal":"mul_to_nonzero","proof":["a ⋅ b_pred + a = 0","a ⋅ b_pred + a != 0 or 0 = a"]}
{"goal":"mul_to_zero","proof":["a ⋅ b != 0 or 0 = a or 0 = b"]}
{"goal":"mul_to_zero_imp_rev","proof":["b ⋅ a = a ⋅ b","b ⋅ a != 0","0 != a or b ⋅ a = 0","0 != b or a ⋅ b = 0","0 != b","0 != a","0 = a"]}
{"goal":"exists(k0: ℕ) { k0 + 1 = b and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","s0(1, b) + 1 != b or s0(1, b) = 0","not 1 < b or 1 + s0(1, b) = b","not 1 < b or s0(1, b) != 0","s0(1, b) + 1 = 1 + s0(1, b)","s0(1, b) != 0","1 + s0(1, b) = b","s0(1, b) + 1 != b","s0(1, b) + 1 = b"]}
{"goal":"a ⋅ b = a ⋅ b_pred + a","proof":["a ⋅ (b_pred + 1) = a ⋅ b_pred + a"]}
{"goal":"mul_increase","proof":["a + a ⋅ b_pred != a ⋅ b or a < a ⋅ b or a ⋅ b_pred = 0","a ⋅ b_pred != 0 or 0 = a or b_pred = 0","a + a ⋅ b_pred = a ⋅ b_pred + a","a + a ⋅ b_pred != a ⋅ b or a ⋅ b_pred = 0","a ⋅ b_pred != 0 or 0 = a","a ⋅ b_pred != 0","a + a ⋅ b_pred = a ⋅ b","a + a ⋅ b_pred != a ⋅ b"]}
{"goal":"exists(k0: ℕ) { a + k0 = b }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 0 != b","a + s0(a, b) != b","not a < b or a + s0(a, b) = b","not a < b","not a <= b or a < b or b = a","b = a","a + 0 = a"]}
{"goal":"a + (c + 1) = b + 1","proof":["a + (c + 1) = a + c + 1"]}
{"goal":"c + 1 != 0","proof":["c + 1 <= 0 = c < 0","c + 1 != 0 or c + 1 <= 0","c + 1 <= 0","c < 0","not c < 0"]}
{"goal":"lt_imp_lt_suc","proof":["a + (c + 1) != b + 1 or a < b + 1 or c + 1 = 0"]}
{"goal":"exists(k0: ℕ) { b + k0 = c and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b + s0(b, c) != c or s0(b, c) = 0","not b < c or b + s0(b, c) = c","not b < c or s0(b, c) != 0","s0(b, c) != 0","b + s0(b, c) = c","b + s0(b, c) != c"]}
{"goal":"a ⋅ (b + n) = a ⋅ c","proof":["b + n != c"]}
{"goal":"a ⋅ b + a ⋅ n = a ⋅ c","proof":["a ⋅ b + a ⋅ n = a ⋅ (b + n)"]}
{"goal":"a ⋅ n != 0","proof":["a ⋅ n != 0 or 0 = a or n = 0"]}
{"goal":"a ⋅ b < a ⋅ c","proof":["a ⋅ b + a ⋅ n != a ⋅ c or a ⋅ b < a ⋅ c or a ⋅ n = 0"]}
{"goal":"lt_mul_both_left","proof":[]}
{"goal":"exists(k0: ℕ) { b + k0 = c }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b + 0 != c","b + s0(b, c) != c","not b < c or b + s0(b, c) = c","not b < c","not b <= c or b < c or c = b","c = b","b + 0 = b"]}
{"goal":"a ⋅ (b + n) = a ⋅ c","proof":["b + n != c"]}
{"goal":"a ⋅ b + a ⋅ n = a ⋅ c","proof":["a ⋅ b + a ⋅ n = a ⋅ (b + n)"]}
{"goal":"a ⋅ b <= a ⋅ c","proof":["a ⋅ b + a ⋅ n != a ⋅ c or a ⋅ b < a ⋅ c or a ⋅ n = 0","not a ⋅ b < a ⋅ c or a ⋅ b <= a ⋅ c","a ⋅ b = b ⋅ a","a ⋅ n + a ⋅ b = a ⋅ b + a ⋅ n","a ⋅ c != a ⋅ b or a ⋅ b <= a ⋅ c","a ⋅ c != a ⋅ b","0 + b ⋅ a = b ⋅ a","not a ⋅ b < a ⋅ c","a ⋅ n = 0"]}
{"goal":"lte_mul_both_left","proof":[]}
{"goal":"gt_mul_both_left","proof":["not c < b or a ⋅ c < a ⋅ b or 0 = a","a ⋅ b > a ⋅ c = a ⋅ c < a ⋅ b","b > c = c < b","not a ⋅ c < a ⋅ b","c < b","not c < b"]}
{"goal":"gte_mul_both_left","proof":["not c <= b or a ⋅ c <= a ⋅ b","a ⋅ b >= a ⋅ c = a ⋅ c <= a ⋅ b","b >= c = c <= b","not a ⋅ c <= a ⋅ b","c <= b","not c <= b"]}
{"goal":"lt_mul_both_right","proof":["not b < c or a ⋅ b < a ⋅ c or 0 = a","b ⋅ a = a ⋅ b","c ⋅ a = a ⋅ c","not a ⋅ b < c ⋅ a","not a ⋅ b < a ⋅ c"]}
{"goal":"lte_mul_both_right","proof":["not b <= c or a ⋅ b <= a ⋅ c","a ⋅ b = b ⋅ a","a ⋅ c = c ⋅ a","not a ⋅ b <= c ⋅ a","a ⋅ b <= a ⋅ c"]}
{"goal":"gt_mul_both_right","proof":["not c < b or c ⋅ a < b ⋅ a or 0 = a","b > c = c < b","b ⋅ a > c ⋅ a = c ⋅ a < b ⋅ a","not c ⋅ a < b ⋅ a","c < b","not c < b"]}
{"goal":"gte_mul_both_right","proof":["not c <= b or c ⋅ a <= b ⋅ a","b >= c = c <= b","b ⋅ a >= c ⋅ a = c ⋅ a <= b ⋅ a","not c ⋅ a <= b ⋅ a","c <= b","not c <= b"]}
{"goal":"a ⋅ c <= a ⋅ b","proof":["not c <= b or a ⋅ c <= a ⋅ b","not c <= b","b >= c = c <= b"]}
{"goal":"false","proof":["not a ⋅ c <= a ⋅ b or a ⋅ c < a ⋅ b or a ⋅ c = a ⋅ b","not a ⋅ c < a ⋅ b or not a ⋅ b < a ⋅ c","not a ⋅ b < a ⋅ b","not a ⋅ c < a ⋅ b","a ⋅ c = a ⋅ b"]}
{"goal":"lt_cancel_mul","proof":["b < c or c < b or c = b","b >= c = c <= b","not c <= b","not c < b or c <= b","c != b or c <= b","c != b","not c < b","c < b"]}
{"goal":"a ⋅ c > a ⋅ b","proof":["not b > c or a ⋅ b > a ⋅ c or 0 = a","not a ⋅ b <= a ⋅ c or a ⋅ b < a ⋅ c or a ⋅ c = a ⋅ b","a ⋅ c > a ⋅ b = a ⋅ b < a ⋅ c","not a ⋅ b < a ⋅ c","a ⋅ c = a ⋅ b","not a ⋅ b > a ⋅ b","a ⋅ b > a ⋅ c or 0 = a","not a ⋅ b > a ⋅ c","a ⋅ b > a ⋅ c"]}
{"goal":"false","proof":["not a ⋅ b < a ⋅ c or b < c or 0 = a","not c < b or not b < c","a ⋅ c > a ⋅ b = a ⋅ b < a ⋅ c","b > c = c < b","c < b","a ⋅ b < a ⋅ c","not b < c","b < c"]}
{"goal":"lte_cancel_mul","proof":["b < c or c < b or c = b","b > c = c < b","not c < b","not b < c or b <= c","not b < c","c = b","c != b or b <= c"]}
{"goal":"mul_preserve_gt_one","proof":["not 1 < b or a < a ⋅ b or 0 = a","not a <= 0 or not 1 < a or 1 < 0","not 1 < a or not a < a ⋅ b or 1 < a ⋅ b","a > 1 = 1 < a","a ⋅ b > 1 = 1 < a ⋅ b","b > 1 = 1 < b","not 1 < a ⋅ b","1 < b","1 < a","0 != a or a <= 0","not 1 < 0","not a < a ⋅ b or not 1 < a","not a < a ⋅ b","not a <= 0 or 1 < 0","not a <= 0","0 = a","0 != a"]}
{"goal":"b = 1 ⋅ b","proof":["1 ⋅ b = b"]}
{"goal":"a <= 1","proof":["not b ⋅ a <= b ⋅ 1 or a <= 1 or 0 = b","a ⋅ b = b ⋅ a","b ⋅ a = b","b ⋅ a != b or b ⋅ a <= b","b ⋅ 1 = b","not b ⋅ a <= b ⋅ 1 or 0 = b","not b ⋅ a <= b ⋅ 1","b ⋅ a <= b","not b ⋅ a <= b"]}
{"goal":"a >= 1","proof":["a ⋅ b = b ⋅ a","b ⋅ a = b","a >= 1 or 0 = a","0 = a","b ⋅ 0 = 0","b ⋅ 0 != b"]}
{"goal":"a = 1","proof":["not 1 <= a or 1 < a or 1 = a","not a <= 1 or a < 1 or 1 = a","a < 1","not a < 1 or not 1 < a","a >= 1 = 1 <= a","1 <= a","not 1 < a","1 < a"]}
{"goal":"mul_identity","proof":[]}
{"goal":"mul_cancel","proof":["not a ⋅ b <= a ⋅ c or b <= c or 0 = a","not a ⋅ c <= a ⋅ b or c <= b or 0 = a","not b <= c or b < c or c = b","not c <= b or c < b or c = b","not b < c or not c < b","not b <= c or b < c","a ⋅ c != a ⋅ b or a ⋅ b <= a ⋅ c","a ⋅ c != a ⋅ b or a ⋅ c <= a ⋅ b","a ⋅ c <= a ⋅ b","a ⋅ b <= a ⋅ c","b <= c","b < c","c <= b","not c < b","c < b"]}
{"goal":"1 != 0","proof":["1 + 0 = 0.suc","1 + 0 = 1","1 + 0 = 0","0.suc = 0","0.suc != 0"]}
{"goal":"a != 0","proof":["0 != a or a ⋅ b = 0","a ⋅ b = 0"]}
{"goal":"b != 0","proof":["0 != b or a ⋅ b = 0","a ⋅ b = 0"]}
{"goal":"a ⋅ b > 1 ⋅ b","proof":["not a > 1 or a ⋅ b > 1 ⋅ b or 0 = b"]}
{"goal":"a ⋅ b > b","proof":["1 ⋅ b = b"]}
{"goal":"false","proof":["b < 0 + 1 = b <= 0","not b <= 0 or b < 0 or 0 = b","1 > b = b < 1","0 + 1 = 1","not b < 0","not b <= 0"]}
{"goal":"a = 1","proof":["a < 0 + 1 = a <= 0","a < 1 or 1 < a or 1 = a","not a <= 0 or a < 0 or 0 = a","a > 1 = 1 < a","not 1 < a","a < 1","0 + 1 = 1","not a < 0","not a <= 0"]}
{"goal":"b = 1","proof":["a ⋅ b = a","b ⋅ a != a or 1 = b or 0 = a","b ⋅ a = a ⋅ b","b ⋅ a != a or 0 = a","b ⋅ a = a","b ⋅ a != a"]}
{"goal":"mul_to_one","proof":["1 != a"]}
{"goal":"not b < 0.suc","proof":["b < 0 + 1 = b <= 0","not b <= 0 or 0 = b","0 + 1 = 0.suc","b < 0 + 1","not b <= 0","b <= 0"]}
{"goal":"not b < 1","proof":["not 1 <= 0.suc or not b < 1 or b < 0.suc","not 1 <= 0.suc or b < 0.suc","not 1 <= 0.suc","0.suc != 1 or 1 <= 0.suc","0.suc != 1"]}
{"goal":"1 <= b","proof":["1 < b or b < 1 or 1 = b","not 1 < b or 1 <= b","not 1 < b","1 = b","1 != b or 1 <= b"]}
{"goal":"a ⋅ 1 <= a ⋅ b","proof":["not 1 <= b or a ⋅ 1 <= a ⋅ b"]}
{"goal":"lte_mul","proof":["a ⋅ b >= a = a <= a ⋅ b","a ⋅ b >= a ⋅ 1 = a ⋅ 1 <= a ⋅ b","a ⋅ 1 = 1 ⋅ a","1 ⋅ a = a"]}
{"goal":"exists(k0: ℕ) { a1 + k0 = a2 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a1 + 0 != a2","a1 + s0(a1, a2) != a2","not a1 < a2 or a1 + s0(a1, a2) = a2","not a1 < a2","not a1 <= a2 or a1 < a2 or a2 = a1","a2 = a1","a1 + 0 = a1"]}
{"goal":"a1 + b1 = a1 + n + b2","proof":["a2 + b2 != a1 + b1"]}
{"goal":"a1 + b1 = a1 + (n + b2)","proof":["a1 + (n + b2) = a1 + n + b2"]}
{"goal":"b1 = n + b2","proof":["a1 + (n + b2) != a1 + b1 or n + b2 = b1"]}
{"goal":"b2 <= b1","proof":["b2 + n != b1 or b2 < b1 or n = 0","not b2 < b1 or b2 <= b1","not b2 < b1","n + b2 = b2 + n","b2 + n = b1","n = 0","b2 != b1 or b2 <= b1","b2 != b1","1 ⋅ b2 = b2","0 + 1 ⋅ b2 = 1 ⋅ b2"]}
{"goal":"cross_sum_lte","proof":[]}
{"goal":"0 = 0","proof":[]}
{"goal":"b <= a","proof":["b < a or a < b or b = a","not b < a or b <= a","not b < a","b = a","b != a or b <= a"]}
{"goal":"exists(k0: ℕ) { k0 + b = a }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","0 + b != a","s0(b, a) + b != a","not b < a or b + s0(b, a) = a","not 0 + b <= a or 0 + b < a or 0 + b = a","s0(b, a) + b = b + s0(b, a)","0 + b = b","0 + b <= a","0 + b < a","b < a","b + s0(b, a) = a"]}
{"goal":"exists(k0: ℕ) { if a < b { k0 = 0 } else { k0 + b = a } }","proof":["let s0: ℕ satisfy { s0 + b = a or a < b }","s0 + b != a or a < b","not a < b or 0 != 0","not a < b"]}
{"goal":"sub_lt","proof":["not a < b or bounded_sub(a, b) = 0","a - b = bounded_sub(a, b)","bounded_sub(a, b) = 0","bounded_sub(a, b) != 0"]}
{"goal":"add_sub_left","proof":["bounded_sub(a, b) + b = a or a < b","not b <= a or not a < b or a < a","a - b = bounded_sub(a, b)","bounded_sub(a, b) + b != a","a < b","not a < a","not a < b or a < a"]}
{"goal":"b <= a + b","proof":["b + a != b + a or b < b + a or 0 = a","not b < b + a or b <= b + a","a + b = b + a","not b <= b + a","0 != a or b + a = b","a + b != b or b <= a + b","a + b != b","b + a != b","not b < b + a","b < b + a or 0 = a","0 != a","0 = a"]}
{"goal":"a + b - b + b = a + b","proof":["not b <= a + b or a + b - b + b = a + b"]}
{"goal":"add_sub_right","proof":["a + b - b + b != a + b or a + b - b = a"]}
{"goal":"a + (b - c) + c = a + b","proof":["a + (b - c + c) = a + (b - c) + c","not c <= b or b - c + c = b","b >= c = c <= b","c <= b","a + (b - c + c) != a + b","b - c + c = b","b - c + c != b"]}
{"goal":"add_sub_comm_add","proof":["a + (b - c) + c - c = a + (b - c)"]}
{"goal":"add_sub_comm_sub","proof":["not a >= c or b + a - c = b + (a - c)","b + (a - c) = a - c + b","b + a = a + b","b + a - c != a - c + b","b + a - c = b + (a - c)"]}
{"goal":"a - b = 0","proof":["not a < b or a - b = 0"]}
{"goal":"0 <= a","proof":["a < 0 or 0 < a or 0 = a","not 0 < a or 0 <= a","not 0 < a","0 != a or 0 <= a","0 != a","not a < 0"]}
{"goal":"a - b <= a","proof":[]}
{"goal":"a - b + b = a","proof":["not b <= a or a - b + b = a","not b <= a","a >= b = b <= a"]}
{"goal":"a - b <= a","proof":["a - b + b != a or a - b < a or 0 = b","a - b = bounded_sub(a, b)","not a - b < a or a - b <= a","not a - b < a","0 = b","b + bounded_sub(a, b) = bounded_sub(a, b) + b","a - b != a or a - b <= a","a - b != a","0 + bounded_sub(a, b) = bounded_sub(a, b)"]}
{"goal":"sub_decrease","proof":["b < a or a < b or b = a","b < a or b = a","a >= b = b <= a","not b <= a","not b < a or b <= a","not b < a","b != a or b <= a","b = a","b != a"]}
{"goal":"sub_self","proof":["0 + a - a = 0","0 + a = a"]}
{"goal":"sub_zero","proof":["a + 0 - 0 = a","a + 0 = 0 + a","0 + a = a","0 + a - 0 != a"]}
{"goal":"add_imp_sub","proof":["a + b - b = a"]}
{"goal":"a ⋅ (b - c) = a ⋅ b - a ⋅ c","proof":["b - c = bounded_sub(b, c)","0 != a or a ⋅ b = 0","0 != a or a ⋅ c = 0","a ⋅ bounded_sub(b, c) = bounded_sub(b, c) ⋅ a","0 != a or bounded_sub(b, c) ⋅ a = 0","0 - 0 = 0","bounded_sub(b, c) ⋅ a = 0","a ⋅ b = 0","a ⋅ c = 0"]}
{"goal":"sub_distrib_right(a, b, c)","proof":["a ⋅ b - a ⋅ c != a ⋅ (b - c) or sub_distrib_right(a, b, c)"]}
{"goal":"a ⋅ b < a ⋅ c","proof":["not b < c or a ⋅ b < a ⋅ c or 0 = a"]}
{"goal":"a ⋅ b - a ⋅ c = 0","proof":["not a ⋅ b < a ⋅ c or a ⋅ b - a ⋅ c = 0"]}
{"goal":"b - c = 0","proof":["not b < c or b - c = 0"]}
{"goal":"a ⋅ (b - c) = a ⋅ b - a ⋅ c","proof":["a ⋅ (b - c) != 0","a ⋅ 0 != 0","0 != 0 or a ⋅ 0 = 0"]}
{"goal":"sub_distrib_right(a, b, c)","proof":["a ⋅ b - a ⋅ c != a ⋅ (b - c) or sub_distrib_right(a, b, c)"]}
{"goal":"b - c + c = b","proof":["bounded_sub(b, c) + c = b or b < c","b - c = bounded_sub(b, c)","bounded_sub(b, c) + c = b","bounded_sub(b, c) + c != b"]}
{"goal":"a ⋅ (b - c) + a ⋅ c = a ⋅ b","proof":["a ⋅ (b - c) + a ⋅ c = a ⋅ (b - c + c)"]}
{"goal":"a ⋅ (b - c) = a ⋅ b - a ⋅ c","proof":["a ⋅ (b - c) + a ⋅ c != a ⋅ b or a ⋅ b - a ⋅ c = a ⋅ (b - c)"]}
{"goal":"sub_distrib_right(a, b, c)","proof":["a ⋅ b - a ⋅ c != a ⋅ (b - c) or sub_distrib_right(a, b, c)"]}
{"goal":"sub_distrib_right(a, b, c)","proof":["a · b - a · c != a · (b - c) or sub_distrib_right(a, b, c)"]}
{"goal":"sub_distrib_right(a, b, c)","proof":["a · b - a · c != a · (b - c) or sub_distrib_right(a, b, c)"]}
{"goal":"sub_distrib_right","proof":["not sub_distrib_right(a, b, c) or a ⋅ b - a ⋅ c = a ⋅ (b - c)"]}
{"goal":"sub_distrib_left","proof":["c ⋅ a - c ⋅ b = c ⋅ (a - b)","a - b = bounded_sub(a, b)","c ⋅ a = a ⋅ c","c ⋅ b = b ⋅ c","c ⋅ bounded_sub(a, b) = bounded_sub(a, b) ⋅ c"]}
{"goal":"two_neq_zero","proof":["1 + 1 <= 0 = 1 < 0","1 + 1 != 0 or 1 + 1 <= 0","1 + 1 = 0","1 + 1 <= 0","1 < 0","not 1 < 0"]}
{"goal":"three_neq_zero","proof":["2.suc != 0"]}
{"goal":"pow_zero","proof":["0 != 0 or a.pow(0) = 1"]}
{"goal":"a^1 = a ⋅ a^0","proof":["0.suc != 1 or a ⋅ a^0 = a^1","0.suc != 1"]}
{"goal":"a^0 = 1","proof":["0 != 0 or a^0 = 1"]}
{"goal":"pow_one","proof":["a ⋅ 1 = 1 ⋅ a","a ⋅ a^0 != a","a ⋅ 1 != a","1 ⋅ a = a"]}
{"goal":"f(0)","proof":["a^b ⋅ a^0 != a^(b + 0) or f(0)","a^0 = 1","a^b ⋅ 1 = a^b","b + 0 = b","a^b ⋅ a^0 != a^(b + 0)"]}
{"goal":"a^(b + x) = a^b ⋅ a^x","proof":["not f(x) or a^b ⋅ a^x = a^(b + x)"]}
{"goal":"b + (x + 1) = b + x + 1","proof":["b + (x + 1) = b + x + 1"]}
{"goal":"a^(b + x + 1) = a^b ⋅ (a^x ⋅ a^1)","proof":["(b + x).suc != (b + x).suc or a ⋅ a^(b + x) = a^(b + x).suc","a^b ⋅ (a^x ⋅ a^1) = a^b ⋅ a^x ⋅ a^1","a^1 ⋅ (a^b ⋅ a^x) = a^b ⋅ a^x ⋅ a^1","b + x + 1 = 1 + (b + x)","1 + (b + x) = (b + x).suc","a^1 = a","a ⋅ a^(b + x) = a^(b + x).suc"]}
{"goal":"f(x + 1)","proof":["a^b ⋅ a^(x + 1) != a^(b + (x + 1)) or f(x + 1)","x.suc != x.suc or a ⋅ a^x = a^x.suc","a^b ⋅ (a^x ⋅ a^1) = a^x ⋅ a^1 ⋅ a^b","a^b ⋅ a^(x + 1) = a^(x + 1) ⋅ a^b","a^x ⋅ a^1 = a^1 ⋅ a^x","x + 1 = 1 + x","1 + x = x.suc","a^1 = a","a ⋅ a^x = a^x.suc","a^b ⋅ a^(x + 1) != a^(b + (x + 1))"]}
{"goal":"f(c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"pow_add","proof":["not f(c) or a^b ⋅ a^c = a^(b + c)"]}
{"goal":"f(0)","proof":["a^b^0 != a^(b ⋅ 0) or f(0)","b ⋅ 0 != 0 or a^(b ⋅ 0) = 1","a^b^0 = 1","b ⋅ 0 = 0","a^b^0 != a^(b ⋅ 0)","a^(b ⋅ 0) != 1"]}
{"goal":"a^(b ⋅ x) = a^b^x","proof":["not f(x) or a^b^x = a^(b ⋅ x)"]}
{"goal":"b ⋅ (x + 1) = b ⋅ x + b","proof":["b ⋅ (x + 1) = b ⋅ x + b"]}
{"goal":"a^(b ⋅ (x + 1)) = a^(b ⋅ x) ⋅ a^b","proof":["a^(b ⋅ x) ⋅ a^b != a^(b ⋅ x + b)","a^(b ⋅ x) ⋅ a^b = a^(b ⋅ x + b)"]}
{"goal":"a^b = a^b^1","proof":["a^b^1 = a^b"]}
{"goal":"a^(b ⋅ (x + 1)) = a^b^(x + 1)","proof":["a^b^x ⋅ a^b^1 = a^b^(x + 1)"]}
{"goal":"f(x + 1)","proof":["a^b^(x + 1) != a^(b ⋅ (x + 1)) or f(x + 1)","a^b^(x + 1) != a^(b ⋅ (x + 1))"]}
{"goal":"f(c)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"pow_mul","proof":["not f(c) or a^b^c = a^(b ⋅ c)"]}
{"goal":"exists(k0: ℕ) { n = k0.suc }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0).suc = x0 or 0 = x0 } }","s0(n).suc != n","s0(n).suc = n or 0 = n"]}
{"goal":"zero_pow","proof":["b.suc != b.suc or 0 ⋅ 0^b = 0^b.suc","0^b.suc != 0","0 ⋅ 0^b = 0","0 ⋅ 0^b = 0^b.suc"]}
{"goal":"one_pow(0)","proof":["1.pow(0) != 1 or one_pow(0)","1.pow(0) != 1","0 != 0 or 1.pow(0) = 1"]}
{"goal":"one_pow(n)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","1^s0(one_pow).suc != 1 or one_pow(s0(one_pow).suc)","not one_pow(s0(one_pow)) or 1^s0(one_pow) = 1","s0(one_pow).suc != s0(one_pow).suc or 1 ⋅ 1^s0(one_pow) = 1^s0(one_pow).suc","not one_pow(s0(one_pow).suc) or not one_pow(0) or one_pow(n)","not one_pow(s0(one_pow).suc)","not one_pow(0) or one_pow(s0(one_pow)) or one_pow(n)","one_pow(s0(one_pow))","1 ⋅ 1 = 1","1 ⋅ 1^s0(one_pow) = 1^s0(one_pow).suc","1^s0(one_pow) = 1","1^s0(one_pow).suc != 1"]}
{"goal":"one_pow","proof":["not one_pow(n) or 1.pow(n) = 1"]}
{"goal":"f(0)","proof":["1 <= a.pow(0) = f(0)","not 1 <= a.pow(0)","a.pow(0) != 1 or 1 <= a.pow(0)","a.pow(0) = 1"]}
{"goal":"1 <= a^x","proof":["1 <= a^x = f(x)"]}
{"goal":"a^x <= a^(x + 1)","proof":["a^x ⋅ a^1 = a^(x + 1)","a^x <= a^x ⋅ a^1 or a^1 = 0","a^1 = a","a^1 != 0","not a^x <= a^x ⋅ a^1"]}
{"goal":"1 <= a^(x + 1)","proof":["not 1 <= a^x or not a^x <= a^(x + 1) or 1 <= a^(x + 1)","not a^x <= a^(x + 1) or not 1 <= a^x"]}
{"goal":"f(x + 1)","proof":["1 <= a.pow(x + 1) = f(x + 1)"]}
{"goal":"f(b)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"pow_gte_one","proof":["1 <= a.pow(b) = f(b)"]}
{"goal":"exists(k0: ℕ) { b = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(b) + 1 != b","s0(b) + 1 = b or 0 = b"]}
{"goal":"a^b = a ⋅ a^b_pred","proof":["b_pred.suc != b or a ⋅ a^b_pred = a^b","b_pred.suc != b","b_pred + 1 = 1 + b_pred","1 + b_pred = b","1 + b_pred = b_pred.suc"]}
{"goal":"a^b_pred >= 1","proof":["1 <= a^b_pred or 0 = a","0 >= 1 = 1 <= 0","a^b_pred >= 1 = 1 <= a^b_pred","not 1 <= a^b_pred","0 = a","not 1 < a or 1 <= a","a^b_pred >= 1 or a^b_pred = 0","a^b_pred = 0","not 0 >= 1","not 1 <= 0","1 <= a","not 1 <= a"]}
{"goal":"a > 1","proof":["a > 1 = 1 < a"]}
{"goal":"a ⋅ a^b_pred > 1","proof":["not a > 1 or not a^b_pred > 1 or a ⋅ a^b_pred > 1","not a^b_pred > 1","1 + 1 <= a = 1 < a","1 + 1 <= a ⋅ a^b_pred = 1 < a ⋅ a^b_pred","not 1 <= a^b_pred or 1 < a^b_pred or a^b_pred = 1","a^b_pred >= 1 = 1 <= a^b_pred","1 <= a^b_pred","a ⋅ a^b_pred > 1 = 1 < a ⋅ a^b_pred","a^b_pred > 1 = 1 < a^b_pred","a ⋅ a^b_pred = a^b_pred ⋅ a","1 ⋅ a = a","not 1 < a^b_pred","a^b_pred = 1"]}
{"goal":"a^b > 1","proof":[]}
{"goal":"pow_gt_one","proof":["a.pow(b) > 1 = 1 < a.pow(b)"]}
{"goal":"1 <= a^b","proof":["1 <= a^b or 0 = a"]}
{"goal":"pow_ne_zero","proof":["1 <= 0","a^0 ⋅ a^b = a^(0 + b)","a ⋅ 1 = 1 ⋅ a","not 1 <= 0 or 1 = 0","1 = 0","a^1 = a","b^1 = b","a^1 - 0 = a^1","b^1 - 0 = b^1","1 ⋅ (a - 0) = a - 0","1 ⋅ (b - 0) = b - 0","0 + 1 ⋅ b = 1 ⋅ b"]}
{"goal":"exists(k0: ℕ) { b1 + k0 = b2 and k0 != 0 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b1 + s0(b1, b2) != b2 or s0(b1, b2) = 0","not b1 < b2 or b1 + s0(b1, b2) = b2","not b1 < b2 or s0(b1, b2) != 0","s0(b1, b2) != 0","b1 + s0(b1, b2) = b2","b1 + s0(b1, b2) != b2"]}
{"goal":"a^b2 = a^b1 ⋅ a^n","proof":["a^b1 ⋅ a^n = a^(b1 + n)"]}
{"goal":"a^b1 != 0","proof":["a^b1 != 0 or 0 = a","0 = a","not 1 < 0"]}
{"goal":"1 < a","proof":[]}
{"goal":"1 < a^n","proof":["not 1 < a or 1 < a^n or n = 0"]}
{"goal":"a^b2 > a^b1","proof":["not 1 < a^n or a^b1 < a^b1 ⋅ a^n or a^b1 = 0","a^b1 ⋅ a^n > a^b1 = a^b1 < a^b1 ⋅ a^n","not a^b1 ⋅ a^n > a^b1","not a^b1 < a^b1 ⋅ a^n"]}
{"goal":"lt_imp_pow_lt","proof":["a.pow(b2) > a.pow(b1) = a.pow(b1) < a.pow(b2)"]}
{"goal":"exists(k0: ℕ) { b1 + k0 = b2 }","proof":["let s0: (ℕ, ℕ) -> ℕ satisfy { forall(x0: ℕ, x1: ℕ) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: ℕ, x3: ℕ) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: ℕ, x5: ℕ, x6: ℕ) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b1 + 0 != b2","b1 + s0(b1, b2) != b2","not b1 < b2 or b1 + s0(b1, b2) = b2","not b1 < b2","not b1 <= b2 or b1 < b2 or b2 = b1","b2 = b1","b1 + 0 = b1"]}
{"goal":"a^b2 = a^b1 ⋅ a^n","proof":["a^b1 ⋅ a^n = a^(b1 + n)"]}
{"goal":"a^n != 0","proof":["a^n != 0 or 0 = a"]}
{"goal":"a^b2 >= a^b1","proof":["a^b1 <= a^b1 ⋅ a^n or a^n = 0","a^b1 ⋅ a^n >= a^b1 = a^b1 <= a^b1 ⋅ a^n","not a^b1 ⋅ a^n >= a^b1","a^b1 <= a^b1 ⋅ a^n"]}
{"goal":"lte_imp_pow_lte","proof":["a.pow(b2) >= a.pow(b1) = a.pow(b1) <= a.pow(b2)"]}
{"goal":"lte_pow","proof":["not 1 <= b or a.pow(1) <= a.pow(b) or 0 = a","b >= 1 = 1 <= b","b >= 1 or 0 = b","a.pow(1) = a","not a.pow(1) <= a.pow(b)","b >= 1","not 1 <= b","1 <= b"]}
{"goal":"pow_lt_imp_lt","proof":["not 1 < a or not b2 < b1 or a.pow(b2) < a.pow(b1)","b1 < b2 or b2 < b1 or b2 = b1","b2 < b1 or b2 = b1","not a.pow(b2) < a.pow(b1) or not a.pow(b1) < a.pow(b2)","not a.pow(b1) < a.pow(b1)","not a.pow(b2) < a.pow(b1)","not b2 < b1","b2 = b1"]}
{"goal":"pow_lte_imp_lte","proof":["not 1 < a or not b2 < b1 or a.pow(b2) < a.pow(b1)","not a.pow(b1) <= a.pow(b2) or not a.pow(b2) < a.pow(b1) or a.pow(b2) < a.pow(b2)","b1 < b2 or b2 < b1 or b2 = b1","not b1 < b2 or b1 <= b2","not b1 < b2","b2 != b1 or b1 <= b2","b2 != b1","not a.pow(b2) < a.pow(b2)","not a.pow(b2) < a.pow(b1) or a.pow(b2) < a.pow(b2)","not a.pow(b2) < a.pow(b1)","b2 < b1","not b2 < b1"]}
{"goal":"exists(k0: ℕ) { b = k0 + 1 }","proof":["let s0: ℕ -> ℕ satisfy { forall(x0: ℕ) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(b) + 1 != b","s0(b) + 1 = b or 0 = b"]}
{"goal":"a^b = a ⋅ a^b_pred","proof":["b_pred.suc != b or a ⋅ a^b_pred = a^b","b_pred.suc != b","b_pred + 1 = 1 + b_pred","1 + b_pred = b","1 + b_pred = b_pred.suc"]}
{"goal":"a^b != 1","proof":["a ⋅ a^b_pred = 1","a ⋅ a^b_pred != 1 or 1 = a"]}
{"goal":"false","proof":["not a · c <= a · b or a · c < a · b or a · c = a · b","not a · c < a · b or not a · b < a · c","not a · b < a · b","not a · c < a · b","a · c = a · b"]}
{"goal":"pow_eq_one_imp","proof":[]}
{"goal":"sq_eq_mul","proof":["a^1 ⋅ a^1 = a^(1 + 1)","a^1 = a"]}
{"goal":"true_below(f, 0)","proof":["let s0: (ℕ -> Bool, ℕ) -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ, x2: ℕ) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: ℕ -> Bool, x4: ℕ) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: ℕ -> Bool, x6: ℕ) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","s0(f, 0) < 0 or true_below(f, 0)","s0(f, 0) < 0","not s0(f, 0) < 0"]}
{"goal":"g(0)","proof":["true_below(f, 0) = g(0)"]}
{"goal":"true_below(f, x)","proof":["true_below(f, x) = g(x)"]}
{"goal":"f(x)","proof":["not true_below(f, x) or f(x)"]}
{"goal":"f(y)","proof":["not true_below(f, x) or not y < x or f(y)","not true_below(f, x) or not y < x"]}
{"goal":"y = x","proof":["y < x + 1 = y <= x","not y <= x or y < x or y = x","not y <= x","x + 1 = 1 + x","1 + x = x.suc"]}
{"goal":"f(y)","proof":["not f(x)"]}
{"goal":"f(y)","proof":[]}
{"goal":"true_below(f, x.suc)","proof":["let s0: (ℕ -> Bool, ℕ) -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ, x2: ℕ) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: ℕ -> Bool, x4: ℕ) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: ℕ -> Bool, x6: ℕ) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","not s0(f, x.suc) < x.suc or f(s0(f, x.suc))","s0(f, x.suc) < x.suc or true_below(f, x.suc)","not f(s0(f, x.suc)) or true_below(f, x.suc)","not f(s0(f, x.suc))","s0(f, x.suc) < x.suc","not s0(f, x.suc) < x.suc"]}
{"goal":"g(x.suc)","proof":["true_below(f, x.suc) = g(x.suc)"]}
{"goal":"g(x)","proof":["let s0: ℕ -> Bool -> ℕ satisfy { forall(x0: ℕ -> Bool, x1: ℕ) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: ℕ -> Bool, x3: ℕ) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not g(s0(g)) or g(s0(g).suc)","not g(s0(g).suc) or not g(0) or g(x)","not g(s0(g).suc)","not g(0) or g(s0(g)) or g(x)","not g(s0(g))","g(s0(g))"]}
{"goal":"g(n.suc)","proof":["g(n.suc)"]}
{"goal":"true_below(f, n.suc)","proof":["g(n.suc)","true_below(f, n.suc) = g(n.suc)"]}
{"goal":"f(n)","proof":["g(n)","true_below(f, n) = g(n)","not true_below(f, n) or f(n)","not true_below(f, n)"]}
{"goal":"strong_induction","proof":["let s0: ℕ satisfy { not f(s0) }","f(s0)"]}
{"goal":"a <= n","proof":["a + (b + c) = a + b + c","a + (b + c) != n or a < n or b + c = 0","not a < n or a <= n","not a < n","a + 0 != n or a + 0 <= n","a + 0 = a","not a + 0 <= n","a + (b + c) = n","a + 0 != n","b + c = 0"]}
{"goal":"b <= n","proof":["0 + b + a + c = 0 + b + (a + c)","not b <= n - (a + c) or not n - (a + c) <= n or b <= n","b + (a + c) != n or n - (a + c) = b","a + (0 + b) = 0 + b + a","not b <= n - (a + c) or not n - (a + c) <= n","n - (a + c) <= n","n - (a + c) != b or b <= n - (a + c)","0 + b = b","not b <= n - (a + c)","a + (0 + b) + c = n","0 + b + a + c = n","0 + b + (a + c) = n","b + (a + c) = n","n - (a + c) != b"]}
{"goal":"c <= n","proof":["not 0 <= a + b or a + b + c != 0 + n or c <= n","c + (a + b) != n or c < n or a + b = 0","not c < n or c <= n","not c < n","c + (a + b) = a + b + c","a + b != 0 or 0 <= a + b","0 + n = n","c + (a + b) = n","a + b + c = 0 + n","not 0 <= a + b","a + b = 0","a + b != 0"]}
{"goal":"gte_each_of_three","proof":["not c <= n or not b <= n or not a <= n","not a <= n"]}
{"goal":"a < n","proof":["a + (b + c) = a + b + c","(b + c).suc != (b + c).suc or a + (b + c).suc = (a + (b + c)).suc","a + (b + c).suc != n or a < n or (b + c).suc = 0","a + (b + c).suc != n or (b + c).suc = 0","a + (b + c) + 1 = (a + (b + c)).suc","(b + c).suc != 0","a + (b + c).suc != n","a + (b + c).suc = (a + (b + c)).suc","a + (b + c) + 1 = n","(a + (b + c)).suc = n"]}
{"goal":"b < n","proof":["0 + b + a + c = 0 + b + (a + c)","(a + c).suc != (a + c).suc or b + (a + c).suc = (b + (a + c)).suc","b + (a + c).suc != n or b < n or (a + c).suc = 0","a + (0 + b) = 0 + b + a","b + (a + c).suc != n or (a + c).suc = 0","b + (a + c) + 1 = (b + (a + c)).suc","0 + b = b","(a + c).suc != 0","b + (a + c).suc != n","b + (a + c).suc = (b + (a + c)).suc","a + (0 + b) + c + 1 = n","0 + b + a + c + 1 = n","0 + b + (a + c) + 1 = n","b + (a + c) + 1 = n","(b + (a + c)).suc = n"]}
{"goal":"c < n","proof":["(a + b).suc != (a + b).suc or c + (a + b).suc = (c + (a + b)).suc","c + (a + b).suc != n or c < n or (a + b).suc = 0","c + (a + b) = a + b + c","c + (a + b).suc != n or (a + b).suc = 0","c + (a + b) + 1 = (c + (a + b)).suc","(a + b).suc != 0","c + (a + b).suc != n","c + (a + b).suc = (c + (a + b)).suc","c + (a + b) + 1 = n","(c + (a + b)).suc = n"]}
{"goal":"gt_each_of_three","proof":["not c < n or not b < n or not a < n","not a < n"]}
{"goal":"one_plus_two","proof":["1 + 2 = 2.suc","2.suc != 3"]}
{"goal":"one_plus_three","proof":["1 + 3 = 3.suc","3.suc != 4"]}
{"goal":"one_plus_four","proof":["1 + 4 = 4.suc","4.suc != 5"]}
{"goal":"one_plus_five","proof":["1 + 5 = 5.suc","5.suc != 6"]}
{"goal":"one_plus_six","proof":["1 + 6 = 6.suc","6.suc != 7"]}
{"goal":"one_plus_seven","proof":["1 + 7 = 7.suc","7.suc != 8"]}
{"goal":"one_plus_eight","proof":["1 + 8 = 8.suc","8.suc != 9"]}
{"goal":"one_plus_nine","proof":["1 + 9 = 9.suc","9.suc != 10"]}
{"goal":"one_sub_one","proof":["0 + 1 != 1 or 1 - 1 = 0","0 + 1 != 1","0 + 1 = 0.suc","0.suc != 1"]}
{"goal":"two_sub_one","proof":["1 + 1 != 2 or 2 - 1 = 1","1 + 1 != 2"]}
{"goal":"three_sub_one","proof":["2 + 1 != 3 or 3 - 1 = 2","2 + 1 != 3","2 + 1 = 1 + 2","1 + 2 != 3"]}
{"goal":"four_sub_one","proof":["3 + 1 != 4 or 4 - 1 = 3","3 + 1 != 4","3 + 1 = 1 + 3","1 + 3 != 4"]}
{"goal":"five_sub_one","proof":["4 + 1 != 5 or 5 - 1 = 4","4 + 1 != 5","4 + 1 = 1 + 4","1 + 4 != 5"]}
{"goal":"six_sub_one","proof":["5 + 1 != 6 or 6 - 1 = 5","5 + 1 != 6","5 + 1 = 1 + 5","1 + 5 != 6"]}
{"goal":"seven_sub_one","proof":["6 + 1 != 7 or 7 - 1 = 6","6 + 1 != 7","6 + 1 = 1 + 6","1 + 6 != 7"]}
{"goal":"eight_sub_one","proof":["7 + 1 != 8 or 8 - 1 = 7","7 + 1 != 8","7 + 1 = 1 + 7","1 + 7 != 8"]}
{"goal":"nine_sub_one","proof":["8 + 1 != 9 or 9 - 1 = 8","8 + 1 != 9","8 + 1 = 1 + 8","1 + 8 != 9"]}
{"goal":"ten_sub_one","proof":["9 + 1 != 10 or 10 - 1 = 9","9 + 1 != 10","9 + 1 = 1 + 9","1 + 9 != 10"]}
{"goal":"nat_power_set_uncountable","proof":[]}
