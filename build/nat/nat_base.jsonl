{"goal":"add_zero","proof":["0 != 0 or 0 + a = a","0 != 0 or a + 0 = a","a + 0 = a","0 + a != a"]}
{"goal":"1 + 0.suc = 1.suc","proof":["0.suc != 0.suc or 1 + 0.suc = (1 + 0).suc","1 + 0 = 1","1 + 0.suc != (1 + 0).suc"]}
{"goal":"one_plus_one","proof":["1 + 1 != 1.suc"]}
{"goal":"add_suc","proof":["b.suc != b.suc or b.suc + a = (a + b).suc","b.suc != b.suc or b.suc + a.suc = (a.suc + b).suc","a.suc != a.suc or b.suc + a.suc = (b.suc + a).suc","b.suc != b.suc or a + b.suc = (a + b).suc","(a.suc + b).suc != (a + b).suc.suc or a.suc + b = (a + b).suc","a + b.suc = (a + b).suc","b.suc + a.suc = (b.suc + a).suc","a.suc + b != (a + b).suc","b.suc + a = (a + b).suc","b.suc + a.suc = (a.suc + b).suc","(a.suc + b).suc != (a + b).suc.suc","(b.suc + a).suc != (a.suc + b).suc"]}
{"goal":"a + 0.suc = (a + 0).suc","proof":["0.suc != 0.suc or a + 0.suc = (a + 0).suc"]}
{"goal":"0.suc + a = (0 + a).suc","proof":["0.suc + a = (0 + a).suc"]}
{"goal":"add_one","proof":["0 + a = a","a + 0 = a","a + 0.suc = a.suc","(0 + a).suc = 1 + a","1 + a = a.suc","a + 1 = a.suc","a + 1 != a.suc"]}
{"goal":"suc_ne(0)","proof":["0.suc = 0 or suc_ne(0)","0.suc = 0","0.suc != 0"]}
{"goal":"x.suc != x","proof":["x.suc != x or not suc_ne(x)"]}
{"goal":"x.suc.suc != x.suc","proof":["x.suc.suc != x.suc or x.suc = x"]}
{"goal":"suc_ne(x.suc)","proof":["x.suc.suc = x.suc or suc_ne(x.suc)"]}
{"goal":"suc_ne(a)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not suc_ne(s0(suc_ne)) or suc_ne(s0(suc_ne).suc)","not suc_ne(s0(suc_ne).suc) or not suc_ne(0) or suc_ne(a)","not suc_ne(s0(suc_ne).suc)","not suc_ne(0) or suc_ne(s0(suc_ne)) or suc_ne(a)","not suc_ne(s0(suc_ne))","suc_ne(s0(suc_ne))"]}
{"goal":"suc_ne","proof":["a.suc != a or not suc_ne(a)"]}
{"goal":"add_comm","proof":["b.suc != b.suc or b.suc + a = (a + b).suc","b.suc + a = (b + a).suc","(b + a).suc != (a + b).suc or b + a = a + b","(b + a).suc != (a + b).suc","b.suc + a = (a + b).suc"]}
{"goal":"add_assoc_one","proof":["a + b.suc = (a + b).suc","a + b + 1 = 1 + (a + b)","b + 1 = 1 + b","1 + (a + b) = (a + b).suc","1 + b = b.suc"]}
{"goal":"f(0)","proof":["add_assoc(a, b, 0) = f(0)","a + (b + 0) != a + b + 0 or add_assoc(a, b, 0)","not add_assoc(a, b, 0)","a + b + 0 = a + b","b + 0 = b","a + (b + 0) != a + b + 0"]}
{"goal":"f(x + 1)","proof":["add_assoc(a, b, x + 1) = f(x + 1)","add_assoc(a, b, x) = f(x)","a + (b + x.suc) != a + b + x.suc or add_assoc(a, b, x.suc)","not add_assoc(a, b, x) or a + (b + x) = a + b + x","a + (b + x).suc = (a + (b + x)).suc","a + b + x.suc = (a + b + x).suc","b + x.suc = (b + x).suc","not add_assoc(a, b, x + 1)","x + 1 = x.suc","not add_assoc(a, b, x.suc)","add_assoc(a, b, x)","a + (b + x.suc) != a + b + x.suc","a + (b + x) = a + b + x"]}
{"goal":"add_assoc(a, b, c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","add_assoc(a, b, c) = f(c)","not f(c)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"add_assoc","proof":["not add_assoc(a, b, c) or a + (b + c) = a + b + c"]}
{"goal":"mul_zero","proof":["0 != 0 or 0 * a = 0","0 != 0 or a * 0 = 0","a * 0 = 0","0 * a != 0"]}
{"goal":"mul_suc","proof":["b + 1 != b.suc or a * (b + 1) = a * b + a","b + 1 != b.suc","b + 1 = 1 + b","1 + b = b.suc"]}
{"goal":"mul_suc_dual","proof":["a + 1 != a.suc or (a + 1) * b = a * b + b","a + 1 != a.suc","a + 1 = 1 + a","1 + a = a.suc"]}
{"goal":"one_mul_one","proof":["(0 + 1) * 1 = 0 * 1 + 1","0 * 1 != 0 or 0 * 1 + 1 = 1","0 * 1 = 0","0 + 1 = 1","(0 + 1) * 1 != 1","0 * 1 + 1 != 1"]}
{"goal":"f(0)","proof":["mul_comm(a, 0) = f(0)","a * 0 != 0 * a or mul_comm(a, 0)","not mul_comm(a, 0)","0 * a = 0","a * 0 = 0","a * 0 != 0 * a"]}
{"goal":"f(x + 1)","proof":["mul_comm(a, x + 1) = f(x + 1)","mul_comm(a, x) = f(x)","a * x.suc != x.suc * a or mul_comm(a, x.suc)","not mul_comm(a, x) or x * a = a * x","x.suc != x.suc or x * a + a = x.suc * a","x.suc != x.suc or a * x + a = a * x.suc","not mul_comm(a, x + 1)","x + 1 = x.suc","not mul_comm(a, x.suc)","mul_comm(a, x)","a * x + a = a * x.suc","x * a + a = x.suc * a","a * x.suc != x.suc * a","x * a = a * x"]}
{"goal":"mul_comm(a, b)","proof":["mul_comm(a, b) = f(b)","not f(b)","let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"mul_comm","proof":["not mul_comm(a, b) or b * a = a * b"]}
{"goal":"f(0)","proof":["distrib(a, b, 0) = f(0)","a * b + a * 0 != a * (b + 0) or distrib(a, b, 0)","not distrib(a, b, 0)","a * 0 = 0","a * b + 0 = a * b","b + 0 = b","a * b + a * 0 != a * (b + 0)"]}
{"goal":"distrib(a, b, x)","proof":["distrib(a, b, x) = f(x)"]}
{"goal":"a * (b + x) = a * b + a * x","proof":["not distrib(a, b, x) or a * b + a * x = a * (b + x)"]}
{"goal":"distrib(a, b, x + 1)","proof":["a * b + a * (x + 1) != a * (b + (x + 1)) or distrib(a, b, x + 1)","a * (x + 1) = a * x + a","a * b + (a * x + a) = a * b + a * x + a","b + (x + 1) = b + x + 1","a * b + a * (x + 1) != a * (b + (x + 1))"]}
{"goal":"distrib(a, b, c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","distrib(a, b, c) = f(c)","distrib(a, b, s0(f) + 1) = f(s0(f) + 1)","not f(c)","not f(s0(f)) or distrib(a, b, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","distrib(a, b, s0(f) + 1)","not distrib(a, b, s0(f) + 1)"]}
{"goal":"distrib","proof":["not distrib(a, b, c) or a * b + a * c = a * (b + c)"]}
{"goal":"distrib_dual","proof":["c * a + c * b = c * (a + b)","c * (a + b) = (a + b) * c","c * a = a * c","c * b = b * c"]}
{"goal":"f(0)","proof":["mul_assoc(a, b, 0) = f(0)","a * (b * 0) != a * b * 0 or mul_assoc(a, b, 0)","not mul_assoc(a, b, 0)","b * 0 != 0 or a * (b * 0) = 0","a * b * 0 = 0","b * 0 = 0","a * (b * 0) != a * b * 0","a * (b * 0) != 0"]}
{"goal":"a * b * x = a * (b * x)","proof":["mul_assoc(a, b, x) = f(x)","not mul_assoc(a, b, x) or a * (b * x) = a * b * x","mul_assoc(a, b, x)","not mul_assoc(a, b, x)"]}
{"goal":"f(x + 1)","proof":["mul_assoc(a, b, x + 1) = f(x + 1)","a * (b * (x + 1)) != a * b * (x + 1) or mul_assoc(a, b, x + 1)","a * (b * x) + a * b = a * (b * x + b)","b * (x + 1) = b * x + b","not mul_assoc(a, b, x + 1)","a * (b * x) + a * b = a * b * (x + 1)","a * b * (x + 1) = a * (b * x + b)","a * (b * (x + 1)) != a * b * (x + 1)","a * (b * (x + 1)) = a * b * (x + 1)"]}
{"goal":"mul_assoc(a, b, c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","mul_assoc(a, b, c) = f(c)","not f(c)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"mul_assoc","proof":["not mul_assoc(a, b, c) or a * (b * c) = a * b * c"]}
{"goal":"a * 0 + a = a","proof":["0 != 0 or a * 0 = 0","a * 0 != 0 or a * 0 + a = a","a * 0 != 0"]}
{"goal":"mul_one","proof":["(0 + 1) * a = 0 * a + a","a * 0 = 0 * a","a * 1 = 1 * a","0 + 1 = 1"]}
{"goal":"mul_one_dual","proof":["a * 1 = 1 * a","a * 1 != a","a * 1 = a"]}
{"goal":"a.suc != b.suc","proof":["b.suc != a.suc or b = a"]}
{"goal":"suc_cancels","proof":["a + 1 = 1 + a","b + 1 = 1 + b","1 + a = a.suc","1 + b = b.suc"]}
{"goal":"f(0)","proof":["add_identity(a, 0) = f(0)","0 != a or add_identity(a, 0)","a + 0 = 0 or add_identity(a, 0)","not add_identity(a, 0)","a + 0 = a","0 != a","a + 0 = 0","a + 0 != 0"]}
{"goal":"f(x + 1)","proof":["add_identity(a, x + 1) = f(x + 1)","add_identity(a, x) = f(x)","0 != a or add_identity(a, x + 1)","a + x.suc = x.suc or add_identity(a, x.suc)","a + x != x or not add_identity(a, x) or 0 = a","not add_identity(a, x + 1)","a + x.suc = (a + x).suc","(a + x).suc != x.suc or a + x = x","x + 1 = x.suc","not add_identity(a, x.suc)","add_identity(a, x)","0 != a","a + x != x","a + x.suc = x.suc","(a + x).suc != x.suc","(a + x).suc = x.suc"]}
{"goal":"add_identity(a, b)","proof":["add_identity(a, b) = f(b)","not f(b)","let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","f(s0(f) + 1)","not f(s0(f) + 1)"]}
{"goal":"add_identity","proof":["a + b != b or not add_identity(a, b) or 0 = a"]}
{"goal":"add_identity_dual","proof":["a + b != b or 0 = a","a + b != b","a + b = b + a"]}
{"goal":"f(0)","proof":["add_cancels(a, b, 0) = f(0)","a + 0 != a or add_cancels(a, a + 0, 0)","b + 0 = a + 0 or add_cancels(a, b, 0)","not add_cancels(a, b, 0)","a + 0 = a","b + 0 = b","add_cancels(a, a + 0, 0)","not add_cancels(a, b + 0, 0)","b + 0 = a + 0"]}
{"goal":"add_cancels(a, b, x)","proof":["add_cancels(a, b, x) = f(x)"]}
{"goal":"add_cancels(a, b, x + 1)","proof":["b != a or add_cancels(a, b, x + 1)","b + (x + 1) = a + (x + 1) or add_cancels(a, b, x + 1)","b + x != a + x or not add_cancels(a, b, x) or b = a","b != a","a + (x + 1) = a + x + 1","b + (x + 1) = b + x + 1","b + x != a + x","b + (x + 1) = a + (x + 1)","b + (x + 1) = a + x + 1","b + x + 1 != a + x + 1","b + x + 1 = a + x + 1"]}
{"goal":"add_cancels(a, b, c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","add_cancels(a, b, c) = f(c)","add_cancels(a, b, s0(f) + 1) = f(s0(f) + 1)","not f(c)","not f(s0(f)) or add_cancels(a, b, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(c)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(c)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","add_cancels(a, b, s0(f) + 1)","not add_cancels(a, b, s0(f) + 1)"]}
{"goal":"add_cancels","proof":["b + c != a + c or not add_cancels(a, b, c) or b = a"]}
{"goal":"add_cancels_dual","proof":["b + c != a + c or b = a","a + c = c + a","b + c = c + b","b + c != a + c","b + c = c + a"]}
{"goal":"exists(k0: Nat) { a + k0 = b and k0 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b or s0(a, b) = 0","not a < b or a + s0(a, b) = b","not a < b or s0(a, b) != 0","s0(a, b) != 0","a + s0(a, b) = b","a + s0(a, b) != b"]}
{"goal":"exists(k0: Nat) { b + k0 = c and n1 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","b + s0(b, c) != c or n1 = 0","b + s0(b, c) != c","not b < c or b + s0(b, c) = c"]}
{"goal":"a + (n1 + n2) = c","proof":["a + (n1 + n2) = a + n1 + n2"]}
{"goal":"lt_trans","proof":["a + (n1 + n2) != c or a < c or n1 + n2 = 0","n1 + n2 = 0","let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or 0 = x0 } }","s0(n1).suc + n2 = (s0(n1) + n2).suc","s0(n1).suc = n1 or n1 = 0","(s0(n1) + n2).suc != 0","s0(n1).suc = n1","s0(n1).suc + n2 = 0"]}
{"goal":"nat_is_transitive","proof":["let (s0: (Nat, Nat) -> Bool -> Nat, s1: (Nat, Nat) -> Bool -> Nat, s2: (Nat, Nat) -> Bool -> Nat) satisfy { forall(x0: (Nat, Nat) -> Bool, x1: Nat, x2: Nat, x3: Nat) { not is_transitive[Nat](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Nat, Nat) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Nat](x4) } and forall(x5: (Nat, Nat) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Nat](x5) } and forall(x6: (Nat, Nat) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Nat](x6) } }","not s0(Nat.lt) < s1(Nat.lt) or not s1(Nat.lt) < 0 + s2(Nat.lt) or s0(Nat.lt) < 0 + s2(Nat.lt)","not s0(Nat.lt) < s2(Nat.lt) or is_transitive[Nat](Nat.lt)","not s0(Nat.lt) < s2(Nat.lt)","s1(Nat.lt) < s2(Nat.lt) or is_transitive[Nat](Nat.lt)","s1(Nat.lt) < s2(Nat.lt)","s0(Nat.lt) < s1(Nat.lt) or is_transitive[Nat](Nat.lt)","s0(Nat.lt) < s1(Nat.lt)","0 + s2(Nat.lt) = s2(Nat.lt)","s1(Nat.lt) < 0 + s2(Nat.lt)","not s0(Nat.lt) < 0 + s2(Nat.lt)","not s1(Nat.lt) < 0 + s2(Nat.lt) or s0(Nat.lt) < 0 + s2(Nat.lt)"]}
{"goal":"exists(k0: Nat) { k0 != 0 and a + k0 = a }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, a) != a or s0(a, a) = 0","not a < a or a + s0(a, a) = a","not a < a or s0(a, a) != 0","s0(a, a) != 0","a + s0(a, a) = a","a + s0(a, a) != a"]}
{"goal":"not function(x0: Nat, x1: Nat) { x0 + x1 = x1 implies x0 = 0 }(a, a + n)","proof":["a + n != a or 0 = n"]}
{"goal":"false","proof":["a + n != a or 0 = n"]}
{"goal":"lt_and_eq_is_different_thing","proof":[]}
{"goal":"lt_acyclic","proof":["not a < b or not b < a or a < a","not a < b or a < a","a < a","not a < a"]}
{"goal":"nat_is_acyclic","proof":["let (s0: (Nat, Nat) -> Bool -> Nat, s1: (Nat, Nat) -> Bool -> Nat) satisfy { forall(x0: (Nat, Nat) -> Bool, x1: Nat, x2: Nat) { not is_acyclic[Nat](x0) or not x0(x1, x2) or not x0(x2, x1) } and forall(x3: (Nat, Nat) -> Bool) { x3(s0(x3), s1(x3)) or is_acyclic[Nat](x3) } and forall(x4: (Nat, Nat) -> Bool) { x4(s1(x4), s0(x4)) or is_acyclic[Nat](x4) } }","s1(Nat.lt) < s0(Nat.lt) or is_acyclic[Nat](Nat.lt)","s1(Nat.lt) < s0(Nat.lt)","s0(Nat.lt) < s1(Nat.lt) or is_acyclic[Nat](Nat.lt)","s0(Nat.lt) < s1(Nat.lt)","not s0(Nat.lt) < s1(Nat.lt) or not s1(Nat.lt) < s0(Nat.lt)"]}
{"goal":"is_acyclic[Nat](Nat.lt) and is_transitive[Nat](Nat.lt)","proof":["not is_transitive[Nat](Nat.lt)"]}
{"goal":"exists(k0: Nat) { a + k0 = 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 0 != 0","a + s0(a, 0) != 0","not a < 0 or a + s0(a, 0) = 0","not a < 0","not a <= 0 or a < 0 or 0 = a","0 = a","0 != a or a + 0 = 0"]}
{"goal":"only_zero_lte_zero","proof":["0 + a != a or 0 < a or 0 = a","not a <= 0 or a < 0 or 0 = a","a < 0","not a < 0 or not 0 < a","0 + a = a","0 + a != a or 0 < a","not 0 < a","0 < a"]}
{"goal":"a != 0","proof":["0 < 0","not 0 < 0 or not 0 < 0"]}
{"goal":"false","proof":["not a < 0 or a <= 0","not a <= 0 or 0 = a","a <= 0","not a <= 0"]}
{"goal":"not_lt_zero","proof":[]}
{"goal":"zero_or_suc","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or 0 = x0 } }","s0(a) + 1 != a","s0(a).suc = a or 0 = a","s0(a).suc = a","s0(a) + 1 = s0(a).suc"]}
{"goal":"exists(k0: Nat) { a + 1 + k0 = b + 1 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + 1 + s0(a + 1, b + 1) != b + 1","not a + 1 < b + 1 or a + 1 + s0(a + 1, b + 1) = b + 1"]}
{"goal":"a + n = b","proof":["1 + a + n = 1 + (a + n)","a + 1 = 1 + a","a + n + 1 = 1 + (a + n)"]}
{"goal":"lt_cancel_suc","proof":["a + n != b or a < b or n = 0","n = 0","not b + 1 < a + 1 or not a + 1 < b + 1","n + (a + 1) = a + 1 + n","a + 1 = a.suc","0 + a.suc = a.suc","not b + 1 < a + 1"]}
{"goal":"lte_cancel_suc","proof":["not a + 1 < b + 1 or a < b","not a + 1 <= b + 1 or a + 1 < b + 1 or b + 1 = a + 1","b + 1 != a + 1 or b = a","not a < b or a <= b","not a < b","b != a or a <= b","b != a","b + 1 != a + 1","not a + 1 < b + 1","a + 1 < b + 1"]}
{"goal":"lt_and_lte","proof":["not a < b or not b < c or a < c","not b <= c or b < c or c = b","not b < c or not a < b","not b < c","c = b"]}
{"goal":"lte_and_lt","proof":["not a < b or not b < c or a < c","not a <= b or a < b or b = a","not b < c or not a < b","not a < b","b = a"]}
{"goal":"lte_trans","proof":["not b <= c or not a < b or a < c","not a <= b or a < b or b = a","not a < c or a <= c","not a < c","a < b or b = a","not a < b or a < c","not a < b","b = a"]}
{"goal":"exists(k0: Nat) { a + k0 = b and k0 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b or s0(a, b) = 0","not a < b or a + s0(a, b) = b","not a < b or s0(a, b) != 0","s0(a, b) != 0","a + s0(a, b) = b","a + s0(a, b) != b"]}
{"goal":"exists(k0: Nat) { n = k0 + 1 }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(n) + 1 != n","s0(n) + 1 = n or n = 0"]}
{"goal":"a + 1 = b","proof":["0 + 1 = n","a + 1 != a + n","1 != n","0 + 1 = 1"]}
{"goal":"m != 0","proof":[]}
{"goal":"a + m + 1 = b","proof":["a + (m + 1) = a + m + 1"]}
{"goal":"a + 1 < b","proof":["1 + a + m = 1 + (a + m)","a + 1 + m != b or a + 1 < b or m = 0","a + 1 = 1 + a","a + m + 1 = 1 + (a + m)","a + 1 + m != b or m = 0","a + 1 + m != b"]}
{"goal":"lt_suc_left","proof":["not a + 1 < b or a + 1 <= b","not a + 1 < b","m = 0","a + 1 != b or a + 1 <= b","a + 1 = b","a + 1 != b"]}
{"goal":"exists(k0: Nat) { a + k0 = b + 1 and k0 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b + 1) != b + 1 or s0(a, b + 1) = 0","not a < b + 1 or a + s0(a, b + 1) = b + 1","not a < b + 1 or s0(a, b + 1) != 0","s0(a, b + 1) != 0","a + s0(a, b + 1) = b + 1","a + s0(a, b + 1) != b + 1"]}
{"goal":"exists(k0: Nat) { n = k0 + 1 }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(n) + 1 != n","s0(n) + 1 = n or n = 0"]}
{"goal":"a + m = b","proof":["a + m.suc = (a + m).suc","b + 1 = 1 + b","m + 1 = 1 + m","(a + m).suc != b.suc or a + m = b","(a + m).suc != b.suc","1 + b = b.suc","1 + m = m.suc"]}
{"goal":"a = b","proof":["a + m != a","a + 0 != a","0 != 0 or a + 0 = a"]}
{"goal":"a < b","proof":["a + m != b or a < b or m = 0"]}
{"goal":"lt_suc_right","proof":["not a + 1 <= b + 1 or a <= b","not a < b + 1 or a + 1 <= b + 1","not a + 1 <= b + 1","a + 1 <= b + 1"]}
{"goal":"exists(k0: Nat) { a + k0 = b }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","a + s0(a, b) != b","not a < b or a + s0(a, b) = b"]}
{"goal":"a + c + n = b + c","proof":["c + (a + n) = c + a + n","c + a = a + c","c + b = b + c"]}
{"goal":"lt_add_left","proof":["a + c + n != b + c or a + c < b + c or n = 0","n = 0","not b < a or not a < b","a + 0 = 0 + a","0 + a = a","not b < a"]}
{"goal":"0 = a or 0 < a","proof":["0 + a != a or 0 < a or 0 = a","0 != 0 or 0 + a = a","0 + a != a or 0 = a","0 + a != a"]}
{"goal":"f(0)","proof":["trichotomy(a, 0) = f(0)","0 != a or trichotomy(a, 0)","not 0 < a or trichotomy(a, 0)","not trichotomy(a, 0)","0 != a","not 0 < a","0 < a"]}
{"goal":"trichotomy(a, x)","proof":["trichotomy(a, x) = f(x)"]}
{"goal":"a < x or x < a or a = x","proof":["not trichotomy(a, x) or a < x or x < a or x = a"]}
{"goal":"a < x + 1","proof":["not a <= x or not x < x + 1 or a < x + 1","x + 1 != x + 1 or x < x + 1 or 1 = 0","0.suc != 0","not x < x + 1 or not a <= x","not x < x + 1","x < x + 1 or 1 = 0","1 = 0"]}
{"goal":"trichotomy(a, x + 1)","proof":["not a < x + 1 or trichotomy(a, x + 1)"]}
{"goal":"x + 1 <= a","proof":["not x < a or x + 1 <= a"]}
{"goal":"trichotomy(a, x + 1)","proof":["x + 1 != a or trichotomy(a, x + 1)","not x + 1 < a or trichotomy(a, x + 1)","x + 1 != a","not x + 1 < a","not x + 1 <= a or x + 1 < a or x + 1 = a"]}
{"goal":"trichotomy(a, x + 1)","proof":["not a < x or a <= x","not a < x","x = a","x != a or a <= x"]}
{"goal":"trichotomy(a, b)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","trichotomy(a, b) = f(b)","trichotomy(a, s0(f) + 1) = f(s0(f) + 1)","not f(b)","not f(s0(f)) or trichotomy(a, s0(f) + 1)","not f(s0(f).suc) or not f(0) or f(b)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(b)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","trichotomy(a, s0(f) + 1)","not trichotomy(a, s0(f) + 1)"]}
{"goal":"trichotomy","proof":["not trichotomy(a, b) or a < b or b < a or b = a"]}
{"goal":"0 = 0 * n + 0","proof":["0 != 0 or 0 * n = 0","0 * n != 0 or 0 * n + 0 = 0","0 * n != 0"]}
{"goal":"division_theorem(0, n)","proof":["0 * n + 0 != 0 or not 0 < n or division_theorem(0, n)"]}
{"goal":"f(0)","proof":["division_theorem(0, n) = f(0)"]}
{"goal":"division_theorem(x, n)","proof":["division_theorem(x, n) = f(x)"]}
{"goal":"exists(k0: Nat, k1: Nat) { k1 < n and x = k0 * n + k1 }","proof":["let (s0: (Nat, Nat) -> Nat, s1: (Nat, Nat) -> Nat) satisfy { forall(x0: Nat, x1: Nat) { not 0 < x0 or not division_theorem(x1, x0) or s1(x1, x0) < x0 } and forall(x2: Nat, x3: Nat) { not 0 < x2 or not division_theorem(x3, x2) or s0(x3, x2) * x2 + s1(x3, x2) = x3 } and forall(x4: Nat, x5: Nat) { 0 < x4 or division_theorem(x5, x4) } and forall(x6: Nat, x7: Nat, x8: Nat, x9: Nat) { x6 * x7 + x8 != x9 or not x8 < x7 or division_theorem(x9, x7) } }","s0(x, n) * n + s1(x, n) != x or not s1(x, n) < n","not 0 < n or not division_theorem(x, n) or s1(x, n) < n","not 0 < n or not division_theorem(x, n) or s0(x, n) * n + s1(x, n) = x","s1(x, n) < n","s0(x, n) * n + s1(x, n) = x"]}
{"goal":"x + 1 = q * n + r + 1","proof":["q * n + r != x"]}
{"goal":"x + 1 = q * n + (r + 1)","proof":["q * n + (r + 1) = q * n + r + 1"]}
{"goal":"x + 1 = q * n + n","proof":["q * n + (r + 1) != x + 1"]}
{"goal":"x + 1 = (q + 1) * n + 0","proof":["(q + 1) * n = q * n + n","q * n + n + 0 != x + 1","x + 1 + 0 != x + 1","0 != 0 or x + 1 + 0 = x + 1"]}
{"goal":"division_theorem(x + 1, n)","proof":["(q + 1) * n + 0 != x + 1 or not 0 < n or division_theorem(x + 1, n)"]}
{"goal":"r + 1 < n","proof":["not r < n or r + 1 <= n","not r + 1 <= n or r + 1 < n or r + 1 = n","r + 1 <= n","not r + 1 <= n"]}
{"goal":"x + 1 = q * n + r + 1","proof":["q * n + r != x"]}
{"goal":"division_theorem(x + 1, n)","proof":["q * n + (r + 1) != x + 1 or not r + 1 < n or division_theorem(x + 1, n)","q * n + (r + 1) = q * n + r + 1","q * n + (r + 1) != x + 1 or not r + 1 < n","q * n + (r + 1) != x + 1"]}
{"goal":"division_theorem(x + 1, n)","proof":[]}
{"goal":"division_theorem(m, n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","division_theorem(m, n) = f(m)","division_theorem(s0(f) + 1, n) = f(s0(f) + 1)","not f(m)","not f(s0(f)) or division_theorem(s0(f) + 1, n)","not f(s0(f).suc) or not f(0) or f(m)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(m)","f(s0(f))","s0(f) + 1 = s0(f).suc","not f(s0(f) + 1)","division_theorem(s0(f) + 1, n)","not division_theorem(s0(f) + 1, n)"]}
{"goal":"division_theorem","proof":["let (s0: (Nat, Nat) -> Nat, s1: (Nat, Nat) -> Nat) satisfy { forall(x0: Nat, x1: Nat) { not 0 < x0 or not division_theorem(x1, x0) or s1(x1, x0) < x0 } and forall(x2: Nat, x3: Nat) { not 0 < x2 or not division_theorem(x3, x2) or s0(x3, x2) * x2 + s1(x3, x2) = x3 } and forall(x4: Nat, x5: Nat) { 0 < x4 or division_theorem(x5, x4) } and forall(x6: Nat, x7: Nat, x8: Nat, x9: Nat) { x6 * x7 + x8 != x9 or not x8 < x7 or division_theorem(x9, x7) } }","s0(m, n) * n + s1(m, n) != m or not s1(m, n) < n","not 0 < n or not division_theorem(m, n) or s1(m, n) < n","not 0 < n or not division_theorem(m, n) or s0(m, n) * n + s1(m, n) = m","s1(m, n) < n","s0(m, n) * n + s1(m, n) = m"]}
{"goal":"exists(k0: Nat) { k0 + 1 = b }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0) + 1 = x0 or 0 = x0 } }","s0(b) + 1 != b","s0(b) + 1 = b or 0 = b"]}
{"goal":"a * b = a * b_pred + a","proof":["a * (b_pred + 1) = a * b_pred + a"]}
{"goal":"mul_to_nonzero","proof":["a * b_pred + a = 0","a * b_pred + a != 0 or a * b_pred < 0 or 0 = a","a * b_pred < 0","not a * b_pred < 0"]}
{"goal":"mul_to_zero","proof":["a * b != 0 or 0 = a or 0 = b"]}
{"goal":"exists(k0: Nat) { k0 + 1 = b and k0 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","s0(1, b) + 1 != b or s0(1, b) = 0","not 1 < b or 1 + s0(1, b) = b","not 1 < b or s0(1, b) != 0","s0(1, b) + 1 = 1 + s0(1, b)","s0(1, b) != 0","1 + s0(1, b) = b","s0(1, b) + 1 != b","s0(1, b) + 1 = b"]}
{"goal":"a * b = a * b_pred + a","proof":["a * (b_pred + 1) = a * b_pred + a"]}
{"goal":"mul_increase","proof":["a + a * b_pred != a * b or a < a * b or a * b_pred = 0","a * b_pred != 0 or 0 = a or b_pred = 0","a + a * b_pred = a * b_pred + a","a + a * b_pred != a * b or a * b_pred = 0","a * b_pred != 0 or 0 = a","a * b_pred != 0","a + a * b_pred = a * b","a + a * b_pred != a * b"]}
{"goal":"divides_self","proof":["a * 1 != a or a.divides(a)","a * 1 != a","a * 1 = a"]}
{"goal":"exists(k0: Nat) { a1 * k0 = a2 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","a1 * s0(a1, a2) != a2","not a1.divides(a2) or a1 * s0(a1, a2) = a2"]}
{"goal":"exists(k0: Nat) { a2 * k0 = a3 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","a2 * s0(a2, a3) != a3","not a2.divides(a3) or a2 * s0(a2, a3) = a3"]}
{"goal":"a1 * (b1 * b2) = a3","proof":["a1 * (b1 * b2) = a1 * b1 * b2"]}
{"goal":"divides_trans","proof":["a1 * (b1 * b2) != a3 or a1.divides(a3)"]}
{"goal":"non_index_is_empty","proof":["let s0: Set[Nat] -> Nat satisfy { forall(x0: Set[Nat], x1: Nat) { not x0.is_empty or not x1 ∈ x0 } and forall(x2: Set[Nat]) { s0(x2) ∈ x2 or x2.is_empty } }","s0(finite_index(0)) ∈ finite_index(0) or finite_index(0).is_empty","s0(finite_index(0)) ∈ Set.new[Nat](element_in_finite_index(0)) = element_in_finite_index(0, s0(finite_index(0)))","Set.new[Nat](element_in_finite_index(0)) = finite_index(0)","not element_in_finite_index(0, s0(finite_index(0))) or 0 != 0","not finite_index(0).is_empty or finite_index(0) = empty[Nat]","not finite_index(0).is_empty","not element_in_finite_index(0, s0(finite_index(0)))","not s0(finite_index(0)) ∈ Set.new[Nat](element_in_finite_index(0)) or element_in_finite_index(0, s0(finite_index(0)))","s0(finite_index(0)) ∈ finite_index(0)","s0(finite_index(0)) ∈ Set.new[Nat](element_in_finite_index(0))"]}
{"goal":"m.in_space = empty[Nat]","proof":["let s0: (Set[Nat], Set[K], Nat -> K) -> Nat satisfy { forall(x0: Set[Nat], x1: Set[K], x2: Nat -> K) { Map.new[Nat, K](x0, x1, x2).in_space = x0 or s0(x0, x1, x2) ∈ x0 } and forall(x3: Set[K], x4: Nat -> K, x5: Set[Nat]) { not x4(s0(x5, x3, x4)) ∈ x3 or Map.new[Nat, K](x5, x3, x4).in_space = x5 } }","Map.new[Nat, K](empty[Nat], empty[K], fn).in_space = empty[Nat] or s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","Map.new[Nat, K](empty[Nat], empty[K], fn).in_space != empty[Nat]","not empty[Nat].is_empty or not s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","empty[Nat] != empty[Nat] or empty[Nat].is_empty","empty[Nat].is_empty","s0(empty[Nat], empty[K], fn) ∈ empty[Nat]"]}
{"goal":"m.in_space = finite_index(0)","proof":["let s0: (Set[Nat], Set[K], Nat -> K) -> Nat satisfy { forall(x0: Set[Nat], x1: Set[K], x2: Nat -> K) { Map.new[Nat, K](x0, x1, x2).in_space = x0 or s0(x0, x1, x2) ∈ x0 } and forall(x3: Set[K], x4: Nat -> K, x5: Set[Nat]) { not x4(s0(x5, x3, x4)) ∈ x3 or Map.new[Nat, K](x5, x3, x4).in_space = x5 } }","Map.new[Nat, K](empty[Nat], empty[K], fn).in_space = empty[Nat] or s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","not empty[Nat].is_empty or not s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","empty[Nat] != empty[Nat] or empty[Nat].is_empty","empty[Nat].is_empty","Map.new[Nat, K](empty[Nat], empty[K], fn).in_space != finite_index(0)","Map.new[Nat, K](empty[Nat], empty[K], fn).in_space != empty[Nat]","s0(empty[Nat], empty[K], fn) ∈ empty[Nat]"]}
{"goal":"m.out_space = empty[K]","proof":["let s0: (Set[Nat], Set[K], Nat -> K) -> Nat satisfy { forall(x0: Set[Nat], x1: Set[K], x2: Nat -> K) { Map.new[Nat, K](x0, x1, x2).out_space = x1 or s0(x0, x1, x2) ∈ x0 } and forall(x3: Set[K], x4: Nat -> K, x5: Set[Nat]) { not x4(s0(x5, x3, x4)) ∈ x3 or Map.new[Nat, K](x5, x3, x4).out_space = x3 } }","Map.new[Nat, K](empty[Nat], empty[K], fn).out_space = empty[K] or s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","Map.new[Nat, K](empty[Nat], empty[K], fn).out_space != empty[K]","not empty[Nat].is_empty or not s0(empty[Nat], empty[K], fn) ∈ empty[Nat]","empty[Nat] != empty[Nat] or empty[Nat].is_empty","empty[Nat].is_empty","s0(empty[Nat], empty[K], fn) ∈ empty[Nat]"]}
{"goal":"m.is_bijective","proof":["m.out_space = empty[K]","let (s0: (Map[Nat, K], K) -> Nat, s1: Map[Nat, K] -> K) satisfy { forall(x0: Map[Nat, K], x1: K) { not x1 ∈ x0.out_space or not x0.is_surjective or s0(x0, x1) ∈ x0.in_space } and forall(x2: Map[Nat, K], x3: K) { not x3 ∈ x2.out_space or not x2.is_surjective or x2.fn(s0(x2, x3)) = x3 } and forall(x4: Map[Nat, K]) { s1(x4) ∈ x4.out_space or x4.is_surjective } and forall(x5: Map[Nat, K], x6: Nat) { not x6 ∈ x5.in_space or x5.fn(x6) != s1(x5) or x5.is_surjective } }","s1(m) ∈ m.out_space or m.is_surjective","let (s2: Map[Nat, K] -> Nat, s3: Map[Nat, K] -> Nat) satisfy { forall(x7: Map[Nat, K], x8: Nat, x9: Nat) { not x8 ∈ x7.in_space or not x9 ∈ x7.in_space or not x7.is_injective or x7.fn(x8) != x7.fn(x9) or x8 = x9 } and forall(x10: Map[Nat, K]) { s2(x10) ∈ x10.in_space or x10.is_injective } and forall(x11: Map[Nat, K]) { s3(x11) ∈ x11.in_space or x11.is_injective } and forall(x12: Map[Nat, K]) { x12.fn(s3(x12)) = x12.fn(s2(x12)) or x12.is_injective } and forall(x13: Map[Nat, K]) { s3(x13) != s2(x13) or x13.is_injective } }","s3(m) ∈ m.in_space or m.is_injective","not m.is_surjective or not m.is_injective or m.is_bijective","not m.out_space.is_empty or not s1(m) ∈ m.out_space","not m.in_space.is_empty or not s3(m) ∈ m.in_space","m.out_space != empty[K] or m.out_space.is_empty","m.in_space != empty[Nat] or m.in_space.is_empty","m.in_space = empty[Nat]","m.in_space.is_empty","m.out_space.is_empty","not s1(m) ∈ m.out_space","not s3(m) ∈ m.in_space","m.is_injective","m.is_surjective","not m.is_surjective"]}
{"goal":"exists(k0: Nat, k1: Set[K]) { k1.is_finite_set_with_number(k0) }","proof":["not m.out_space.is_finite_set_with_number(0)","not m.is_bijective or m.in_space != finite_index(0) or m.out_space != m.out_space or m.out_space.is_finite_set_with_number(0)","not m.is_bijective or m.in_space != finite_index(0) or m.out_space != m.out_space","not m.is_bijective or m.in_space != finite_index(0)"]}
{"goal":"nat_set_uncountable","proof":["let (s0: (Nat -> Set[Nat], Set[Nat]) -> Nat, s1: Nat -> Set[Nat] -> Set[Nat]) satisfy { forall(x0: Nat -> Set[Nat], x1: Set[Nat]) { not is_surjective[Nat, Set[Nat]](x0) or x0(s0(x0, x1)) = x1 } and forall(x2: Nat -> Set[Nat], x3: Nat) { s1(x2) != x2(x3) or is_surjective[Nat, Set[Nat]](x2) } }","let (s2: (Nat -> Set[Nat], Set[Nat]) -> Nat, s3: Nat -> Set[Nat] -> Set[Nat]) satisfy { forall(x4: Nat -> Set[Nat], x5: Set[Nat]) { not set.is_surjective[Nat, Set[Nat]](x4) or x4(s2(x4, x5)) = x5 } and forall(x6: Nat -> Set[Nat], x7: Nat) { s3(x6) != x6(x7) or set.is_surjective[Nat, Set[Nat]](x6) } }","not is_surjective[Nat, Set[Nat]](f) or f(s0(f, s3(f))) = s3(f)","f(s0(f, s3(f))) = s3(f)","f(s0(f, s3(f))) != s3(f) or set.is_surjective[Nat, Set[Nat]](f)"]}
{"goal":"true_below(f, 0)","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","s0(f, 0) < 0 or true_below(f, 0)","s0(f, 0) < 0","not s0(f, 0) < 0"]}
{"goal":"g(0)","proof":["true_below(f, 0) = g(0)"]}
{"goal":"true_below(f, x)","proof":["true_below(f, x) = g(x)"]}
{"goal":"f(x)","proof":["not true_below(f, x) or f(x)"]}
{"goal":"f(y)","proof":["not true_below(f, x) or not y < x or f(y)","not true_below(f, x) or not y < x"]}
{"goal":"y = x","proof":["not y < x + 1 or y <= x","not y <= x or y < x or y = x","not y <= x","x + 1 = x.suc","not y < x + 1","y < x + 1"]}
{"goal":"f(y)","proof":["not f(x)"]}
{"goal":"f(y)","proof":[]}
{"goal":"true_below(f, x.suc)","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","not s0(f, x.suc) < x.suc or f(s0(f, x.suc))","s0(f, x.suc) < x.suc or true_below(f, x.suc)","not f(s0(f, x.suc)) or true_below(f, x.suc)","not f(s0(f, x.suc))","s0(f, x.suc) < x.suc","not s0(f, x.suc) < x.suc"]}
{"goal":"g(x.suc)","proof":["true_below(f, x.suc) = g(x.suc)"]}
{"goal":"g(x)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not g(s0(g)) or g(s0(g).suc)","not g(s0(g).suc) or not g(0) or g(x)","not g(s0(g).suc)","not g(0) or g(s0(g)) or g(x)","not g(s0(g))","g(s0(g))"]}
{"goal":"g(n.suc)","proof":["g(n.suc)"]}
{"goal":"true_below(f, n.suc)","proof":["g(n.suc)","true_below(f, n.suc) = g(n.suc)"]}
{"goal":"f(n)","proof":["g(n)","true_below(f, n) = g(n)","not true_below(f, n) or f(n)","not true_below(f, n)"]}
{"goal":"strong_induction","proof":["let s0: Nat satisfy { not f(s0) }","f(s0)"]}
