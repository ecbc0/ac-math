{"goal":"exists(k0: Nat) { k0.proper_divides(n) }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.proper_divides(x2) or x2.is_composite } }","not s0(n).proper_divides(n)","not n.is_composite or s0(n).proper_divides(n)"]}
{"goal":"exists(k0: Nat) { a * k0 = n }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.proper_divides(x1) or 0 != x1 } and forall(x2: Nat, x3: Nat) { not x2.proper_divides(x3) or 1 < x2 } and forall(x4: Nat, x5: Nat) { not x4.proper_divides(x5) or x4 < x5 } and forall(x6: Nat, x7: Nat) { not x6.proper_divides(x7) or x6 * s0(x6, x7) = x7 } and forall(x8: Nat, x9: Nat, x10: Nat) { not 1 < x8 or not x8 < x9 or x8 * x10 != x9 or x8.proper_divides(x9) or 0 = x9 } }","a * s0(a, n) != n","not a.proper_divides(n) or a * s0(a, n) = n"]}
{"goal":"b.proper_divides(n)","proof":["not a.proper_divides(n) or a * b != n or b.proper_divides(n)"]}
{"goal":"1 < a and a < n and (1 < b and b < n) and a * b = n","proof":["not 1 < b or not 1 < a or not b < n or not a < n","not a.proper_divides(n) or a < n","not b.proper_divides(n) or b < n","not a.proper_divides(n) or 1 < a","not b.proper_divides(n) or 1 < b","1 < b","1 < a","b < n","a < n","not a < n"]}
{"goal":"n.is_direct_composite","proof":["not 1 < a or not 1 < b or not a < n or not b < n or a * b != n or n.is_direct_composite"]}
{"goal":"composite_is_direct_composite","proof":["n.is_direct_composite or n.is_composite","not n.is_direct_composite or not n.is_composite","not n.is_composite","n.is_direct_composite","let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(n) or not s0(n) < n or s0(n) * s1(n) != n or s0(n).proper_divides(n) or 0 = n","not n <= 0 or not s1(n) < n or s1(n) < 0","not n.is_direct_composite or s0(n) * s1(n) = n","not n.is_direct_composite or s1(n) < n","not n.is_direct_composite or s0(n) < n","not n.is_direct_composite or 1 < s0(n)","not s0(n).proper_divides(n) or n.is_composite","not s0(n).proper_divides(n)","0 != n or n <= 0","not s1(n) < 0","1 < s0(n)","s0(n) < n","s1(n) < n","s0(n) * s1(n) = n","not n <= 0 or s1(n) < 0","not n <= 0","0 = n","0 != n"]}
{"goal":"n.is_direct_composite implies n.is_normal_composite","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(n) or not 1 < s1(n) or s0(n) * s1(n) != n or n.is_normal_composite","not n.is_direct_composite or s0(n) * s1(n) = n","not n.is_direct_composite or 1 < s1(n)","not n.is_direct_composite or 1 < s0(n)","1 < s0(n)","1 < s1(n)","s0(n) * s1(n) = n"]}
{"goal":"exists(k0: Nat, k1: Nat) { 1 < k0 and 1 < k1 and k0 * k1 = n }","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_normal_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_normal_composite or 1 < s1(x1) } and forall(x2: Nat) { not x2.is_normal_composite or s0(x2) * s1(x2) = x2 } and forall(x3: Nat, x4: Nat, x5: Nat) { not 1 < x3 or not 1 < x4 or x3 * x4 != x5 or x5.is_normal_composite } }","not 1 < s0(n) or not 1 < s1(n) or s0(n) * s1(n) != n","not n.is_normal_composite or s0(n) * s1(n) = n","not n.is_normal_composite or 1 < s1(n)","not n.is_normal_composite or 1 < s0(n)","1 < s0(n)","1 < s1(n)","s0(n) * s1(n) = n"]}
{"goal":"a != 0","proof":["1 < 0","not 1 < 0"]}
{"goal":"b != 0","proof":["1 < 0","not 1 < 0 or 1 - 0 = 0","1 - 0 = 0","not 0 < 1 or not 1 < 0","not 0 < 1","0 > 1 = 1 < 0","1 > 0 = 0 < 1","1 - 0 = 1"]}
{"goal":"a <= n","proof":["not a <= a * b","not b <= 0 or not 1 < b or 1 < 0","a <= a * b or b = 0","b != 0 or b <= 0","not 1 < 0","not b <= 0 or 1 < 0","not b <= 0","b = 0","b != 0"]}
{"goal":"b <= n","proof":["b * a != n or b <= n or 0 = n","n + 1 > a = n >= a","not a < 1 or not 1 < a","n >= a = a <= n","1 > a = a < 1","b * a = a * b","b * a != n or 0 = n","n + 1 = n.suc","not a < 1","b * a = n","0 = n"]}
{"goal":"a != 1","proof":["1 < 1","not 1 < 1 or not 1 < 1"]}
{"goal":"b != 1","proof":["1 < 1","not 1 < 1 or not 1 < 1"]}
{"goal":"a != n","proof":["1 < n","n * b = n","not n <= 0 or not 1 < n or 1 < 0","b * n != n or 1 = b or 0 = n","b * n = n * b","b * n = n","0 != n or n <= 0","not 1 < 0","not n <= 0 or 1 < 0","not n <= 0","0 = n","0 != n"]}
{"goal":"b != n","proof":["1 < n","a * n = n","a * n != n or 1 = a or 0 = n","0 = n","not 1 < n or 1 - n = 0","1 - n = 0","1 - 0 = 1"]}
{"goal":"a < n","proof":["not 1 < b or a < a * b or 0 = a","not a < a * b","not a <= 0 or not 1 < a or 1 < 0","0 != a or a <= 0","not 1 < 0","not a <= 0 or 1 < 0","not a <= 0","0 = a","0 != a"]}
{"goal":"b < n","proof":["not 1 < a or not a < n or a * b != n or a.proper_divides(n) or 0 = n","not a.proper_divides(n) or a * b != n or b.proper_divides(n)","not b.proper_divides(n) or b < n","not b.proper_divides(n)","not a.proper_divides(n)","0 = n","not a < 0"]}
{"goal":"n.is_direct_composite","proof":["not 1 < a or not 1 < b or not a < n or not b < n or a * b != n or n.is_direct_composite"]}
{"goal":"normal_composite_is_direct_composite","proof":["n.is_normal_composite or n.is_direct_composite","not n.is_normal_composite or not n.is_direct_composite","n.is_normal_composite","not n.is_normal_composite"]}
{"goal":"composite_is_normal_composite","proof":["n.is_normal_composite = n.is_direct_composite","n.is_direct_composite != n.is_composite","n.is_direct_composite = n.is_composite"]}
{"goal":"n.is_prime implies not n.is_composite","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.proper_divides(x2) or x2.is_composite } }","not n.is_composite or s0(n).proper_divides(n)","s0(n).proper_divides(n)","not n.is_prime or not s0(n).proper_divides(n)"]}
{"goal":"composite_is_not_prime","proof":["not n.is_composite","not n > 1 or not n.is_prime","let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_prime or x0 > 1 } and forall(x1: Nat, x2: Nat) { not x1.is_prime or not x2.proper_divides(x1) } and forall(x3: Nat) { not x3 > 1 or s0(x3).proper_divides(x3) or x3.is_prime } }","not n > 1 or s0(n).proper_divides(n) or n.is_prime","not n.is_prime or n > 1","not s0(n).proper_divides(n) or n.is_composite","not s0(n).proper_divides(n)","not n > 1 or n.is_prime","n.is_prime","not n > 1","n > 1"]}
{"goal":"not n.is_prime implies n <= 1 or n.is_composite","proof":["1 < n or n < 1 or 1 = n","not n > 1 or n.is_prime or n.is_composite","not n > 1","n > 1 = 1 < n","not 1 < n","not n < 1 or n <= 1","not n < 1","1 != n or n <= 1","1 = n","1 != n"]}
{"goal":"n <= 1 or n.is_composite implies not n.is_prime","proof":["not n <= 1 or not 1 < n or 1 < 1","n > 1 = 1 < n","not n.is_prime or n > 1","n > 1","1 < n","not n.is_prime or not n.is_composite","not n.is_composite","n <= 1","not 1 < 1","not 1 < n or 1 < 1"]}
{"goal":"not_prime_iff_lte_one_or_composite","proof":["not n.is_composite","not n <= 1","n.is_prime","not n.is_prime"]}
{"goal":"k.divides(k)","proof":["k * 1 != k or k.divides(k)","k * 1 != k","k * 1 = k"]}
{"goal":"has_prime_divisor(k)","proof":["not k.is_prime or not k.divides(k) or has_prime_divisor(k)"]}
{"goal":"k.is_direct_composite","proof":["k.is_direct_composite = k.is_composite"]}
{"goal":"exists(k0: Nat, k1: Nat) { 1 < k0 and k0 < k and k = k0 * k1 }","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(k) or not s0(k) < k or s0(k) * s1(k) != k","not k.is_direct_composite or s0(k) * s1(k) = k","not k.is_direct_composite or s0(k) < k","not k.is_direct_composite or 1 < s0(k)","1 < s0(k)","s0(k) < k","s0(k) * s1(k) = k"]}
{"goal":"has_prime_divisor(b)","proof":["not true_below(has_prime_divisor, k) or not b < k or has_prime_divisor(b)","not true_below(has_prime_divisor, k) or not b < k"]}
{"goal":"exists(k0: Nat) { k0.is_prime and k0.divides(b) }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not 1 < x0 or not has_prime_divisor(x0) or s0(x0).is_prime } and forall(x1: Nat) { not 1 < x1 or not has_prime_divisor(x1) or s0(x1).divides(x1) } and forall(x2: Nat) { 1 < x2 or has_prime_divisor(x2) } and forall(x3: Nat, x4: Nat) { not x3.is_prime or not x3.divides(x4) or has_prime_divisor(x4) } }","not s0(b).divides(b) or not s0(b).is_prime","not 1 < b or not has_prime_divisor(b) or s0(b).is_prime","not 1 < b or not has_prime_divisor(b) or s0(b).divides(b)","s0(b).is_prime","s0(b).divides(b)","not s0(b).divides(b)"]}
{"goal":"p.divides(k)","proof":["not p.divides(b * c)","not p.divides(b) or p.divides(b * c)"]}
{"goal":"has_prime_divisor(k)","proof":["not p.is_prime or not p.divides(k) or has_prime_divisor(k)"]}
{"goal":"has_prime_divisor(k)","proof":["1 < k or has_prime_divisor(k)","1 < k","not k > 1 or k.is_prime or k.is_composite","not k > 1","k > 1 = 1 < k"]}
{"goal":"has_prime_divisor(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { true_below(x0, s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2)) or x2(x3) } }","not true_below(has_prime_divisor, s0(has_prime_divisor)) or has_prime_divisor(s0(has_prime_divisor))","true_below(has_prime_divisor, s0(has_prime_divisor)) or has_prime_divisor(n)","true_below(has_prime_divisor, s0(has_prime_divisor))","not has_prime_divisor(s0(has_prime_divisor)) or has_prime_divisor(n)","has_prime_divisor(s0(has_prime_divisor))","not has_prime_divisor(s0(has_prime_divisor))"]}
{"goal":"has_prime_divisor","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not 1 < x0 or not has_prime_divisor(x0) or s0(x0).is_prime } and forall(x1: Nat) { not 1 < x1 or not has_prime_divisor(x1) or s0(x1).divides(x1) } and forall(x2: Nat) { 1 < x2 or has_prime_divisor(x2) } and forall(x3: Nat, x4: Nat) { not x3.is_prime or not x3.divides(x4) or has_prime_divisor(x4) } }","not s0(n).divides(n) or not s0(n).is_prime","not 1 < n or not has_prime_divisor(n) or s0(n).is_prime","not 1 < n or not has_prime_divisor(n) or s0(n).divides(n)","s0(n).is_prime","s0(n).divides(n)","not s0(n).divides(n)"]}
{"goal":"forall(x0: Nat, x1: Nat, x2: Nat) { x0 * (x1 * x2) = x0 * x1 * x2 } and forall(x3: Nat) { x3 * 1 = x3 } and forall(x4: Nat, x5: Nat) { x4 * x5 = x5 * x4 }","proof":["let (s0: Nat, s1: Nat, s2: Nat, s3: Nat, s4: Nat, s5: Nat) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 or s5 * s4 != s4 * s5 or s3 * 1 != s3 }","s0 * (s1 * s2) = s0 * s1 * s2","s3 * 1 = 1 * s3","s5 * s4 = s4 * s5","s3 * 1 != s3","1 * s3 != s3","1 * s3 = s3"]}
{"goal":"product(l) = k","proof":["sum[Nat](List.singleton(k)) = k","sum[Nat](List.singleton(k)) != product(l)","product(l) != sum[Nat](l)","product(l) = sum[Nat](l)"]}
{"goal":"m ∈ l implies m = k","proof":["not m ∈ List.cons(k, List.nil[Nat]) or m ∈ List.nil[Nat] or m = k","List.cons(k, List.nil[Nat]) = List.singleton(k)","not m ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","not m ∈ List.nil[Nat]","not m ∈ List.cons(k, List.nil[Nat]) or m ∈ List.nil[Nat]","not m ∈ List.cons(k, List.nil[Nat])"]}
{"goal":"k.is_prime","proof":[]}
{"goal":"m ∈ l implies m.is_prime","proof":["not k.is_prime"]}
{"goal":"all_prime(l)","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[Nat]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(l) ∈ l or s0(l).is_prime","s0(l) ∈ l or all_prime(l)","s0(l) ∈ l","not s0(l).is_prime or all_prime(l)","s0(l).is_prime","not s0(l).is_prime"]}
{"goal":"prime_decomposition(k)","proof":["product(l) != k or not all_prime(l) or prime_decomposition(k)"]}
{"goal":"k.is_direct_composite","proof":["k.is_direct_composite = k.is_composite"]}
{"goal":"exists(k0: Nat, k1: Nat) { 1 < k0 and k0 < k and (1 < k1 and k1 < k) and k0 * k1 = k }","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(k) or not 1 < s1(k) or not s0(k) < k or not s1(k) < k or s0(k) * s1(k) != k","not k.is_direct_composite or s0(k) * s1(k) = k","not k.is_direct_composite or s1(k) < k","not k.is_direct_composite or 1 < s1(k)","not k.is_direct_composite or s0(k) < k","not k.is_direct_composite or 1 < s0(k)","1 < s0(k)","s0(k) < k","1 < s1(k)","s1(k) < k","s0(k) * s1(k) = k"]}
{"goal":"prime_decomposition(a)","proof":["not true_below(prime_decomposition, k) or not a < k or prime_decomposition(a)","not true_below(prime_decomposition, k) or not a < k"]}
{"goal":"prime_decomposition(b)","proof":["not true_below(prime_decomposition, k) or not b < k or prime_decomposition(b)","not true_below(prime_decomposition, k) or not b < k"]}
{"goal":"exists(k0: List[Nat]) { all_prime(k0) and a = product(k0) }","proof":["let s0: Nat -> List[Nat] satisfy { forall(x0: Nat) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: Nat) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: Nat) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[Nat], x4: Nat) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(a)) != a or not all_prime(s0(a))","not 1 < a or not prime_decomposition(a) or all_prime(s0(a))","not 1 < a or not prime_decomposition(a) or product(s0(a)) = a","all_prime(s0(a))","product(s0(a)) = a","product(s0(a)) != a"]}
{"goal":"exists(k0: List[Nat]) { all_prime(k0) and b = product(k0) }","proof":["let s0: Nat -> List[Nat] satisfy { forall(x0: Nat) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: Nat) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: Nat) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[Nat], x4: Nat) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(b)) != b or not all_prime(s0(b))","not 1 < b or not prime_decomposition(b) or all_prime(s0(b))","not 1 < b or not prime_decomposition(b) or product(s0(b)) = b","all_prime(s0(b))","product(s0(b)) = b","product(s0(b)) != b"]}
{"goal":"x ∈ la + lb implies x ∈ la or x ∈ lb","proof":["not x ∈ la + lb or x ∈ la or x ∈ lb"]}
{"goal":"x ∈ la implies x.is_prime","proof":["not all_prime(la) or not x ∈ la or x.is_prime"]}
{"goal":"x ∈ lb implies x.is_prime","proof":["not all_prime(lb) or not x ∈ lb or x.is_prime"]}
{"goal":"x ∈ l implies x.is_prime","proof":["not x ∈ la + lb","x ∈ la + lb"]}
{"goal":"all_prime(l)","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[Nat]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(l) ∈ l or s0(l).is_prime","s0(l) ∈ l or all_prime(l)","s0(l) ∈ l","not s0(l).is_prime or all_prime(l)","s0(l).is_prime","not s0(l).is_prime"]}
{"goal":"product(la + lb) = a * b","proof":["sum[Nat](la) * sum[Nat](lb) = sum[Nat](la + lb)","product(l) = sum[Nat](l)","product(la) = sum[Nat](la)","product(lb) = sum[Nat](lb)"]}
{"goal":"product(l) = k","proof":[]}
{"goal":"prime_decomposition(k)","proof":["product(l) != k or not all_prime(l) or prime_decomposition(k)"]}
{"goal":"prime_decomposition(k)","proof":["1 < k or prime_decomposition(k)","1 < k","not k > 1 or k.is_prime or k.is_composite","not k > 1","k > 1 = 1 < k"]}
{"goal":"prime_decomposition(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { true_below(x0, s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2)) or x2(x3) } }","not true_below(prime_decomposition, s0(prime_decomposition)) or prime_decomposition(s0(prime_decomposition))","true_below(prime_decomposition, s0(prime_decomposition)) or prime_decomposition(n)","true_below(prime_decomposition, s0(prime_decomposition))","not prime_decomposition(s0(prime_decomposition)) or prime_decomposition(n)","prime_decomposition(s0(prime_decomposition))","not prime_decomposition(s0(prime_decomposition))"]}
{"goal":"prime_decomposition","proof":["let s0: Nat -> List[Nat] satisfy { forall(x0: Nat) { not 1 < x0 or not prime_decomposition(x0) or all_prime(s0(x0)) } and forall(x1: Nat) { not 1 < x1 or not prime_decomposition(x1) or product(s0(x1)) = x1 } and forall(x2: Nat) { 1 < x2 or prime_decomposition(x2) } and forall(x3: List[Nat], x4: Nat) { product(x3) != x4 or not all_prime(x3) or prime_decomposition(x4) } }","product(s0(n)) != n or not all_prime(s0(n))","not 1 < n or not prime_decomposition(n) or all_prime(s0(n))","not 1 < n or not prime_decomposition(n) or product(s0(n)) = n","all_prime(s0(n))","product(s0(n)) = n","product(s0(n)) != n"]}
{"goal":"1 < m","proof":["1 < n.factorial + 1 = 1 <= n.factorial","not 1 < n.factorial + 1","not 1 <= n.factorial","1 <= n.factorial"]}
{"goal":"exists(k0: Nat) { k0.is_prime and k0.divides(m) }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not 1 < x0 or s0(x0).is_prime } and forall(x1: Nat) { not 1 < x1 or s0(x1).divides(x1) } }","not s0(m).divides(m) or not s0(m).is_prime","not 1 < m or s0(m).divides(m)","not 1 < m or s0(m).is_prime","s0(m).is_prime","s0(m).divides(m)","not s0(m).divides(m)"]}
{"goal":"p > 1","proof":["not p.is_prime or p > 1"]}
{"goal":"p != 1","proof":["p > p","not p < p or not p < p","p > p = p < p","p < p"]}
{"goal":"p.divides(n.factorial)","proof":["p = 0","1 != 0","0 > 1","0 > 1 = 1 < 0","1 < 0","not 1 < 0 or 1 <= 0","not 1 <= 0 or 1 = 0","1 <= 0","not 1 <= 0"]}
{"goal":"p.divides(n.factorial + 1)","proof":[]}
{"goal":"not function(x0: Nat, x1: Nat) { x0.divides(x1) and x0.divides(x1 + 1) implies x0 = 1 }(p, n.factorial)","proof":["not p.divides(n.factorial + 1)"]}
{"goal":"false","proof":["not p.divides(n.factorial + 1) or not p.divides(n.factorial) or 1 = p"]}
{"goal":"not p <= n","proof":[]}
{"goal":"p > n","proof":["n < p or p < n or p = n","p > n = n < p","not n < p","not p < n or p <= n","p != n or p <= n","p != n","not p < n","p < n"]}
{"goal":"exists_infinite_primes","proof":["not p > n or not p.is_prime","not p.is_prime"]}
{"goal":"all_false_below","proof":["let s0: Nat satisfy { f(s0) }","let s1: Nat satisfy { true }","let s2: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 < s2(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 < s2(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 < s2(x7, x8, x6) } }","false_below(f, s2(s1, s1, s0))","not false_below(f, s2(s1, s1, s0)) or not s0 < s2(s1, s1, s0) or not f(s0)","not s0 < s2(s1, s1, s0)","s0 < s2(s1, s1, s0)"]}
{"goal":"is_min(f, k)","proof":["not false_below(f, k) or not f(k) or is_min(f, k)"]}
{"goal":"has_min(f, k)","proof":["not is_min(f, k) or has_min(f, k)","not is_min(f, k)"]}
{"goal":"exists(k0: Nat) { k0 < k and f(k0) }","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not false_below(x0, x1) or not x2 < x1 or not x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or false_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { false_below(x5, x6) or x5(s0(x5, x6)) } }","not s0(f, k) < k or not f(s0(f, k))","s0(f, k) < k or false_below(f, k)","false_below(f, k) or f(s0(f, k))","f(s0(f, k))","s0(f, k) < k","not s0(f, k) < k"]}
{"goal":"exists(k0: Nat) { k0 < k and f(k0) }","proof":["let s0: Nat satisfy { s0 < k and f(s0) }","not s0 < k or not f(s0)","not f(s0)"]}
{"goal":"g(a)","proof":["not true_below(g, k) or not a < k or g(a)","not true_below(g, k) or not a < k"]}
{"goal":"has_min(f, a)","proof":["has_min(f, a) = g(a)"]}
{"goal":"has_min(f, k)","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not has_min(x0, x1) or not x0(x1) or is_min(x0, s0(x0, x1)) } and forall(x2: Nat -> Bool, x3: Nat) { has_min(x2, x3) or x2(x3) } and forall(x4: Nat -> Bool, x5: Nat, x6: Nat) { not is_min(x4, x5) or has_min(x4, x6) } }","not is_min(f, s0(f, a)) or has_min(f, k)","not has_min(f, a) or not f(a) or is_min(f, s0(f, a))","not is_min(f, s0(f, a))"]}
{"goal":"has_min(f, k)","proof":["has_min(f, k) or f(k)"]}
{"goal":"g(k)","proof":["has_min(f, k) = g(k)"]}
{"goal":"g(n)","proof":["let s0: Nat satisfy { forall(x0: Nat) { true_below(g, s0) or g(x0) } and forall(x1: Nat) { not g(s0) or g(x1) } }","not g(s0) or g(n)","not g(s0)","not true_below(g, s0) or g(s0)","true_below(g, s0) or g(s0)","not true_below(g, s0)","true_below(g, s0)"]}
{"goal":"has_min","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not has_min(x0, x1) or not x0(x1) or is_min(x0, s0(x0, x1)) } and forall(x2: Nat -> Bool, x3: Nat) { has_min(x2, x3) or x2(x3) } and forall(x4: Nat -> Bool, x5: Nat, x6: Nat) { not is_min(x4, x5) or has_min(x4, x6) } }","not is_min(f, s0(f, n))","has_min(f, n) = g(n)","not has_min(f, n) or not f(n) or is_min(f, s0(f, n))","has_min(f, n)","not has_min(f, n)"]}
{"goal":"not f(x) <= f(x.suc)","proof":["not f(x) <= f(x.suc) or no_infinite_decreasing(f)"]}
{"goal":"f(x.suc) < f(x)","proof":["f(x) < f(x.suc) or f(x.suc) < f(x) or f(x.suc) = f(x)","not f(x) < f(x.suc) or f(x) <= f(x.suc)","f(x.suc) != f(x) or f(x) <= f(x.suc)","f(x.suc) != f(x)","not f(x) < f(x.suc)","f(x) < f(x.suc)"]}
{"goal":"0 + f(0) <= f(0)","proof":["0 + f(0) != f(0) or 0 + f(0) <= f(0)","0 + f(0) != f(0)","0 + f(0) = f(0)"]}
{"goal":"h(0)","proof":["0 + f(0) <= f(0) = h(0)"]}
{"goal":"x + f(x) <= f(0)","proof":["x + f(x) <= f(0) = h(x)"]}
{"goal":"not f(x) <= f(x.suc)","proof":["not f(x) <= f(x.suc) or no_infinite_decreasing(f)"]}
{"goal":"f(x.suc) < f(x)","proof":["f(x.suc) < f(x)"]}
{"goal":"x + f(x.suc) < x + f(x)","proof":["f(x.suc) < f(x)","not f(x.suc) < f(x) or f(x.suc) + x < f(x) + x","x + f(x) = f(x) + x","x + f(x.suc) = f(x.suc) + x","not f(x.suc) + x < x + f(x)","not f(x.suc) + x < f(x) + x"]}
{"goal":"(x + f(x.suc)).suc <= x + f(x)","proof":["x + f(x.suc) + 1 <= x + f(x) = x + f(x.suc) < x + f(x)","x + f(x.suc) = f(x.suc) + x","f(x.suc) + x + 1 = (f(x.suc) + x).suc"]}
{"goal":"x.suc + f(x.suc) <= x + f(x)","proof":["x.suc != x.suc or f(x.suc) + x.suc = (f(x.suc) + x).suc","x + f(x) >= (x + f(x.suc)).suc = (x + f(x.suc)).suc <= x + f(x)","x + f(x) >= x.suc + f(x.suc) = x.suc + f(x.suc) <= x + f(x)","f(x.suc) + x.suc = x.suc + f(x.suc)","x + f(x.suc) = f(x.suc) + x","f(x.suc) + x.suc = (f(x.suc) + x).suc"]}
{"goal":"x.suc + f(x.suc) <= f(0)","proof":["not x.suc + f(x.suc) <= f(x) + x or not f(x) + x <= f(0) or x.suc + f(x.suc) <= f(0)","x + f(x) = f(x) + x","f(x) + x <= f(0)","x.suc + f(x.suc) <= f(x) + x","not x.suc + f(x.suc) <= f(x) + x or not f(x) + x <= f(0)"]}
{"goal":"h(x.suc)","proof":["x.suc + f(x.suc) <= f(0) = h(x.suc)"]}
{"goal":"h(x)","proof":["let s0: Nat satisfy { forall(x0: Nat) { not h(0) or h(s0) or h(x0) } and forall(x1: Nat) { not h(s0.suc) or not h(0) or h(x1) } }","not h(0) or h(s0) or h(x)","h(s0) or h(x)","h(s0)","not h(s0.suc) or not h(0) or h(x)","not h(s0.suc) or h(x)","not h(s0.suc)","not h(s0) or h(s0.suc)"]}
{"goal":"h(f(0).suc)","proof":["h(f(0).suc)"]}
{"goal":"f(0).suc + f(f(0).suc) <= f(0)","proof":["h(f(0).suc)","f(0).suc + f(f(0).suc) <= f(0) = h(f(0).suc)"]}
{"goal":"f(0).suc <= f(0).suc + f(f(0).suc)","proof":["f(0).suc + f(f(0).suc) != f(0).suc + f(f(0).suc) or f(0).suc < f(0).suc + f(f(0).suc) or f(f(0).suc) = 0","not f(0).suc < f(0).suc + f(f(0).suc) or f(0).suc <= f(0).suc + f(f(0).suc)","f(f(0).suc) != 0 or f(0).suc + f(f(0).suc) = f(0).suc","f(0).suc + f(f(0).suc) != f(0).suc or f(0).suc <= f(0).suc + f(f(0).suc)","f(0).suc < f(0).suc + f(f(0).suc) or f(f(0).suc) = 0","f(0).suc + f(f(0).suc) != f(0).suc","not f(0).suc < f(0).suc + f(f(0).suc)","f(f(0).suc) != 0","f(f(0).suc) = 0"]}
{"goal":"f(0).suc <= f(0)","proof":["h(f(0).suc)","f(0).suc + f(f(0).suc) <= f(0) = h(f(0).suc)","not f(0).suc <= f(0).suc + f(f(0).suc) or not f(0).suc + f(f(0).suc) <= f(0) or f(0).suc <= f(0)","f(0).suc + f(f(0).suc) <= f(0)","not f(0).suc <= f(0).suc + f(f(0).suc) or not f(0).suc + f(f(0).suc) <= f(0)"]}
{"goal":"false","proof":["f(0) + 1 <= f(0) = f(0) < f(0)","f(0) + 1 = f(0).suc","not f(0) < f(0)","not f(0) + 1 <= f(0) or f(0) < f(0)","f(0) + 1 <= f(0)"]}
{"goal":"no_infinite_decreasing","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { not no_infinite_decreasing(x0) or x0(s0(x0)) <= x0(s0(x0).suc) } and forall(x1: Nat -> Nat, x2: Nat) { not x1(x2) <= x1(x2.suc) or no_infinite_decreasing(x1) } }","not f(s0(f)) <= f(s0(f).suc)","not no_infinite_decreasing(f) or f(s0(f)) <= f(s0(f).suc)"]}
{"goal":"exists(k0: Nat) { f(k0) <= f(k0.suc) }","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { x0(s0(x0)) <= x0(s0(x0).suc) } }","not f(s0(f)) <= f(s0(f).suc)","f(s0(f)) <= f(s0(f).suc)"]}
{"goal":"f(n) = 0 or f(n.suc) < f(n)","proof":["not decreasing_to_zero(f) or f(n.suc) < f(n) or f(n) = 0"]}
{"goal":"f(n) = 0","proof":["not f(n) <= f(n.suc) or f(n) < f(n.suc) or f(n.suc) = f(n)","not f(n) < f(n.suc) or not f(n.suc) < f(n)","f(n) > f(n.suc) = f(n.suc) < f(n)","f(n.suc) > f(n) = f(n) < f(n.suc)","not f(n) < f(n.suc)","f(n.suc) = f(n)"]}
{"goal":"dtz_terminates","proof":["f(n) != 0"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(q)","proof":["gcd_step(gcd_step_n(p, x)) != gcd_step_n(p, x.suc)"]}
{"goal":"f(x.suc) = gcd_step_n(p, x.suc).second","proof":["gcd_step_n(p, x.suc).second = f(x.suc)"]}
{"goal":"f(x.suc) = gcd_step(q).second","proof":["gcd_step_n(p, x.suc).second != f(x.suc)"]}
{"goal":"q.second != 0","proof":["gcd_step_n(p, x).second = f(x)"]}
{"goal":"gcd_step(q) = Pair.new(q.second, nat_divide.mod(q.first)(q.second))","proof":["Pair.new(q.second, nat_divide.mod(q.first, q.second)) = gcd_step(q) or q.second = 0"]}
{"goal":"nat_divide.mod(q.first)(q.second) = gcd_step(q).second","proof":["Pair.new(q.second, nat_divide.mod(q.first, q.second)).second = nat_divide.mod(q.first, q.second)"]}
{"goal":"f(x.suc) = nat_divide.mod(q.first)(q.second)","proof":["nat_divide.mod(q.first, q.second) != gcd_step(q).second"]}
{"goal":"f(x.suc) = nat_divide.mod(q.first)(f(x))","proof":["gcd_step_n(p, x).second = f(x)"]}
{"goal":"nat_divide.mod(q.first)(f(x)) < f(x)","proof":["nat_divide.mod(q.first, f(x)) < f(x) or f(x) = 0"]}
{"goal":"f(x.suc) < f(x)","proof":[]}
{"goal":"decreasing_to_zero(f)","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat, x1: Nat) { not decreasing_to_zero(x0) or x0(x1.suc) < x0(x1) or 0 = x0(x1) } and forall(x2: Nat -> Nat) { x2(s0(x2)) != 0 or decreasing_to_zero(x2) } and forall(x3: Nat -> Nat) { not x3(s0(x3).suc) < x3(s0(x3)) or decreasing_to_zero(x3) } }","f(s0(f).suc) < f(s0(f)) or f(s0(f)) = 0","not f(s0(f).suc) < f(s0(f)) or decreasing_to_zero(f)","f(s0(f)) != 0 or decreasing_to_zero(f)","f(s0(f)) != 0","not f(s0(f).suc) < f(s0(f))","f(s0(f).suc) < f(s0(f))"]}
{"goal":"gcd_terminates","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { not decreasing_to_zero(x0) or x0(s0(x0)) = 0 } }","gcd_step_n(p, s0(f)).second != 0","gcd_step_n(p, s0(f)).second = f(s0(f))","not decreasing_to_zero(f) or f(s0(f)) = 0","f(s0(f)) = 0"]}
{"goal":"exists(k0: Nat) { gcd_termination(p, k0) }","proof":["let s0: Pair[Nat, Nat] -> Nat satisfy { forall(x0: Pair[Nat, Nat]) { gcd_step_n(x0, s0(x0)).second = 0 } }","not gcd_termination(p, s0(p))","gcd_step_n(p, s0(p)).second != 0 or gcd_termination(p, s0(p))","gcd_step_n(p, s0(p)).second != 0","gcd_step_n(p, s0(p)).second = 0"]}
{"goal":"exists(k0: Nat) { is_min(gcd_termination(p), k0) }","proof":["let s0: Nat satisfy { gcd_termination(p, s0) }","let s1: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(x1) or is_min(x0, s1(x0, x1)) } }","not is_min(gcd_termination(p), s1(gcd_termination(p), s0))","not gcd_termination(p, s0) or is_min(gcd_termination(p), s1(gcd_termination(p), s0))","not gcd_termination(p, s0)"]}
{"goal":"exists(k0: Nat) { is_min(gcd_termination(p), k0) }","proof":["not is_min(gcd_termination(p), num_gcd_steps(p))","is_min(gcd_termination(p), num_gcd_steps(p))"]}
{"goal":"is_min(f, num_gcd_steps(p))","proof":["not is_min(gcd_termination(p), num_gcd_steps(p))","is_min(gcd_termination(p), num_gcd_steps(p))"]}
{"goal":"gcd_termination(p)(num_gcd_steps(p)) = true","proof":["gcd_termination(p, num_gcd_steps(p)) = f(num_gcd_steps(p))","not f(num_gcd_steps(p))","not is_min(f, num_gcd_steps(p)) or f(num_gcd_steps(p))"]}
{"goal":"num_gcd_steps_terminates","proof":["not gcd_termination(p, num_gcd_steps(p)) or gcd_step_n(p, num_gcd_steps(p)).second = 0"]}
{"goal":"a.divides(p.first)","proof":["not divides_both(a, p) or a.divides(p.first)"]}
{"goal":"a.divides(p.second)","proof":["not divides_both(a, p) or a.divides(p.second)"]}
{"goal":"a.divides(nat_divide.mod(p.first)(p.second))","proof":["not a.divides(p.first) or not a.divides(p.second) or a.divides(nat_divide.mod(p.first, p.second))"]}
{"goal":"gcd_step(p) = p","proof":["p.second != 0 or gcd_step(p) = p"]}
{"goal":"divides_both(a, gcd_step(p))","proof":["not divides_both(a, p)"]}
{"goal":"gcd_step(p) = Pair.new(p.second, nat_divide.mod(p.first)(p.second))","proof":["Pair.new(p.second, nat_divide.mod(p.first, p.second)) = gcd_step(p) or p.second = 0"]}
{"goal":"divides_both(a, gcd_step(p))","proof":["not a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).first) or not a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).second) or divides_both(a, Pair.new(p.second, nat_divide.mod(p.first, p.second)))","Pair.new(p.second, nat_divide.mod(p.first, p.second)).second = nat_divide.mod(p.first, p.second)","Pair.new(p.second, nat_divide.mod(p.first, p.second)).first = p.second","not divides_both(a, Pair.new(p.second, nat_divide.mod(p.first, p.second)))","a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).first)","a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).second)"]}
{"goal":"divides_both_step","proof":[]}
{"goal":"divides_both(d, gcd_step_n(p, 0))","proof":["0 != 0 or gcd_step_n(p, 0) = p","gcd_step_n(p, 0) = p"]}
{"goal":"f(0)","proof":["divides_both(d, gcd_step_n(p, 0)) = f(0)"]}
{"goal":"divides_both(d, gcd_step_n(p, x))","proof":["divides_both(d, gcd_step_n(p, x)) = f(x)"]}
{"goal":"divides_both(d, gcd_step(gcd_step_n(p, x)))","proof":["not divides_both(d, gcd_step_n(p, x)) or divides_both(d, gcd_step(gcd_step_n(p, x)))"]}
{"goal":"divides_both(d, gcd_step_n(p, x.suc))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"f(x.suc)","proof":["divides_both(d, gcd_step_n(p, x.suc)) = f(x.suc)"]}
{"goal":"divides_both(d, gcd_step_n(p, n))","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","divides_both(d, gcd_step_n(p, n)) = f(n)","not f(n)","not f(s0(f).suc) or not f(0) or f(n)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n)","not f(s0(f))","f(s0(f))"]}
{"goal":"divides_gcd_step_n","proof":[]}
{"goal":"divides_both(d, gcd_step_n(p, num_gcd_steps(p)))","proof":["not divides_both(d, p) or divides_both(d, gcd_step_n(p, num_gcd_steps(p)))"]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).first)","proof":["not divides_both(d, gcd_step_n(p, num_gcd_steps(p))) or d.divides(gcd_step_n(p, num_gcd_steps(p)).first)"]}
{"goal":"divides_gcd_of_pair","proof":["gcd_step_n(p, num_gcd_steps(p)).first = gcd_of_pair(p)"]}
{"goal":"d.divides(Pair.new(a, b).first)","proof":["Pair.new(a, b).first = a"]}
{"goal":"d.divides(Pair.new(a, b).second)","proof":["Pair.new(a, b).second = b"]}
{"goal":"divides_both(d, Pair.new(a, b))","proof":["not d.divides(Pair.new(a, b).first) or not d.divides(Pair.new(a, b).second) or divides_both(d, Pair.new(a, b))"]}
{"goal":"d.divides(gcd_of_pair(Pair.new(a, b)))","proof":[]}
{"goal":"d.divides(gcd(a, b))","proof":["gcd_of_pair(Pair.new(a, b)) = gcd(a, b)"]}
{"goal":"divides_gcd","proof":[]}
{"goal":"p = gcd_step(p)","proof":["p.second != 0 or gcd_step(p) = p"]}
{"goal":"divides_both(a, p)","proof":["not divides_both(a, gcd_step(p))"]}
{"goal":"gcd_step(p) = Pair.new(p.second, nat_divide.mod(p.first)(p.second))","proof":["Pair.new(p.second, nat_divide.mod(p.first, p.second)) = gcd_step(p) or p.second = 0"]}
{"goal":"a.divides(gcd_step(p).first)","proof":["not divides_both(a, gcd_step(p)) or a.divides(gcd_step(p).first)"]}
{"goal":"a.divides(p.second)","proof":["Pair.new(p.second, nat_divide.mod(p.first, p.second)).first = p.second","not a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).first)"]}
{"goal":"a.divides(gcd_step(p).second)","proof":["not divides_both(a, gcd_step(p)) or a.divides(gcd_step(p).second)"]}
{"goal":"a.divides(nat_divide.mod(p.first)(p.second))","proof":["Pair.new(p.second, nat_divide.mod(p.first, p.second)).second = nat_divide.mod(p.first, p.second)","not a.divides(Pair.new(p.second, nat_divide.mod(p.first, p.second)).second)"]}
{"goal":"a.divides(p.first)","proof":["not a.divides(nat_divide.mod(p.first, p.second)) or not a.divides(p.second) or a.divides(p.first)"]}
{"goal":"divides_both(a, p)","proof":["not a.divides(p.first) or not a.divides(p.second) or divides_both(a, p)"]}
{"goal":"divides_both_unstep","proof":[]}
{"goal":"divides_both(d, p)","proof":["0 != 0 or gcd_step_n(p, 0) = p","gcd_step_n(p, 0) = p"]}
{"goal":"divides_gcd_step_n_converse(d, p, 0)","proof":["not divides_both(d, p) or divides_gcd_step_n_converse(d, p, 0)","divides_both(d, gcd_step_n(p, 0)) or divides_gcd_step_n_converse(d, p, 0)","not divides_both(d, p)","divides_both(d, gcd_step_n(p, 0))","not divides_both(d, gcd_step_n(p, 0))"]}
{"goal":"f(0)","proof":["divides_gcd_step_n_converse(d, p, 0) = f(0)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"divides_both(d, gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)","not divides_both(d, gcd_step(gcd_step_n(p, x))) or divides_both(d, gcd_step_n(p, x))","not divides_both(d, gcd_step(gcd_step_n(p, x)))","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"divides_both(d, p)","proof":["divides_gcd_step_n_converse(d, p, x) = f(x)","not divides_both(d, gcd_step_n(p, x)) or not divides_gcd_step_n_converse(d, p, x) or divides_both(d, p)","divides_gcd_step_n_converse(d, p, x)","not divides_gcd_step_n_converse(d, p, x)"]}
{"goal":"divides_gcd_step_n_converse(d, p, x.suc)","proof":["not divides_both(d, p) or divides_gcd_step_n_converse(d, p, x.suc)","divides_both(d, gcd_step_n(p, x.suc)) or divides_gcd_step_n_converse(d, p, x.suc)","not divides_both(d, p)","divides_both(d, gcd_step_n(p, x.suc))","not divides_both(d, gcd_step_n(p, x.suc))"]}
{"goal":"f(x.suc)","proof":["divides_gcd_step_n_converse(d, p, x.suc) = f(x.suc)"]}
{"goal":"divides_gcd_step_n_converse","proof":["let s0: Nat satisfy { forall(x0: Nat) { not f(0) or f(s0) or f(x0) } and forall(x1: Nat) { not f(s0.suc) or not f(0) or f(x1) } }","not f(0) or f(s0) or f(s0)","f(s0) or f(s0)","not f(s0.suc) or not f(0) or f(n)","not f(s0.suc) or f(n)","not f(s0) or f(s0.suc)","divides_gcd_step_n_converse(d, p, n) = f(n)","not divides_both(d, gcd_step_n(p, n)) or not divides_gcd_step_n_converse(d, p, n) or divides_both(d, p)","f(s0)","not divides_gcd_step_n_converse(d, p, n)","not f(n)","f(s0.suc)","not f(s0.suc)"]}
{"goal":"gcd_of_pair(p) = gcd_step_n(p, num_gcd_steps(p)).first","proof":["gcd_step_n(p, num_gcd_steps(p)).first = gcd_of_pair(p)"]}
{"goal":"0 = gcd_step_n(p, num_gcd_steps(p)).second","proof":["gcd_step_n(p, num_gcd_steps(p)).second = 0"]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).first)","proof":[]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).second)","proof":["not d.divides(0)","d * 0 != 0 or d.divides(0)","d * 0 != 0","0 != 0 or d * 0 = 0","0 != 0"]}
{"goal":"divides_both(d, gcd_step_n(p, num_gcd_steps(p)))","proof":["not d.divides(gcd_step_n(p, num_gcd_steps(p)).first) or not d.divides(gcd_step_n(p, num_gcd_steps(p)).second) or divides_both(d, gcd_step_n(p, num_gcd_steps(p)))"]}
{"goal":"divides_both(d, p)","proof":["not divides_both(d, gcd_step_n(p, num_gcd_steps(p))) or divides_both(d, p)"]}
{"goal":"divides_gcd_pair_converse","proof":[]}
{"goal":"p.first = a","proof":["Pair.new(a, b).first != a","Pair.new(a, b).first = a"]}
{"goal":"p.second = b","proof":["Pair.new(a, b).second != b","Pair.new(a, b).second = b"]}
{"goal":"d.divides(gcd_of_pair(p))","proof":["gcd_of_pair(Pair.new(a, b)) = gcd(a, b)"]}
{"goal":"divides_both(d, p)","proof":["not d.divides(gcd_of_pair(p)) or divides_both(d, p)"]}
{"goal":"d.divides(p.first)","proof":["not divides_both(d, p) or d.divides(p.first)"]}
{"goal":"d.divides(a)","proof":["not d.divides(p.first)"]}
{"goal":"d.divides(p.second)","proof":["not divides_both(d, p) or d.divides(p.second)"]}
{"goal":"d.divides(b)","proof":["not d.divides(p.second)"]}
{"goal":"d.divides(a) and d.divides(b)","proof":["not d.divides(a)"]}
{"goal":"gcd_divides","proof":["not d.divides(a)"]}
{"goal":"gcd(a, b).divides(gcd(a, b))","proof":["gcd(a, b).divides(gcd(a, b))"]}
{"goal":"gcd_divides_both","proof":["not gcd(a, b).divides(gcd(a, b)) or gcd(a, b).divides(b)","not gcd(a, b).divides(gcd(a, b)) or gcd(a, b).divides(a)","gcd(a, b).divides(a)","gcd(a, b).divides(b)","not gcd(a, b).divides(b)"]}
{"goal":"gcd(a, b) != 0","proof":["not b.divides(0) or not 0.divides(b) or 0 = b","gcd(a, b).divides(b)","b.divides(0)","not 0.divides(b)"]}
{"goal":"d.divides(gcd(a, b))","proof":["not d.divides(a) or not d.divides(b) or d.divides(gcd(a, b))"]}
{"goal":"d <= gcd(a, b)","proof":["not d.divides(gcd(a, b)) or d <= gcd(a, b) or gcd(a, b) = 0"]}
{"goal":"gcd_is_gcd","proof":[]}
{"goal":"0.divides(a)","proof":["not gcd(a, b).divides(a)","gcd(a, b).divides(a)"]}
{"goal":"0.divides(b)","proof":["not gcd(a, b).divides(b)","gcd(a, b).divides(b)"]}
{"goal":"a = 0 and b = 0","proof":["not 0.divides(a) or 0 = a","not 0.divides(b) or 0 = b","0 = b","0 = a","0 != a"]}
{"goal":"false","proof":[]}
{"goal":"gcd_nonzero_left","proof":[]}
{"goal":"a.divides(a)","proof":["a * 1 != a or a.divides(a)","a * 1 != a","a * 1 = a"]}
{"goal":"a.divides(0)","proof":["a * 0 != 0 or a.divides(0)","a * 0 != 0","0 != 0 or a * 0 = 0","0 != 0"]}
{"goal":"a.divides(gcd(a, 0))","proof":["not a.divides(a) or not a.divides(0) or a.divides(gcd(a, 0))"]}
{"goal":"gcd(a, 0).divides(a)","proof":["gcd(a, 0).divides(a)"]}
{"goal":"gcd_zero_right","proof":["not gcd(a, 0).divides(a) or not a.divides(gcd(a, 0)) or gcd(a, 0) = a"]}
{"goal":"gcd(a, 0).divides(0)","proof":["gcd(a, 0) * 0 != 0 or gcd(a, 0).divides(0)","0 != 0 or gcd(a, 0) * 0 = 0","gcd(a, 0) * 0 != 0","0 != 0"]}
{"goal":"gcd(a, 0).divides(a)","proof":["gcd(a, 0).divides(a)"]}
{"goal":"gcd(a, 0).divides(gcd(0, a))","proof":["not gcd(a, 0).divides(0) or not gcd(a, 0).divides(a) or gcd(a, 0).divides(gcd(0, a))","gcd(a, 0).divides(0)","not gcd(a, 0).divides(a)","gcd(a, 0).divides(a)"]}
{"goal":"a.divides(gcd(a, 0))","proof":["gcd(a, 0) = a"]}
{"goal":"a.divides(gcd(0, a))","proof":["gcd(a, 0) = a"]}
{"goal":"gcd(0, a).divides(a)","proof":["gcd(0, a).divides(a)"]}
{"goal":"gcd_zero_left","proof":["not gcd(0, a).divides(a) or not a.divides(gcd(0, a)) or gcd(0, a) = a"]}
{"goal":"(a.divides(gcd(a, b)) and b.divides(gcd(a, b))) = (b.divides(gcd(a, b)) and a.divides(gcd(a, b)))","proof":["not a.divides(gcd(a, b))"]}
{"goal":"gcd(b, a).divides(gcd(a, b))","proof":["not gcd(b, a).divides(a) or not gcd(b, a).divides(b) or gcd(b, a).divides(gcd(a, b))","gcd(b, a).divides(a)","not gcd(b, a).divides(b)","gcd(b, a).divides(b)"]}
{"goal":"gcd(a, b).divides(gcd(b, a))","proof":["not gcd(a, b).divides(b) or not gcd(a, b).divides(a) or gcd(a, b).divides(gcd(b, a))","gcd(a, b).divides(b)","not gcd(a, b).divides(a)","gcd(a, b).divides(a)"]}
{"goal":"gcd_comm","proof":["not gcd(b, a).divides(gcd(a, b)) or not gcd(a, b).divides(gcd(b, a)) or gcd(a, b) = gcd(b, a)"]}
{"goal":"gcd_step_n(p, 0).first = a","proof":["0 != 0 or gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)","Pair.new(a, b).first = a","gcd_step_n(Pair.new(a, b), 0).first != a","gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)"]}
{"goal":"gcd_step_n(p, 0).second = b","proof":["0 != 0 or gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)","Pair.new(a, b).second = b","gcd_step_n(Pair.new(a, b), 0).second != b","gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)"]}
{"goal":"f(gcd_step_n(p, 0).second)","proof":[]}
{"goal":"f(gcd_step_n(p, 0).first)","proof":[]}
{"goal":"g(0)","proof":["not f(gcd_step_n(p, 0).first) or not f(gcd_step_n(p, 0).second) or g(0)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"f(gcd_step_n(p, x).first)","proof":["not g(x) or f(gcd_step_n(p, x).first)"]}
{"goal":"f(gcd_step_n(p, x).second)","proof":["not g(x) or f(gcd_step_n(p, x).second)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step_n(p, x)","proof":["gcd_step_n(p, x).second != 0 or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x)","gcd_step(gcd_step_n(p, x)) != gcd_step_n(p, x)","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x)"]}
{"goal":"f(gcd_step_n(p, x.suc).first)","proof":[]}
{"goal":"f(gcd_step_n(p, x.suc).second)","proof":[]}
{"goal":"g(x.suc)","proof":["not f(gcd_step_n(p, x.suc).first) or not f(gcd_step_n(p, x.suc).second) or g(x.suc)"]}
{"goal":"Pair.new(gcd_step_n(p, x).second, nat_divide.mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second)) = gcd_step(gcd_step_n(p, x))","proof":["Pair.new(gcd_step_n(p, x).second, nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)) = gcd_step(gcd_step_n(p, x)) or gcd_step_n(p, x).second = 0"]}
{"goal":"gcd_step_n(p, x.suc).first = gcd_step_n(p, x).second","proof":["Pair.new(gcd_step_n(p, x).second, nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)).first = gcd_step_n(p, x).second","gcd_step(gcd_step_n(p, x)).first != gcd_step_n(p, x).second"]}
{"goal":"gcd_step_n(p, x.suc).second = nat_divide.mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second)","proof":["Pair.new(gcd_step_n(p, x).second, nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)).second = nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)","nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second) != gcd_step(gcd_step_n(p, x)).second"]}
{"goal":"f(gcd_step_n(p, x.suc).first)","proof":[]}
{"goal":"f(nat_divide.mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second))","proof":["not mod_maintains(f) or not f(gcd_step_n(p, x).first) or not f(gcd_step_n(p, x).second) or f(nat_divide.mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second))"]}
{"goal":"f(gcd_step_n(p, x.suc).second)","proof":[]}
{"goal":"g(x.suc)","proof":["not f(gcd_step_n(p, x.suc).first) or not f(gcd_step_n(p, x.suc).second) or g(x.suc)"]}
{"goal":"g(num_gcd_steps(p))","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not g(s0(g)) or g(s0(g).suc)","not g(num_gcd_steps(Pair.new(a, b)))","not g(s0(g).suc) or not g(0) or g(num_gcd_steps(p))","not g(s0(g).suc)","not g(0) or g(s0(g)) or g(num_gcd_steps(Pair.new(a, b)))","not g(s0(g))","g(s0(g))"]}
{"goal":"f(gcd_step_n(p, num_gcd_steps(p)).first)","proof":["not g(num_gcd_steps(p)) or f(gcd_step_n(p, num_gcd_steps(p)).first)"]}
{"goal":"f(gcd(a, b))","proof":["gcd_of_pair(Pair.new(a, b)) = gcd(a, b)","not f(gcd_of_pair(Pair.new(a, b)))","not f(gcd_of_pair(p))","gcd_step_n(p, num_gcd_steps(p)).first = gcd_of_pair(p)"]}
{"goal":"mod_maintains_imp_gcd","proof":[]}
{"goal":"gcd_one_right","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not gcd(a, 1).divides(1) or gcd(a, 1) * s0(gcd(a, 1), 1) = 1","gcd(a, 1) * s0(gcd(a, 1), 1) != 1 or gcd(a, 1) = 1","gcd(a, 1) * s0(gcd(a, 1), 1) != 1","gcd(a, 1).divides(1)"]}
{"goal":"gcd_one_left","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not gcd(1, a).divides(1) or gcd(1, a) * s0(gcd(1, a), 1) = 1","gcd(1, a) * s0(gcd(1, a), 1) != 1 or gcd(1, a) = 1","gcd(1, a) * s0(gcd(1, a), 1) != 1","gcd(1, a).divides(1)"]}
{"goal":"m.divides(m * a)","proof":["m * a != m * a or m.divides(m * a)","m * a != m * a"]}
{"goal":"m.divides(m * b)","proof":["m * b != m * b or m.divides(m * b)","m * b != m * b"]}
{"goal":"m.divides(gcd(m * a, m * b))","proof":["not m.divides(m * a) or not m.divides(m * b) or m.divides(gcd(m * a, m * b))"]}
{"goal":"exists(k0: Nat) { m * k0 = gcd(m * a, m * b) }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","m * s0(m, gcd(m * a, m * b)) != gcd(m * a, m * b)","not m.divides(gcd(m * a, m * b)) or m * s0(m, gcd(m * a, m * b)) = gcd(m * a, m * b)"]}
{"goal":"(m * d).divides(m * a)","proof":["gcd(m * a, m * b).divides(m * a)"]}
{"goal":"d.divides(a)","proof":["not (m * d).divides(m * a) or d.divides(a) or 0 = m"]}
{"goal":"(m * d).divides(m * b)","proof":["gcd(m * a, m * b).divides(m * b)"]}
{"goal":"d.divides(b)","proof":["not (m * d).divides(m * b) or d.divides(b) or 0 = m"]}
{"goal":"d.divides(gcd(a, b))","proof":["not d.divides(a) or not d.divides(b) or d.divides(gcd(a, b))"]}
{"goal":"(m * d).divides(m * gcd(a, b))","proof":["not d.divides(gcd(a, b)) or (m * d).divides(m * gcd(a, b))"]}
{"goal":"gcd(m * a, m * b).divides(m * gcd(a, b))","proof":[]}
{"goal":"(m * gcd(a, b)).divides(m * a)","proof":["not gcd(a, b).divides(a) or (m * gcd(a, b)).divides(m * a)","not gcd(a, b).divides(a)","gcd(b, a) = gcd(a, b)","gcd(b, a).divides(a)"]}
{"goal":"(m * gcd(a, b)).divides(m * b)","proof":["not gcd(a, b).divides(b) or (m * gcd(a, b)).divides(m * b)","not gcd(a, b).divides(b)","gcd(a, b).divides(b)"]}
{"goal":"(m * gcd(a, b)).divides(gcd(m * a, m * b))","proof":["not (m * gcd(a, b)).divides(m * a) or not (m * gcd(a, b)).divides(m * b) or (m * gcd(a, b)).divides(gcd(m * a, m * b))"]}
{"goal":"gcd_mul_left_nonzero","proof":["not (m * gcd(a, b)).divides(gcd(m * a, m * b)) or not gcd(m * a, m * b).divides(m * gcd(a, b)) or gcd(m * a, m * b) = m * gcd(a, b)"]}
{"goal":"m * gcd(a, b) = 0","proof":["m * gcd(a, b) = gcd(a, b) * m","gcd(a, b) * m != 0","0 != m or gcd(a, b) * m = 0"]}
{"goal":"gcd(m * a, m * b) = 0","proof":["gcd(m * a, 0) = m * a","0 * a = 0","0 * b = 0","gcd(m * a, 0 * b) != 0","gcd(m * a, 0) != 0","m * a != 0"]}
{"goal":"m * gcd(a, b) = gcd(m * a, m * b)","proof":["gcd(m * a, m * b) = m * gcd(a, b) or 0 = m"]}
{"goal":"gcd_mul_left","proof":["nat_divide.mod(gcd(a, b) * m, m) = 0","0 != m or nat_divide.mod(gcd(a, b) * m, m) = gcd(a, b) * m","nat_divide.mod(gcd(a, b) * m, m) = gcd(a, b) * m","m * gcd(a, b) = gcd(a, b) * m","gcd(m * a, m * b) != gcd(a, b) * m","gcd(a, b) * m != 0"]}
{"goal":"gcd_mul_right","proof":["gcd(b * m, a * m) = gcd(a * m, b * m)","m * a = a * m","m * b = b * m","m * gcd(a, b) = gcd(a, b) * m"]}
{"goal":"gcd(af, bf).divides(af)","proof":["gcd(bf, af) = gcd(af, bf)","not gcd(bf, af).divides(af)","gcd(bf, af).divides(af)"]}
{"goal":"(gcd(a, b) * gcd(af, bf)).divides(a)","proof":["not gcd(af, bf).divides(af) or (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * af)","af * gcd(a, b) = gcd(a, b) * af","not (gcd(a, b) * gcd(af, bf)).divides(af * gcd(a, b))","(gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * af)"]}
{"goal":"gcd(af, bf).divides(bf)","proof":["gcd(af, bf).divides(bf)"]}
{"goal":"(gcd(a, b) * gcd(af, bf)).divides(b)","proof":["not gcd(af, bf).divides(bf) or (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * bf)","bf * gcd(a, b) = gcd(a, b) * bf","not (gcd(a, b) * gcd(af, bf)).divides(bf * gcd(a, b))","(gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * bf)"]}
{"goal":"(gcd(a, b) * gcd(af, bf)).divides(gcd(a, b))","proof":["not (gcd(a, b) * gcd(af, bf)).divides(a) or not (gcd(a, b) * gcd(af, bf)).divides(b) or (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b))"]}
{"goal":"(gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * 1)","proof":["not (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b)) or (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * 1)"]}
{"goal":"gcd(af, bf).divides(1)","proof":["not (gcd(a, b) * gcd(af, bf)).divides(gcd(a, b) * 1) or gcd(af, bf).divides(1) or gcd(a, b) = 0"]}
{"goal":"gcd(af, bf) = 1","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not gcd(af, bf).divides(1) or gcd(af, bf) * s0(gcd(af, bf), 1) = 1","gcd(af, bf) * s0(gcd(af, bf), 1) != 1 or gcd(af, bf) = 1","gcd(af, bf) * s0(gcd(af, bf), 1) != 1"]}
{"goal":"cofactor","proof":[]}
{"goal":"gcd(p, n).divides(p)","proof":["gcd(n, p) = gcd(p, n)","not gcd(n, p).divides(p)","gcd(n, p).divides(p)"]}
{"goal":"exists(k0: Nat) { k0 * gcd(p, n) = p }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","s0(gcd(p, n), p) * gcd(p, n) != p","not gcd(p, n).divides(p) or gcd(p, n) * s0(gcd(p, n), p) = p","s0(gcd(p, n), p) * gcd(p, n) = gcd(p, n) * s0(gcd(p, n), p)","gcd(p, n) * s0(gcd(p, n), p) = p"]}
{"goal":"d != 0","proof":["not d <= 0 or not 1 < d or 1 < 0","not p.divides(d) or not d.divides(p) or d = p","d * gcd(p, n) != p or d.divides(p)","p * 0 != d or p.divides(d)","p > 1 = 1 < p","not p.is_prime or p > 1","d != 0 or d <= 0","d <= 0","p * 0 = 0","p * 0 = d","not 1 < 0","p > 1","d.divides(p)","1 < p","not 1 < d","p.divides(d)","d = p"]}
{"goal":"gcd(p, n) = p","proof":["gcd_of_pair(Pair.new(p, n)) = gcd(p, n)","nat_divide.mod(gcd_of_pair(Pair.new(p, n)), 0) = gcd_of_pair(Pair.new(p, n))","nat_divide.mod(gcd(p, n), 0).pow(1) = nat_divide.mod(gcd(p, n), 0)","gcd(p, n).pow(1) - 0 = gcd(p, n).pow(1)","1 * (gcd(p, n) - 0) = gcd(p, n) - 0"]}
{"goal":"p.divides(n)","proof":["p.divides(p)","not p.divides(gcd(p, n)) or p.divides(n)","not p.divides(gcd(p, n))"]}
{"goal":"d > 1","proof":["not 1 <= d or 1 < d or 1 = d","d >= 1 = 1 <= d","d > 1 = 1 < d","not 1 < d","not 1 <= d","d >= 1 or d = 0","not d >= 1","d >= 1"]}
{"goal":"p.is_composite","proof":["not 1 < d or not d < p or d * gcd(p, n) != p or d.proper_divides(p) or 0 = p","not 1 < gcd(p, n) or d < d * gcd(p, n) or d = 0","d > 1 = 1 < d","gcd(p, n) > 1 = 1 < gcd(p, n)","p > 1 = 1 < p","1 < d","1 < gcd(p, n)","not p.is_prime or p > 1","not d.proper_divides(p) or p.is_composite","not d.proper_divides(p)","not 1 < 0","p > 1","not d < p or 0 = p","1 < p","not 1 < gcd(p, n) or d < d * gcd(p, n)","d < d * gcd(p, n)","d < p","0 = p"]}
{"goal":"false","proof":["not p.is_prime or not p.is_composite"]}
{"goal":"gcd(p, n) != 0","proof":["not 0 > 1","gcd(p, n) != 0 or 0 = p","0 = p","not p > 1","not p.is_prime or p > 1"]}
{"goal":"gcd(p, n) = 1","proof":["not 1 <= gcd(p, n) or 1 < gcd(p, n) or gcd(p, n) = 1","gcd(p, n) >= 1 = 1 <= gcd(p, n)","gcd(p, n) > 1 = 1 < gcd(p, n)","not 1 < gcd(p, n)","gcd(p, n) >= 1 or gcd(p, n) = 0","not 1 <= gcd(p, n)","gcd(p, n) >= 1","not gcd(p, n) >= 1"]}
{"goal":"gcd_of_prime","proof":[]}
{"goal":"gcd(a, b) = 1","proof":["not a.is_prime or gcd(a, b) = 1 or a.divides(b)"]}
{"goal":"gcd(a * c, b * c) = gcd(a, b) * c","proof":["gcd(a * c, b * c) = gcd(a, b) * c"]}
{"goal":"gcd(a * c, b * c) = c","proof":["gcd(a, b) * c != c","1 * c != c","1 * c = c"]}
{"goal":"a.divides(a * c)","proof":["a * c != a * c or a.divides(a * c)","a * c != a * c"]}
{"goal":"a.divides(b * c)","proof":[]}
{"goal":"a.divides(gcd(a * c, b * c))","proof":["not a.divides(a * c) or not a.divides(b * c) or a.divides(gcd(a * c, b * c))"]}
{"goal":"a.divides(c)","proof":["not a.divides(gcd(a * c, b * c))"]}
{"goal":"euclids_lemma_prime","proof":[]}
{"goal":"a <= b","proof":["not a.divides(b) or a <= b or 0 = b","0 = b","b > 1 = 1 < b","not b.is_prime or b > 1","not 1 < 0","b > 1","1 < b"]}
{"goal":"not (1 < a and a < b)","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not 1 < a or not a < b or a * s0(a, b) != b or a.proper_divides(b) or 0 = b","not a.divides(b) or a * s0(a, b) = b","not b <= 0 or not a < b or a < 0","not b <= 0 or a < 0","not b.is_prime or not a.proper_divides(b)","0 != b or b <= 0","not a < 0","not b <= 0","not a.proper_divides(b)","a * s0(a, b) = b","0 != b","0 = b"]}
{"goal":"a = b","proof":["not a <= b or a < b or b = a","a < b","not 1 < a","a > 1 = 1 < a","not a.is_prime or a > 1","not a > 1","a > 1"]}
{"goal":"divides_prime","proof":[]}
{"goal":"euclids_lemma_divides_primes","proof":["not a.divides(b * c) or not a.is_prime or a.divides(b) or a.divides(c)","not a.is_prime or not b.is_prime or not a.divides(b) or b = a","not a.is_prime or not c.is_prime or not a.divides(c) or c = a","not a.divides(b)","not a.divides(c)","a.divides(c)"]}
{"goal":"head.is_prime","proof":["head != head or head ∈ List.cons(head, tail)","not all_prime(List.cons(head, tail)) or not head ∈ List.cons(head, tail) or head.is_prime","not head ∈ List.cons(head, tail) or not all_prime(List.cons(head, tail))","not head ∈ List.cons(head, tail)"]}
{"goal":"x ∈ tail implies x ∈ List.cons(head, tail)","proof":["not x ∈ tail or x ∈ List.cons(head, tail)"]}
{"goal":"x ∈ tail implies x.is_prime","proof":["not all_prime(List.cons(head, tail)) or not x ∈ List.cons(head, tail) or x.is_prime"]}
{"goal":"all_prime(tail)","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[Nat]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(tail) ∈ tail or s0(tail).is_prime","s0(tail) ∈ tail or all_prime(tail)","s0(tail) ∈ tail","not s0(tail).is_prime or all_prime(tail)","s0(tail).is_prime","not s0(tail).is_prime"]}
{"goal":"x ∈ List.cons(head, tail) implies x = head or x ∈ tail","proof":["not x ∈ List.cons(head, tail) or x ∈ tail or x = head"]}
{"goal":"x ∈ List.cons(head, tail) implies x.is_prime","proof":["not all_prime(tail) or not x ∈ tail or x.is_prime","not x ∈ tail or not all_prime(tail)","not x ∈ tail","x = head"]}
{"goal":"all_prime(List.cons(head, tail))","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[Nat]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(List.cons(head, tail)) ∈ List.cons(head, tail) or s0(List.cons(head, tail)).is_prime","s0(List.cons(head, tail)) ∈ List.cons(head, tail) or all_prime(List.cons(head, tail))","not s0(List.cons(head, tail)).is_prime or all_prime(List.cons(head, tail))","not s0(List.cons(head, tail)).is_prime","s0(List.cons(head, tail)) ∈ List.cons(head, tail)","not s0(List.cons(head, tail)) ∈ List.cons(head, tail)"]}
{"goal":"all_prime_decomposition","proof":["all_prime(tail)","all_prime(List.cons(head, tail))","not head.is_prime","head != head or head ∈ List.cons(head, tail)","not all_prime(List.cons(head, tail)) or not head ∈ List.cons(head, tail) or head.is_prime","head ∈ List.cons(head, tail)","not head ∈ List.cons(head, tail) or head.is_prime"]}
{"goal":"product(List.nil[Nat]) = 1","proof":["List.nil[Nat] != List.nil[Nat] or sum[Nat](List.nil[Nat]) = 1","product(List.nil[Nat]) = sum[Nat](List.nil[Nat])","sum[Nat](List.nil[Nat]) = 1","sum[Nat](List.nil[Nat]) != 1"]}
{"goal":"not a.divides(1)","proof":["not a.divides(1) or not a.divides(1) or a.divides(1 + 1)","not a.divides(1 + 1) or not a.divides(1) or 1 = a","a > 1 = 1 < a","not a.is_prime or a > 1","not a < a","not a.divides(1 + 1) or 1 = a","a > 1","not a.divides(1) or a.divides(1 + 1)","a.divides(1 + 1)","1 = a","1 < a"]}
{"goal":"f(List.nil[Nat])","proof":["euclids_lemma_prime_divides_list(a, List.nil[Nat]) = f(List.nil[Nat])","a.divides(product(List.nil[Nat])) or euclids_lemma_prime_divides_list(a, List.nil[Nat])","not euclids_lemma_prime_divides_list(a, List.nil[Nat])","not a.divides(product(List.nil[Nat]))","a.divides(product(List.nil[Nat]))"]}
{"goal":"product(List.cons(head, tail)) = head * product(tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head * sum[Nat](tail) = sum[Nat](List.cons(head, tail))","product(List.cons(head, tail)) = sum[Nat](List.cons(head, tail))","product(tail) = sum[Nat](tail)","product(List.cons(head, tail)) != head * sum[Nat](tail)","head * sum[Nat](tail) != sum[Nat](List.cons(head, tail))"]}
{"goal":"a.divides(head) or a.divides(product(tail))","proof":["not a.divides(product(tail) * head) or not a.is_prime or a.divides(product(tail)) or a.divides(head)","head * product(tail) = product(tail) * head","not a.divides(product(tail) * head) or a.divides(product(tail))","not a.divides(product(tail) * head)"]}
{"goal":"exists(k0: Nat) { k0 ∈ List.cons(head, tail) and a.divides(k0) }","proof":["not head ∈ List.cons(head, tail) or not a.divides(head)","not head ∈ List.cons(head, tail)","head != head or head ∈ List.cons(head, tail)"]}
{"goal":"a.divides(product(tail))","proof":[]}
{"goal":"exists(k0: Nat) { k0 ∈ tail and a.divides(k0) }","proof":["let s0: (Nat, List[Nat]) -> Nat satisfy { forall(x0: Nat, x1: List[Nat]) { not x0.divides(product(x1)) or not x0.is_prime or not euclids_lemma_prime_divides_list(x0, x1) or s0(x0, x1) ∈ x1 } and forall(x2: Nat, x3: List[Nat]) { not x2.divides(product(x3)) or not x2.is_prime or not euclids_lemma_prime_divides_list(x2, x3) or x2.divides(s0(x2, x3)) } and forall(x4: Nat, x5: List[Nat]) { x4.is_prime or euclids_lemma_prime_divides_list(x4, x5) } and forall(x6: Nat, x7: List[Nat]) { x6.divides(product(x7)) or euclids_lemma_prime_divides_list(x6, x7) } and forall(x8: Nat, x9: Nat, x10: List[Nat]) { not x8.divides(x9) or not x9 ∈ x10 or euclids_lemma_prime_divides_list(x8, x10) } }","not a.divides(s0(a, tail)) or not s0(a, tail) ∈ tail","euclids_lemma_prime_divides_list(a, tail) = f(tail)","not a.divides(product(tail)) or not a.is_prime or not euclids_lemma_prime_divides_list(a, tail) or a.divides(s0(a, tail))","not a.divides(product(tail)) or not a.is_prime or not euclids_lemma_prime_divides_list(a, tail) or s0(a, tail) ∈ tail","euclids_lemma_prime_divides_list(a, tail)","s0(a, tail) ∈ tail","a.divides(s0(a, tail))","not a.divides(s0(a, tail))"]}
{"goal":"n ∈ List.cons(head, tail) and a.divides(n)","proof":["not n ∈ List.cons(head, tail)","not n ∈ tail or n ∈ List.cons(head, tail)"]}
{"goal":"exists(k0: Nat) { k0 ∈ List.cons(head, tail) and a.divides(k0) }","proof":["not n ∈ List.cons(head, tail) or not a.divides(n)","not n ∈ List.cons(head, tail)"]}
{"goal":"exists(k0: Nat) { k0 ∈ List.cons(head, tail) and a.divides(k0) }","proof":["let s0: Nat satisfy { s0 ∈ List.cons(head, tail) and a.divides(s0) }","not s0 ∈ List.cons(head, tail) or not a.divides(s0)","not s0 ∈ List.cons(head, tail)"]}
{"goal":"f(List.cons(head, tail))","proof":["let s0: Nat satisfy { s0 ∈ List.cons(head, tail) and a.divides(s0) }","euclids_lemma_prime_divides_list(a, List.cons(head, tail)) = f(List.cons(head, tail))","not a.divides(s0) or not s0 ∈ List.cons(head, tail) or euclids_lemma_prime_divides_list(a, List.cons(head, tail))","not euclids_lemma_prime_divides_list(a, List.cons(head, tail))","not s0 ∈ List.cons(head, tail) or euclids_lemma_prime_divides_list(a, List.cons(head, tail))"]}
{"goal":"euclids_lemma_prime_divides_list(a, List.cons(head, tail))","proof":["a.divides(product(List.cons(head, tail))) or euclids_lemma_prime_divides_list(a, List.cons(head, tail))"]}
{"goal":"f(List.cons(head, tail))","proof":["euclids_lemma_prime_divides_list(a, List.cons(head, tail)) = f(List.cons(head, tail))"]}
{"goal":"f(List.cons(head, tail))","proof":["let s0: Nat satisfy { s0 ∈ List.cons(head, tail) and s0 = a }","euclids_lemma_divides_prime_list(a, List.cons(head, tail)) = f(List.cons(head, tail))","not a ∈ List.cons(head, tail) or a != a or euclids_lemma_divides_prime_list(a, List.cons(head, tail))","not euclids_lemma_divides_prime_list(a, List.cons(head, tail))","a ∈ List.cons(head, tail)","not a ∈ List.cons(head, tail) or euclids_lemma_divides_prime_list(a, List.cons(head, tail))"]}
{"goal":"f(l)","proof":["let (s0: List[Nat] -> Bool -> Nat, s1: List[Nat] -> Bool -> List[Nat]) satisfy { forall(x0: List[Nat] -> Bool, x1: List[Nat]) { not x0(List.nil[Nat]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[Nat] -> Bool, x3: List[Nat]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[Nat]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(List.cons(s0(f), s1(f))) or not f(List.nil[Nat]) or f(l)","not f(List.nil[Nat]) or f(s1(f)) or f(l)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"euclids_lemma_prime_divides_list","proof":["let s0: (Nat, List[Nat]) -> Nat satisfy { forall(x0: Nat, x1: List[Nat]) { not x0.divides(product(x1)) or not x0.is_prime or not euclids_lemma_prime_divides_list(x0, x1) or s0(x0, x1) ∈ x1 } and forall(x2: Nat, x3: List[Nat]) { not x2.divides(product(x3)) or not x2.is_prime or not euclids_lemma_prime_divides_list(x2, x3) or x2.divides(s0(x2, x3)) } and forall(x4: Nat, x5: List[Nat]) { x4.is_prime or euclids_lemma_prime_divides_list(x4, x5) } and forall(x6: Nat, x7: List[Nat]) { x6.divides(product(x7)) or euclids_lemma_prime_divides_list(x6, x7) } and forall(x8: Nat, x9: Nat, x10: List[Nat]) { not x8.divides(x9) or not x9 ∈ x10 or euclids_lemma_prime_divides_list(x8, x10) } }","not a.divides(s0(a, l)) or not s0(a, l) ∈ l","euclids_lemma_prime_divides_list(a, l) = f(l)","not a.divides(product(l)) or not a.is_prime or not euclids_lemma_prime_divides_list(a, l) or a.divides(s0(a, l))","not a.divides(product(l)) or not a.is_prime or not euclids_lemma_prime_divides_list(a, l) or s0(a, l) ∈ l","euclids_lemma_prime_divides_list(a, l)","s0(a, l) ∈ l","a.divides(s0(a, l))","not a.divides(s0(a, l))"]}
{"goal":"exists(k0: Nat) { k0 ∈ l and a.divides(k0) }","proof":["let s0: (Nat, List[Nat]) -> Nat satisfy { forall(x0: Nat, x1: List[Nat]) { not x0.divides(product(x1)) or not x0.is_prime or s0(x0, x1) ∈ x1 } and forall(x2: Nat, x3: List[Nat]) { not x2.divides(product(x3)) or not x2.is_prime or x2.divides(s0(x2, x3)) } }","not a.divides(s0(a, l)) or not s0(a, l) ∈ l","not a.divides(product(l)) or not a.is_prime or a.divides(s0(a, l))","not a.divides(product(l)) or not a.is_prime or s0(a, l) ∈ l","s0(a, l) ∈ l","a.divides(s0(a, l))","not a.divides(s0(a, l))"]}
{"goal":"a = p","proof":["not a.is_prime or not p.is_prime or not a.divides(p) or p = a","not p.is_prime","not all_prime(l) or not p ∈ l or p.is_prime"]}
{"goal":"euclids_lemma_prime_divides_prime_list","proof":["not p ∈ l or p != a","p != a"]}
{"goal":"f(List.nil[Nat])","proof":["x^List.nil[Nat].count(x) * product(List.nil[Nat] ∖ x) != product(List.nil[Nat]) or f(List.nil[Nat])","List.nil[Nat] != List.nil[Nat] or List.nil[Nat].count(x) = 0","List.nil[Nat] != List.nil[Nat] or List.nil[Nat] ∖ x = List.nil[Nat]","List.nil[Nat] != List.nil[Nat] or sum[Nat](List.nil[Nat]) = 1","x^List.nil[Nat].count(x) * 1 = x^List.nil[Nat].count(x)","let s0: List[Nat] satisfy { true }","product(s0) = sum[Nat](s0)","x^0 = 1","product = sum[Nat]","sum[Nat](List.nil[Nat]) = 1","List.nil[Nat] ∖ x = List.nil[Nat]","List.nil[Nat].count(x) = 0","x^List.nil[Nat].count(x) * product(List.nil[Nat] ∖ x) != product(List.nil[Nat])"]}
{"goal":"product(List.cons(head, tail)) = head * product(tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head * sum[Nat](tail) = sum[Nat](List.cons(head, tail))","product(List.cons(head, tail)) = sum[Nat](List.cons(head, tail))","product(tail) = sum[Nat](tail)","product(List.cons(head, tail)) != head * sum[Nat](tail)","head * sum[Nat](tail) != sum[Nat](List.cons(head, tail))"]}
{"goal":"List.cons(head, tail) ∖ x = tail ∖ x","proof":["List.cons(head, tail) != List.cons(head, tail) or head != x or List.cons(head, tail) ∖ x = tail ∖ x","List.cons(head, tail) != List.cons(head, tail) or head != x"]}
{"goal":"List.cons(head, tail).count(x) = 1 + tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or head != x or 1 + tail.count(x) = List.cons(head, tail).count(x)","List.cons(head, tail) != List.cons(head, tail) or head != x"]}
{"goal":"x^List.cons(head, tail).count(x) = x * x^tail.count(x)","proof":["List.cons(head, tail).count(x) != tail.count(x).suc or x * x^tail.count(x) = x^List.cons(head, tail).count(x)","1 + tail.count(x) = tail.count(x).suc","List.cons(head, tail).count(x) != tail.count(x).suc","List.cons(head, tail).count(x) = tail.count(x).suc"]}
{"goal":"x^tail.count(x) * product(tail ∖ x) = product(tail)","proof":["not f(tail) or x^tail.count(x) * product(tail ∖ x) = product(tail)"]}
{"goal":"x * x^tail.count(x) * product(List.cons(head, tail) ∖ x) = x * product(tail)","proof":["x * (x^tail.count(x) * product(List.cons(head, tail) ∖ x)) = x * x^tail.count(x) * product(List.cons(head, tail) ∖ x)"]}
{"goal":"x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) = product(List.cons(head, tail))","proof":[]}
{"goal":"f(List.cons(head, tail))","proof":["x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail)) or f(List.cons(head, tail))","x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail))"]}
{"goal":"x != head","proof":[]}
{"goal":"x ∈ tail","proof":["not x ∈ List.cons(head, tail) or x ∈ tail or head = x"]}
{"goal":"List.cons(head, tail).count(x) = tail.count(x)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail).count(x) = tail.count(x) or head = x","List.cons(head, tail) != List.cons(head, tail) or head = x"]}
{"goal":"List.cons(head, tail) ∖ x = List.cons(head, tail ∖ x)","proof":["List.cons(head, tail) != List.cons(head, tail) or List.cons(head, tail) ∖ x = List.cons(head, tail ∖ x) or head = x"]}
{"goal":"product(List.cons(head, tail) ∖ x) = head * product(tail ∖ x)","proof":["List.cons(head, tail) ∖ x != List.cons(head, tail ∖ x) or head * sum[Nat](tail ∖ x) = sum[Nat](List.cons(head, tail) ∖ x)","product(List.cons(head, tail) ∖ x) = sum[Nat](List.cons(head, tail) ∖ x)","product(tail ∖ x) = sum[Nat](tail ∖ x)","head * product(tail ∖ x) != sum[Nat](List.cons(head, tail) ∖ x)","head * sum[Nat](tail ∖ x) = sum[Nat](List.cons(head, tail) ∖ x)","head * sum[Nat](tail ∖ x) != sum[Nat](List.cons(head, tail) ∖ x)"]}
{"goal":"x^tail.count(x) * product(tail ∖ x) = product(tail)","proof":["not f(tail) or x^tail.count(x) * product(tail ∖ x) = product(tail)"]}
{"goal":"product(List.cons(head, tail)) = head * x^tail.count(x) * product(tail ∖ x)","proof":["head * (x^tail.count(x) * product(tail ∖ x)) = head * x^tail.count(x) * product(tail ∖ x)"]}
{"goal":"product(List.cons(head, tail)) = head * x^List.cons(head, tail).count(x) * product(tail ∖ x)","proof":["head * x^tail.count(x) * product(tail ∖ x) != product(List.cons(head, tail))"]}
{"goal":"product(List.cons(head, tail)) = x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x)","proof":["x^tail.count(x) * (head * product(tail ∖ x)) = x^tail.count(x) * head * product(tail ∖ x)","head * x^tail.count(x) = x^tail.count(x) * head"]}
{"goal":"f(List.cons(head, tail))","proof":["x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail)) or f(List.cons(head, tail))","x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail))"]}
{"goal":"x ∉ List.cons(head, tail)","proof":["x ∉ List.cons(head, tail) != x ∈ List.cons(head, tail)","x ∉ List.cons(head, tail) or x ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail).count(x) = 0","proof":["List.cons(head, tail).count(x) = 0 or x ∈ List.cons(head, tail)"]}
{"goal":"List.cons(head, tail) ∖ x = List.cons(head, tail)","proof":["not x ∉ List.cons(head, tail) or List.cons(head, tail) ∖ x = List.cons(head, tail)"]}
{"goal":"x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) = product(List.cons(head, tail))","proof":["product(List.cons(head, tail) ∖ x) * x^0 = x^0 * product(List.cons(head, tail) ∖ x)","head * product(tail) * 1 = head * product(tail)","x^0 = 1"]}
{"goal":"f(List.cons(head, tail))","proof":["x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail)) or f(List.cons(head, tail))","x^List.cons(head, tail).count(x) * product(List.cons(head, tail) ∖ x) != product(List.cons(head, tail))"]}
{"goal":"f(l)","proof":["let (s0: List[Nat] -> Bool -> Nat, s1: List[Nat] -> Bool -> List[Nat]) satisfy { forall(x0: List[Nat] -> Bool, x1: List[Nat]) { not x0(List.nil[Nat]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[Nat] -> Bool, x3: List[Nat]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[Nat]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(List.cons(s0(f), s1(f))) or not f(List.nil[Nat]) or f(l)","not f(List.nil[Nat]) or f(s1(f)) or f(l)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"remove_product","proof":["not f(l) or x^l.count(x) * product(l ∖ x) = product(l)"]}
{"goal":"prime_divides_prime_list_iff_contains","proof":["let s0: (Nat, List[Nat]) -> Nat satisfy { forall(x0: Nat, x1: List[Nat]) { not x0.divides(product(x1)) or not all_prime(x1) or not x0.is_prime or s0(x0, x1) ∈ x1 } and forall(x2: Nat, x3: List[Nat]) { not x2.divides(product(x3)) or not all_prime(x3) or not x2.is_prime or s0(x2, x3) = x2 } }","not x.divides(product(l)) or not all_prime(l) or not x.is_prime or s0(x, l) ∈ l","not x.divides(product(l)) or not all_prime(l) or not x.is_prime or s0(x, l) = x","l.count(x) != 0 or not x ∈ l","not x ∈ l","s0(x, l) = x","s0(x, l) ∈ l","not s0(x, l) ∈ l"]}
{"goal":"n ∈ l ∖ x implies n ∈ l","proof":["not n ∉ l or n ∉ l ∖ x","n ∉ l ∖ x != n ∈ l ∖ x","n ∉ l != n ∈ l","n ∉ l or n ∈ l","n ∉ l","not n ∉ l ∖ x or not n ∈ l ∖ x","not n ∉ l ∖ x"]}
{"goal":"n ∈ l ∖ x implies n.is_prime","proof":["not all_prime(l) or not n ∈ l or n.is_prime"]}
{"goal":"remove_preserve_all_prime","proof":["let s0: List[Nat] -> Nat satisfy { forall(x0: List[Nat], x1: Nat) { not all_prime(x0) or not x1 ∈ x0 or x1.is_prime } and forall(x2: List[Nat]) { s0(x2) ∈ x2 or all_prime(x2) } and forall(x3: List[Nat]) { not s0(x3).is_prime or all_prime(x3) } }","not s0(l ∖ x) ∈ l ∖ x or s0(l ∖ x).is_prime","s0(l ∖ x) ∈ l ∖ x or all_prime(l ∖ x)","not s0(l ∖ x).is_prime or all_prime(l ∖ x)","not s0(l ∖ x).is_prime","s0(l ∖ x) ∈ l ∖ x","not s0(l ∖ x) ∈ l ∖ x"]}
{"goal":"x^l1.count(x) * product(l1 ∖ x) = product(l1)","proof":["x^l1.count(x) * product(l1 ∖ x) = product(l1)"]}
{"goal":"x^l2.count(x) * product(l2 ∖ x) = product(l2)","proof":["x^l2.count(x) * product(l2 ∖ x) = product(l2)"]}
{"goal":"exists(k0: Nat) { l1.count(x) + k0 = l2.count(x) and k0 != 0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or 0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or 0 = x5 } }","l1.count(x) + s0(l1.count(x), l2.count(x)) != l2.count(x) or s0(l1.count(x), l2.count(x)) = 0","not l1.count(x) < l2.count(x) or l1.count(x) + s0(l1.count(x), l2.count(x)) = l2.count(x)","not l1.count(x) < l2.count(x) or s0(l1.count(x), l2.count(x)) != 0","s0(l1.count(x), l2.count(x)) != 0","l1.count(x) + s0(l1.count(x), l2.count(x)) = l2.count(x)","l1.count(x) + s0(l1.count(x), l2.count(x)) != l2.count(x)"]}
{"goal":"x^l2.count(x) = x^l1.count(x) * x^n","proof":["x^l1.count(x) * x^n = x^(l1.count(x) + n)"]}
{"goal":"x^l1.count(x) * product(l1 ∖ x) = x^l1.count(x) * (x^n * product(l2 ∖ x))","proof":["x^l1.count(x) * (x^n * product(l2 ∖ x)) = x^l1.count(x) * x^n * product(l2 ∖ x)"]}
{"goal":"x^l1.count(x) != 0","proof":["x^l1.count(x) != 0 or 0 = x","0 = x","x > 1 = 1 < x","not x.is_prime or x > 1","not 1 < 0","x > 1","1 < x"]}
{"goal":"product(l1 ∖ x) = x^n * product(l2 ∖ x)","proof":["x^l1.count(x) * (x^n * product(l2 ∖ x)) != x^l1.count(x) * product(l1 ∖ x) or x^l1.count(x) = 0 or x^n * product(l2 ∖ x) = product(l1 ∖ x)"]}
{"goal":"1 <= n","proof":["n >= 1 = 1 <= n","not n >= 1","n >= 1 or n = 0"]}
{"goal":"product(l1 ∖ x) = x * x^(n - 1) * product(l2 ∖ x)","proof":["nat_base.bounded_sub(n, 1).suc != nat_base.bounded_sub(n, 1).suc or x * x^nat_base.bounded_sub(n, 1) = x^nat_base.bounded_sub(n, 1).suc","List.cons(x^(n - 1) * x, l2 ∖ x) != List.cons(x^(n - 1) * x, l2 ∖ x) or x^(n - 1) * x * sum[Nat](l2 ∖ x) = sum[Nat](List.cons(x^(n - 1) * x, l2 ∖ x))","List.cons(x^n, l2 ∖ x) != List.cons(x^n, l2 ∖ x) or x^n * sum[Nat](l2 ∖ x) = sum[Nat](List.cons(x^n, l2 ∖ x))","not 1 <= n or n - 1 + 1 = n","x * x^(n - 1) = x^(n - 1) * x","n - 1 = nat_base.bounded_sub(n, 1)","n - 1 + 1 = (n - 1).suc","product(l2 ∖ x) = sum[Nat](l2 ∖ x)","x^(n - 1) * x * sum[Nat](l2 ∖ x) = sum[Nat](List.cons(x^(n - 1) * x, l2 ∖ x))","x^n * sum[Nat](l2 ∖ x) = sum[Nat](List.cons(x^n, l2 ∖ x))","x * x^nat_base.bounded_sub(n, 1) = x^nat_base.bounded_sub(n, 1).suc","n - 1 + 1 = n"]}
{"goal":"x.is_prime","proof":["not head.is_prime"]}
{"goal":"all_prime(l1 ∖ x)","proof":["not all_prime(l1) or not x.is_prime or all_prime(l1 ∖ x)"]}
{"goal":"x.divides(product(l1 ∖ x))","proof":["x * (x^(n - 1) * product(l2 ∖ x)) = x * x^(n - 1) * product(l2 ∖ x)","x * (x^(n - 1) * product(l2 ∖ x)) != product(l1 ∖ x) or x.divides(product(l1 ∖ x))","x * (x^(n - 1) * product(l2 ∖ x)) != product(l1 ∖ x)"]}
{"goal":"(l1 ∖ x).count(x) != 0","proof":["not x.divides(product(l1 ∖ x)) or not all_prime(l1 ∖ x) or not x.is_prime or (l1 ∖ x).count(x) != 0"]}
{"goal":"false","proof":["(l1 ∖ x).count(x) = 0 or x ∈ l1 ∖ x","x ∉ l1 ∖ x != x ∈ l1 ∖ x","x ∉ l1 ∖ x","not x ∉ l1 ∖ x or not x ∈ l1 ∖ x","x ∈ l1 ∖ x"]}
{"goal":"prime_decomposition_have_same_count_of_prime_helper","proof":["l1.count(x) < l2.count(x) or l2.count(x) < l1.count(x) or l2.count(x) = l1.count(x)","l1.count(x) >= l2.count(x) = l2.count(x) <= l1.count(x)","not l2.count(x) <= l1.count(x)","not l2.count(x) < l1.count(x) or l2.count(x) <= l1.count(x)","l2.count(x) != l1.count(x) or l2.count(x) <= l1.count(x)","l2.count(x) != l1.count(x)","not l2.count(x) < l1.count(x)","l2.count(x) < l1.count(x)"]}
{"goal":"l1.count(x) >= l2.count(x)","proof":["product(l2) != product(l1) or not all_prime(l1) or not all_prime(l2) or not x.is_prime or l1.count(x) >= l2.count(x)"]}
{"goal":"l2.count(x) >= l1.count(x)","proof":["product(l2) != product(l1) or not all_prime(l2) or not all_prime(l1) or not x.is_prime or l2.count(x) >= l1.count(x)"]}
{"goal":"prime_list_same_count_prime","proof":["not l1.count(x) <= l2.count(x) or l1.count(x) < l2.count(x) or l2.count(x) = l1.count(x)","not l2.count(x) <= l1.count(x) or l2.count(x) < l1.count(x) or l2.count(x) = l1.count(x)","not l1.count(x) < l2.count(x) or not l2.count(x) < l1.count(x)","l1.count(x) >= l2.count(x) = l2.count(x) <= l1.count(x)","l2.count(x) >= l1.count(x) = l1.count(x) <= l2.count(x)","l1.count(x) <= l2.count(x)","l2.count(x) <= l1.count(x)","l2.count(x) < l1.count(x)","l1.count(x) < l2.count(x)","not l1.count(x) < l2.count(x)"]}
{"goal":"exists(k0: Nat, k1: Nat, k2: Nat) { a = k0 * k1 and (1 < k0 and k0 < a) and (1 < k1 and k1 < a) and a * k2 = p }","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","let s2: (Nat, Nat) -> Nat satisfy { forall(x8: Nat, x9: Nat) { not x8.divides(x9) or x8 * s2(x8, x9) = x9 } and forall(x10: Nat, x11: Nat, x12: Nat) { x10 * x11 != x12 or x10.divides(x12) } }","not 1 < s0(a) or not 1 < s1(a) or not s0(a) < a or not s1(a) < a or a * s2(a, p) != p or s0(a) * s1(a) != a","not a.divides(p) or a * s2(a, p) = p","not a.is_direct_composite or s0(a) * s1(a) = a","not a.is_direct_composite or s1(a) < a","not a.is_direct_composite or 1 < s1(a)","not a.is_direct_composite or s0(a) < a","not a.is_direct_composite or 1 < s0(a)","a.is_direct_composite = a.is_composite","a.is_direct_composite","a * s2(a, p) = p","not 1 < s0(a) or not 1 < s1(a) or not s0(a) < a or not s1(a) < a or s0(a) * s1(a) != a","1 < s0(a)","s0(a) < a","1 < s1(a)","s1(a) < a","s0(a) * s1(a) = a"]}
{"goal":"b * (c * n) = p","proof":["b * (c * n) = b * c * n"]}
{"goal":"b < p","proof":["not a <= p or not b < a or b < p","not a.divides(p) or a <= p or 0 = p","p > 1 = 1 < p","not a <= p or not b < a","not a <= p","0 = p","not p.is_prime or p > 1","not 1 < 0","p > 1","1 < p"]}
{"goal":"b.proper_divides(p)","proof":["not 1 < b or not b < p or b * (c * n) != p or b.proper_divides(p) or 0 = p","0 = p","not b < 0"]}
{"goal":"not p.is_prime","proof":["not p.is_prime or not b.proper_divides(p)"]}
{"goal":"false","proof":[]}
{"goal":"composite_not_divides_prime","proof":[]}
{"goal":"l.count(n) = 0","proof":["l.count(n) = 0 or n ∈ l","n ∈ l","not all_prime(l) or not n ∈ l or n.is_prime"]}
{"goal":"1 < n","proof":["n <= 1 or n.is_prime or n.is_composite","let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.proper_divides(x2) or x2.is_composite } }","not n.is_composite or s0(n).proper_divides(n)","not s0(n).proper_divides(n) or 1 < n","not s0(n).proper_divides(n)","n.is_composite","not n.is_composite"]}
{"goal":"n.is_composite","proof":["n <= 1 or n.is_prime or n.is_composite"]}
{"goal":"l.count(n) = 0","proof":["l.count(n) = 0 or n ∈ l","n ∈ l","not all_prime(l) or not n ∈ l or n.is_prime"]}
{"goal":"not_prime_not_in_prime_list","proof":[]}
{"goal":"x.is_prime implies l1.count(x) = l2.count(x)","proof":["product(l2) != product(l1) or not all_prime(l2) or not all_prime(l1) or not x.is_prime or l2.count(x) = l1.count(x)","product(l2) = product(l1)","product(l2) != product(l1)"]}
{"goal":"not x.is_prime implies l1.count(x) = l2.count(x)","proof":["not all_prime(l2) or x.is_prime or l2.count(x) = 0","l1.count(x) = 0 or x ∈ l1","not all_prime(l1) or not x ∈ l1 or x.is_prime","not x ∈ l1 or not all_prime(l1)","not x ∈ l1","not all_prime(l2) or l2.count(x) = 0","l2.count(x) = 0","l1.count(x) = 0","l1.count(x) != 0"]}
{"goal":"prime_decomposition_uniqueness","proof":["let s0: (List[Nat], List[Nat]) -> Nat satisfy { forall(x0: List[Nat], x1: List[Nat], x2: Nat) { not x0.is_permutation(x1) or x0.count(x2) = x1.count(x2) } and forall(x3: List[Nat], x4: List[Nat]) { x3.count(s0(x3, x4)) != x4.count(s0(x3, x4)) or x3.is_permutation(x4) } }","l2.count(s0(l1, l2)) = l1.count(s0(l1, l2)) or s0(l1, l2).is_prime","product(l2) != product(l1) or not all_prime(l1) or not all_prime(l2) or not s0(l1, l2).is_prime or l2.count(s0(l1, l2)) = l1.count(s0(l1, l2))","l2.count(s0(l1, l2)) != l1.count(s0(l1, l2)) or l1.is_permutation(l2)","product(l2) = product(l1)","l2.count(s0(l1, l2)) != l1.count(s0(l1, l2))","s0(l1, l2).is_prime","not s0(l1, l2).is_prime"]}
{"goal":"f(List.nil[Nat])","proof":["x ∈ List.nil[Nat] or f(List.nil[Nat])","x ∈ List.nil[Nat]","not x ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]"]}
{"goal":"product(List.cons(head, tail)) = head","proof":["product(List.cons(head, List.nil[Nat])) != head","List.cons(head, List.nil[Nat]) = List.singleton(head)","product(List.singleton(head)) != head","sum[Nat](List.singleton(head)) = head","product(List.singleton(head)) = sum[Nat](List.singleton(head))"]}
{"goal":"head.is_prime","proof":["not all_prime(List.cons(head, tail)) or head.is_prime"]}
{"goal":"1 < head","proof":["head > 1 = 1 < head","not head > 1","not head.is_prime or head > 1"]}
{"goal":"1 < product(List.cons(head, tail))","proof":[]}
{"goal":"1 < product(tail)","proof":["f(tail) = non_nil_prime_list_product_gt_1(tail)","not all_prime(tail) or not non_nil_prime_list_product_gt_1(tail) or 1 < product(tail) or List.nil[Nat] = tail","non_nil_prime_list_product_gt_1(tail)","not all_prime(tail)","not all_prime(List.cons(head, tail)) or all_prime(tail)"]}
{"goal":"head.is_prime","proof":["not all_prime(List.cons(head, tail)) or head.is_prime"]}
{"goal":"1 < head","proof":["head > 1 = 1 < head","not head > 1","not head.is_prime or head > 1"]}
{"goal":"product(List.cons(head, tail)) = head * product(tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head * sum[Nat](tail) = sum[Nat](List.cons(head, tail))","product(List.cons(head, tail)) = sum[Nat](List.cons(head, tail))","product(tail) = sum[Nat](tail)","product(List.cons(head, tail)) != head * sum[Nat](tail)","head * sum[Nat](tail) != sum[Nat](List.cons(head, tail))"]}
{"goal":"1 < product(List.cons(head, tail))","proof":["not 1 < head or not 1 < product(tail) or head * product(tail) != product(List.cons(head, tail)) or product(List.cons(head, tail)).is_normal_composite","let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).proper_divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.proper_divides(x2) or x2.is_composite } }","not product(List.cons(head, tail)).is_composite or s0(product(List.cons(head, tail))).proper_divides(product(List.cons(head, tail)))","not s0(product(List.cons(head, tail))).proper_divides(product(List.cons(head, tail))) or 1 < product(List.cons(head, tail))","not s0(product(List.cons(head, tail))).proper_divides(product(List.cons(head, tail)))","product(List.cons(head, tail)).is_normal_composite = product(List.cons(head, tail)).is_composite","product(List.cons(head, tail)).is_normal_composite","not product(List.cons(head, tail)).is_composite","product(List.cons(head, tail)).is_composite"]}
{"goal":"1 < product(List.cons(head, tail))","proof":[]}
{"goal":"f(List.cons(head, tail))","proof":["f(List.cons(head, tail)) = non_nil_prime_list_product_gt_1(List.cons(head, tail))","all_prime(List.cons(head, tail)) or non_nil_prime_list_product_gt_1(List.cons(head, tail))","not 1 < product(List.cons(head, tail)) or non_nil_prime_list_product_gt_1(List.cons(head, tail))","not non_nil_prime_list_product_gt_1(List.cons(head, tail))","all_prime(List.cons(head, tail))","not 1 < product(List.cons(head, tail))","1 < product(List.cons(head, tail))"]}
{"goal":"f(l)","proof":["let (s0: List[Nat] -> Bool -> Nat, s1: List[Nat] -> Bool -> List[Nat]) satisfy { forall(x0: List[Nat] -> Bool, x1: List[Nat]) { not x0(List.nil[Nat]) or x0(s1(x0)) or x0(x1) } and forall(x2: List[Nat] -> Bool, x3: List[Nat]) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[Nat]) or x2(x3) } }","not f(s1(f)) or f(List.cons(s0(f), s1(f)))","not f(List.cons(s0(f), s1(f))) or not f(List.nil[Nat]) or f(l)","not f(List.nil[Nat]) or f(s1(f)) or f(l)","f(s1(f))","not f(List.cons(s0(f), s1(f)))"]}
{"goal":"non_nil_prime_list_product_gt_1","proof":["f(l) = non_nil_prime_list_product_gt_1(l)","not all_prime(l) or not non_nil_prime_list_product_gt_1(l) or 1 < product(l) or List.nil[Nat] = l","non_nil_prime_list_product_gt_1(l)","not non_nil_prime_list_product_gt_1(l)"]}
{"goal":"not x.have_prime_decomposition(List.nil[Nat])","proof":["let s0: (Nat, List[Nat]) -> Nat satisfy { forall(x0: Nat, x1: List[Nat]) { not x0.divides(product(x1)) or not all_prime(x1) or not x0.is_prime or s0(x0, x1) ∈ x1 } and forall(x2: Nat, x3: List[Nat]) { not x2.divides(product(x3)) or not all_prime(x3) or not x2.is_prime or s0(x2, x3) = x2 } }","not x.divides(product(List.nil[Nat])) or not all_prime(List.nil[Nat]) or not x.is_prime or s0(x, List.nil[Nat]) ∈ List.nil[Nat]","not x.have_prime_decomposition(List.nil[Nat]) or product(List.nil[Nat]) = x","product(List.nil[Nat]) = x","not s0(x, List.nil[Nat]) ∈ List.nil[Nat] or List.nil[Nat] != List.nil[Nat]","not x.have_prime_decomposition(List.nil[Nat]) or all_prime(List.nil[Nat])","all_prime(List.nil[Nat])","product(List.nil[Nat]).divides(product(List.nil[Nat]))","not s0(x, List.nil[Nat]) ∈ List.nil[Nat]","not x.divides(product(List.nil[Nat])) or not all_prime(List.nil[Nat]) or s0(x, List.nil[Nat]) ∈ List.nil[Nat]","not x.divides(product(List.nil[Nat]))"]}
{"goal":"prime_have_singleton_prime_decomposition(x, List.nil[Nat])","proof":["x.have_prime_decomposition(List.nil[Nat]) or prime_have_singleton_prime_decomposition(x, List.nil[Nat])"]}
{"goal":"1 < head","proof":["not all_prime(List.cons(head, tail)) or head.is_prime","head > 1 = 1 < head","not head > 1","head.is_prime","not head.is_prime or head > 1"]}
{"goal":"1 < product(tail)","proof":["not all_prime(tail) or 1 < product(tail) or List.nil[Nat] = tail","not all_prime(tail)","not all_prime(List.cons(head, tail)) or all_prime(tail)"]}
{"goal":"product(List.cons(head, tail)) = head * product(tail)","proof":["List.cons(head, tail) != List.cons(head, tail) or head * sum[Nat](tail) = sum[Nat](List.cons(head, tail))","product(List.cons(head, tail)) = sum[Nat](List.cons(head, tail))","product(tail) = sum[Nat](tail)","product(List.cons(head, tail)) != head * sum[Nat](tail)","head * sum[Nat](tail) != sum[Nat](List.cons(head, tail))"]}
{"goal":"not x.is_prime","proof":["not 1 < head or not 1 < product(tail) or head * product(tail) != product(List.cons(head, tail)) or product(List.cons(head, tail)).is_normal_composite","not x.have_prime_decomposition(List.cons(head, tail)) or product(List.cons(head, tail)) = x","not x.is_prime or not x.is_composite","not x.is_composite","let s0: Nat satisfy { true }","s0.is_normal_composite = s0.is_direct_composite","s0.is_direct_composite = s0.is_composite","Nat.is_direct_composite = Nat.is_composite","Nat.is_normal_composite = Nat.is_direct_composite","product(List.cons(head, tail)) = x","product(List.cons(head, tail)).is_normal_composite"]}
{"goal":"false","proof":[]}
{"goal":"tail = List.nil[Nat]","proof":[]}
{"goal":"List.cons(head, tail) = List.singleton(head)","proof":["List.cons(head, List.nil[Nat]) != List.singleton(head)","List.cons(head, List.nil[Nat]) = List.singleton(head)"]}
{"goal":"x = product(List.cons(head, tail))","proof":["product(List.singleton(head)) != x","x.have_prime_decomposition(List.singleton(head))","not x.have_prime_decomposition(List.singleton(head)) or product(List.singleton(head)) = x"]}
{"goal":"x = head","proof":["product(List.singleton(head)) = x","sum[Nat](List.singleton(head)) = head","sum[Nat](List.singleton(head)) != x","product(List.singleton(head)) = sum[Nat](List.singleton(head))"]}
{"goal":"List.cons(head, tail) = List.singleton(x)","proof":["List.cons(head, List.nil[Nat]) = List.singleton(head)"]}
{"goal":"l = List.singleton(x)","proof":["let (s0: Nat, s1: List[Nat]) satisfy { forall(x0: List[Nat]) { not prime_have_singleton_prime_decomposition(x, List.nil[Nat]) or prime_have_singleton_prime_decomposition(x, s1) or prime_have_singleton_prime_decomposition(x, x0) } and forall(x1: List[Nat]) { not prime_have_singleton_prime_decomposition(x, List.cons(s0, s1)) or not prime_have_singleton_prime_decomposition(x, List.nil[Nat]) or prime_have_singleton_prime_decomposition(x, x1) } }","List.cons(s0, s1) != List.singleton(x) or prime_have_singleton_prime_decomposition(x, List.cons(s0, s1))","x.have_prime_decomposition(List.cons(s0, s1)) or prime_have_singleton_prime_decomposition(x, List.cons(s0, s1))","not prime_have_singleton_prime_decomposition(x, List.cons(s0, s1)) or not prime_have_singleton_prime_decomposition(x, List.nil[Nat]) or prime_have_singleton_prime_decomposition(x, l)","not prime_have_singleton_prime_decomposition(x, List.cons(s0, s1)) or prime_have_singleton_prime_decomposition(x, l)","not x.have_prime_decomposition(l) or not x.is_prime or not prime_have_singleton_prime_decomposition(x, l) or List.singleton(x) = l","not x.have_prime_decomposition(List.cons(s0, s1)) or not all_prime(List.cons(s0, s1)) or List.cons(s0, s1) = List.singleton(x)","not prime_have_singleton_prime_decomposition(x, l)","not x.have_prime_decomposition(List.cons(s0, s1)) or all_prime(List.cons(s0, s1))","not prime_have_singleton_prime_decomposition(x, List.cons(s0, s1))","x.have_prime_decomposition(List.cons(s0, s1))","List.cons(s0, s1) != List.singleton(x)","all_prime(List.cons(s0, s1))","not all_prime(List.cons(s0, s1))"]}
{"goal":"prime_have_singleton_prime_decomposition","proof":[]}
