{"goal":"exists(k0: Nat) { k0.divides(n) }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.divides(x2) or x2.is_composite } }","not s0(n).divides(n)","not n.is_composite or s0(n).divides(n)"]}
{"goal":"exists(k0: Nat) { a * k0 = n }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or 0 != x1 } and forall(x2: Nat, x3: Nat) { not x2.divides(x3) or 1 < x2 } and forall(x4: Nat, x5: Nat) { not x4.divides(x5) or x4 < x5 } and forall(x6: Nat, x7: Nat) { not x6.divides(x7) or x6 * s0(x6, x7) = x7 } and forall(x8: Nat, x9: Nat, x10: Nat) { not 1 < x8 or not x8 < x9 or x8 * x10 != x9 or x8.divides(x9) or 0 = x9 } }","a * s0(a, n) != n","not a.divides(n) or a * s0(a, n) = n"]}
{"goal":"b.divides(n)","proof":["not a.divides(n) or a * b != n or b.divides(n)"]}
{"goal":"1 < a and a < n and (1 < b and b < n) and a * b = n","proof":["not 1 < b or not b < n or not 1 < a or not a < n","not a.divides(n) or a < n","not b.divides(n) or b < n","not a.divides(n) or 1 < a","not b.divides(n) or 1 < b","1 < b","1 < a","b < n","a < n","not a < n"]}
{"goal":"n.is_direct_composite","proof":["not 1 < a or not 1 < b or not a < n or not b < n or a * b != n or n.is_direct_composite"]}
{"goal":"composite_is_direct_composite","proof":["n.is_direct_composite or n.is_composite","not n.is_direct_composite or not n.is_composite","not n.is_composite","n.is_direct_composite","let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { not x0.is_direct_composite or 1 < s0(x0) } and forall(x1: Nat) { not x1.is_direct_composite or s0(x1) < x1 } and forall(x2: Nat) { not x2.is_direct_composite or 1 < s1(x2) } and forall(x3: Nat) { not x3.is_direct_composite or s1(x3) < x3 } and forall(x4: Nat) { not x4.is_direct_composite or s0(x4) * s1(x4) = x4 } and forall(x5: Nat, x6: Nat, x7: Nat) { not 1 < x5 or not 1 < x6 or not x5 < x7 or not x6 < x7 or x5 * x6 != x7 or x7.is_direct_composite } }","not 1 < s0(n) or not s0(n) < n or s0(n) * s1(n) != n or s0(n).divides(n) or n = 0","not n <= 0 or not s1(n) < n or s1(n) < 0","not n.is_direct_composite or s0(n) * s1(n) = n","not n.is_direct_composite or s1(n) < n","not n.is_direct_composite or s0(n) < n","not n.is_direct_composite or 1 < s0(n)","not s0(n).divides(n) or n.is_composite","not s0(n).divides(n)","n != 0 or n <= 0","not s1(n) < 0","1 < s0(n)","s0(n) < n","s1(n) < n","s0(n) * s1(n) = n","not n <= 0 or s1(n) < 0","not n <= 0","n = 0","n != 0"]}
{"goal":"n.is_prime implies not n.is_composite","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { not x0.is_composite or s0(x0).divides(x0) } and forall(x1: Nat, x2: Nat) { not x1.divides(x2) or x2.is_composite } }","not n.is_composite or s0(n).divides(n)","s0(n).divides(n)","not n.is_prime or not s0(n).divides(n)"]}
{"goal":"composite_is_not_prime","proof":["not n.is_prime or n.is_composite","not n.is_composite or n.is_prime","not n.is_composite","not n.is_prime","let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.is_prime or not x1.divides(x0) } and forall(x2: Nat) { s0(x2).divides(x2) or x2.is_prime } }","s0(n).divides(n) or n.is_prime","not s0(n).divides(n) or n.is_composite","not s0(n).divides(n)"]}
{"goal":"true_below(f, 0)","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","s0(f, 0) < 0 or true_below(f, 0)","s0(f, 0) < 0","not s0(f, 0) < 0"]}
{"goal":"g(0)","proof":["true_below(f, 0) = g(0)"]}
{"goal":"true_below(f, x)","proof":["true_below(f, x) = g(x)"]}
{"goal":"f(x)","proof":["not true_below(f, x) or f(x)"]}
{"goal":"f(y)","proof":["not true_below(f, x) or not y < x or f(y)","not true_below(f, x) or not y < x"]}
{"goal":"y = x","proof":["not y < x + 1 or y <= x","not y <= x or y < x or y = x","not y <= x","x + 1 = x.suc","not y < x + 1","y < x + 1"]}
{"goal":"f(y)","proof":["not f(x)"]}
{"goal":"f(y)","proof":[]}
{"goal":"true_below(f, x.suc)","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not true_below(x0, x1) or not x2 < x1 or x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or true_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { not x5(s0(x5, x6)) or true_below(x5, x6) } }","not s0(f, x.suc) < x.suc or f(s0(f, x.suc))","s0(f, x.suc) < x.suc or true_below(f, x.suc)","not f(s0(f, x.suc)) or true_below(f, x.suc)","not f(s0(f, x.suc))","s0(f, x.suc) < x.suc","not s0(f, x.suc) < x.suc"]}
{"goal":"g(x.suc)","proof":["true_below(f, x.suc) = g(x.suc)"]}
{"goal":"g(x)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not g(s0(g)) or g(s0(g).suc)","not g(s0(g).suc) or not g(0) or g(x)","not g(s0(g).suc)","not g(0) or g(s0(g)) or g(x)","not g(s0(g))","g(s0(g))"]}
{"goal":"g(n.suc)","proof":["g(n.suc)"]}
{"goal":"true_below(f, n.suc)","proof":["g(n.suc)","true_below(f, n.suc) = g(n.suc)"]}
{"goal":"f(n)","proof":["g(n)","true_below(f, n) = g(n)","not true_below(f, n) or f(n)","not true_below(f, n)"]}
{"goal":"strong_induction","proof":["let s0: Nat satisfy { not f(s0) }","f(s0)"]}
