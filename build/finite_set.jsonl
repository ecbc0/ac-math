{"goal":"const_false_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List[T], s2: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s1(x0) } and forall(x2: T -> Bool, x3: List[T]) { finite_constraint[T](x2) or x2(s2(x2, x3)) } and forall(x4: List[T], x5: T -> Bool) { not s2(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","let s0: List[T] satisfy { true }","finite_constraint[T](const_false[T]) or const_false(s2(const_false[T], s0))","const_false(s2(const_false[T], s0))","not const_false(s2(const_false[T], s0))"]}
{"goal":"list_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { finite_constraint[T](x2) or x2(s1(x2, x3)) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","not s1(ts.contains, ts) ∈ ts or finite_constraint[T](ts.contains)","finite_constraint[T](ts.contains) or s1(ts.contains, ts) ∈ ts","s1(ts.contains, ts) ∈ ts"]}
{"goal":"functional_insert_preserve_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { finite_constraint[T](x2) or x2(s1(x2, x3)) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","not functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) = item or f(s1(functional_insert(f, item), List.cons(item, s0(f))))","not finite_constraint[T](f) or not f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ s0(f)","not s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ s0(f) or s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ List.cons(item, s0(f))","not s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ List.cons(item, s0(f)) or finite_constraint[T](functional_insert(f, item))","s1(functional_insert(f, item), List.cons(item, s0(f))) != item or s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ List.cons(item, s0(f))","finite_constraint[T](functional_insert(f, item)) or functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f))))","not s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ List.cons(item, s0(f))","functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f))))","not f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ s0(f)","s1(functional_insert(f, item), List.cons(item, s0(f))) != item","not s1(functional_insert(f, item), List.cons(item, s0(f))) ∈ s0(f)","f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) = item","not f(s1(functional_insert(f, item), List.cons(item, s0(f))))","f(s1(functional_insert(f, item), List.cons(item, s0(f))))"]}
{"goal":"functional_remove_preserve_finite_constraint","proof":["let (s0: T -> Bool -> List[T], s1: (T -> Bool, List[T]) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint[T](x0) or not x0(x1) or x1 ∈ s0(x0) } and forall(x2: T -> Bool, x3: List[T]) { finite_constraint[T](x2) or x2(s1(x2, x3)) } and forall(x4: List[T], x5: T -> Bool) { not s1(x5, x4) ∈ x4 or finite_constraint[T](x5) } }","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) = item or f(s1(functional_remove(f, item), s0(f)))","not finite_constraint[T](f) or not f(s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) ∈ s0(f)","not s1(functional_remove(f, item), s0(f)) ∈ s0(f) or finite_constraint[T](functional_remove(f, item))","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) != item","finite_constraint[T](functional_remove(f, item)) or functional_remove(f, item, s1(functional_remove(f, item), s0(f)))","not s1(functional_remove(f, item), s0(f)) ∈ s0(f)","functional_remove(f, item, s1(functional_remove(f, item), s0(f)))","not f(s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) ∈ s0(f)","s1(functional_remove(f, item), s0(f)) != item","not f(s1(functional_remove(f, item), s0(f)))","f(s1(functional_remove(f, item), s0(f)))"]}
{"goal":"exists(k0: T -> Bool) { finite_constraint[T](k0) }","proof":["not finite_constraint[T](const_false[T])"]}
{"goal":"insert_contains","proof":["Finite_Set.new[T](functional_insert(set.contains, item)) = set.insert(item)","not finite_constraint[T](functional_insert(set.contains, item)) or item ∈ Finite_Set.new[T](functional_insert(set.contains, item)) = functional_insert(set.contains, item, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, item))","item != item or functional_insert(set.contains, item, item)","finite_constraint[T](set.contains)","not item ∈ Finite_Set.new[T](functional_insert(set.contains, item))","functional_insert(set.contains, item, item)","not finite_constraint[T](functional_insert(set.contains, item)) or not functional_insert(set.contains, item, item) or item ∈ Finite_Set.new[T](functional_insert(set.contains, item))","not finite_constraint[T](functional_insert(set.contains, item))"]}
{"goal":"remove_does_not_contain","proof":["Finite_Set.new[T](functional_remove(set.contains, item)) = set.remove(item)","not finite_constraint[T](functional_remove(set.contains, item)) or item ∈ Finite_Set.new[T](functional_remove(set.contains, item)) = functional_remove(set.contains, item, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, item))","not functional_remove(set.contains, item, item) or item != item","finite_constraint[T](set.contains)","item ∈ Finite_Set.new[T](functional_remove(set.contains, item))","not functional_remove(set.contains, item, item)","not item ∈ Finite_Set.new[T](functional_remove(set.contains, item)) or not finite_constraint[T](functional_remove(set.contains, item)) or functional_remove(set.contains, item, item)","not finite_constraint[T](functional_remove(set.contains, item))"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.insert(other).contains)","proof":["finite_constraint[T](set.insert(other).contains)"]}
{"goal":"insert_other_still_contains","proof":["Finite_Set.new[T](functional_insert(set.contains, other)) = set.insert(other)","not item ∈ set or functional_insert(set.contains, other, item) or other = item","not finite_constraint[T](functional_insert(set.contains, other)) or item ∈ Finite_Set.new[T](functional_insert(set.contains, other)) = functional_insert(set.contains, other, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, other))","other != item or functional_insert(set.contains, other, item)","not item ∈ Finite_Set.new[T](functional_insert(set.contains, other))","not finite_constraint[T](functional_insert(set.contains, other)) or not functional_insert(set.contains, other, item) or item ∈ Finite_Set.new[T](functional_insert(set.contains, other))","finite_constraint[T](functional_insert(set.contains, other))","not functional_insert(set.contains, other, item)","other = item","other != item"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.remove(other).contains)","proof":["finite_constraint[T](set.remove(other).contains)"]}
{"goal":"remove_other_still_contains","proof":["Finite_Set.new[T](functional_remove(set.contains, other)) = set.remove(other)","not item ∈ set or functional_remove(set.contains, other, item) or other = item","not finite_constraint[T](functional_remove(set.contains, other)) or item ∈ Finite_Set.new[T](functional_remove(set.contains, other)) = functional_remove(set.contains, other, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, other))","not item ∈ Finite_Set.new[T](functional_remove(set.contains, other))","not finite_constraint[T](functional_remove(set.contains, other)) or not functional_remove(set.contains, other, item) or item ∈ Finite_Set.new[T](functional_remove(set.contains, other))","finite_constraint[T](functional_remove(set.contains, other))","not item ∈ set or functional_remove(set.contains, other, item)","not functional_remove(set.contains, other, item)"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.insert(other).contains)","proof":["finite_constraint[T](set.insert(other).contains)"]}
{"goal":"insert_other_contains_imp_contains","proof":["Finite_Set.new[T](functional_insert(set.contains, other)) = set.insert(other)","not functional_insert(set.contains, other, item) or other = item or item ∈ set","not finite_constraint[T](functional_insert(set.contains, other)) or item ∈ Finite_Set.new[T](functional_insert(set.contains, other)) = functional_insert(set.contains, other, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_insert(set.contains, other))","not item ∈ Finite_Set.new[T](functional_insert(set.contains, other)) or not finite_constraint[T](functional_insert(set.contains, other)) or functional_insert(set.contains, other, item)","finite_constraint[T](functional_insert(set.contains, other))","not functional_insert(set.contains, other, item) or item ∈ set","item ∈ Finite_Set.new[T](functional_insert(set.contains, other))","functional_insert(set.contains, other, item)"]}
{"goal":"finite_constraint[T](set.contains)","proof":["finite_constraint[T](set.contains)"]}
{"goal":"finite_constraint[T](set.remove(other).contains)","proof":["finite_constraint[T](set.remove(other).contains)"]}
{"goal":"remove_other_contains_imp_contains","proof":["Finite_Set.new[T](functional_remove(set.contains, other)) = set.remove(other)","not functional_remove(set.contains, other, item) or other = item or item ∈ set","not finite_constraint[T](functional_remove(set.contains, other)) or item ∈ Finite_Set.new[T](functional_remove(set.contains, other)) = functional_remove(set.contains, other, item)","not finite_constraint[T](set.contains) or finite_constraint[T](functional_remove(set.contains, other))","not item ∈ Finite_Set.new[T](functional_remove(set.contains, other)) or not finite_constraint[T](functional_remove(set.contains, other)) or functional_remove(set.contains, other, item)","finite_constraint[T](functional_remove(set.contains, other))","not functional_remove(set.contains, other, item) or item ∈ set","item ∈ Finite_Set.new[T](functional_remove(set.contains, other))","functional_remove(set.contains, other, item)"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["not item ∈ set.insert(other)","not item ∈ set or item ∈ set.insert(other)"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.insert(other).contains(item)","proof":["not item ∈ set.insert(other) or item ∈ set or other = item"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["item ∈ set.insert(other)"]}
{"goal":"insert_other_contains_iff","proof":[]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["not item ∈ set.remove(other)","not item ∈ set or item ∈ set.remove(other) or other = item"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.remove(other).contains(item)","proof":["not item ∈ set.remove(other) or item ∈ set or other = item"]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["item ∈ set.remove(other)"]}
{"goal":"remove_other_contains_iff","proof":[]}
{"goal":"set.remove(item).insert(item).contains != set.contains","proof":["Finite_Set.new[T](set.contains) = set","Finite_Set.new[T](set.remove(item).insert(item).contains) = set.remove(item).insert(item)"]}
{"goal":"exists(k0: T) { set.remove(item).insert(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { s0 ∈ set.remove(item).insert(item) != s0 ∈ set }","s0 ∈ set.remove(item).insert(item) = s0 ∈ set"]}
{"goal":"set.remove(item).contains(t)","proof":["not t ∈ set or t ∈ set.remove(item) or t = item"]}
{"goal":"false","proof":["not t ∈ set.remove(item) or t ∈ set.remove(item).insert(item)","not t ∈ set.remove(item).insert(item)"]}
{"goal":"false","proof":["not t ∈ set.remove(item).insert(item) or t ∈ set.remove(item) or t = item","not t ∈ set.remove(item) or t ∈ set or t = item","t ∈ set.remove(item).insert(item)","t ∈ set.remove(item)"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":["not t ∈ set.remove(item).insert(item)","not item ∈ set.remove(item).insert(item)","item ∈ set.remove(item).insert(item)"]}
{"goal":"false","proof":[]}
{"goal":"remove_then_insert","proof":[]}
{"goal":"set.insert(item).remove(item).contains != set.contains","proof":["Finite_Set.new[T](set.contains) = set","Finite_Set.new[T](set.insert(item).remove(item).contains) = set.insert(item).remove(item)"]}
{"goal":"exists(k0: T) { set.insert(item).remove(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { s0 ∈ set.insert(item).remove(item) != s0 ∈ set }","s0 ∈ set.insert(item).remove(item) = s0 ∈ set"]}
{"goal":"false","proof":["not t ∈ set.insert(item) or t ∈ set.insert(item).remove(item) or t = item","not t ∈ set or t ∈ set.insert(item)","not t ∈ set.insert(item).remove(item)","t ∈ set.insert(item)"]}
{"goal":"set.insert(item).contains(t)","proof":["not t ∈ set.insert(item).remove(item) or t ∈ set.insert(item) or t = item","t ∈ set.insert(item).remove(item)"]}
{"goal":"false","proof":["not t ∈ set.insert(item) or t ∈ set or t = item"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":[]}
{"goal":"false","proof":["not t ∈ set.insert(item).remove(t)","t ∈ set.insert(item).remove(item)"]}
{"goal":"insert_then_remove","proof":[]}
