{"goal":"one_neq_zero","proof":["Int.pos_suc(Nat.0) = 0","Int.pos_suc(Nat.0) != 0"]}
{"goal":"abs_zero","proof":["0 != 0 or abs(0) = Nat.0"]}
{"goal":"abs_pos_suc","proof":["Int.pos_suc(n) != Int.pos_suc(n) or abs(Int.pos_suc(n)) = n.suc"]}
{"goal":"neg_zero","proof":["0 != 0 or -0 = 0"]}
{"goal":"neg_neg_suc","proof":["Int.neg_suc(n) != Int.neg_suc(n) or -Int.neg_suc(n) = Int.pos_suc(n)"]}
{"goal":"neg_pos_suc","proof":["Int.pos_suc(n) != Int.pos_suc(n) or -Int.pos_suc(n) = Int.neg_suc(n)"]}
{"goal":"from_nat(Nat.1) = Int.pos_suc(Nat.0)","proof":["Int.pos_suc(Nat.1 - Nat.1) = from_nat(Nat.1) or Nat.1 = Nat.0","Nat.1 - Nat.1 = Nat.0","Int.pos_suc(Nat.1 - Nat.1) != from_nat(Nat.1)","Nat.0.suc != Nat.0","Nat.1 = Nat.0"]}
{"goal":"from_nat(Nat.2) = Int.pos_suc(Nat.1)","proof":["Int.pos_suc(Nat.2 - Nat.1) = from_nat(Nat.2) or Nat.2 = Nat.0","Int.pos_suc(Nat.2 - Nat.1) != from_nat(Nat.2)","Nat.2 = Nat.0"]}
{"goal":"from_nat(Nat.3) = Int.pos_suc(Nat.2)","proof":["Int.pos_suc(Nat.3 - Nat.1) = from_nat(Nat.3) or Nat.3 = Nat.0","Int.pos_suc(Nat.3 - Nat.1) != from_nat(Nat.3)","Nat.3 = Nat.0"]}
{"goal":"from_nat(Nat.4) = Int.pos_suc(Nat.3)","proof":["Int.pos_suc(Nat.4 - Nat.1) = from_nat(Nat.4) or Nat.4 = Nat.0","Int.pos_suc(Nat.4 - Nat.1) != from_nat(Nat.4)","Nat.3.suc != Nat.0","Nat.4 = Nat.0"]}
{"goal":"from_nat(Nat.5) = Int.pos_suc(Nat.4)","proof":["Int.pos_suc(Nat.5 - Nat.1) = from_nat(Nat.5) or Nat.5 = Nat.0","Int.pos_suc(Nat.5 - Nat.1) != from_nat(Nat.5)","Nat.4.suc != Nat.0","Nat.5 = Nat.0"]}
{"goal":"from_nat(Nat.6) = Int.pos_suc(Nat.5)","proof":["Int.pos_suc(Nat.6 - Nat.1) = from_nat(Nat.6) or Nat.6 = Nat.0","Int.pos_suc(Nat.6 - Nat.1) != from_nat(Nat.6)","Nat.5.suc != Nat.0","Nat.6 = Nat.0"]}
{"goal":"from_nat(Nat.7) = Int.pos_suc(Nat.6)","proof":["Int.pos_suc(Nat.7 - Nat.1) = from_nat(Nat.7) or Nat.7 = Nat.0","Int.pos_suc(Nat.7 - Nat.1) != from_nat(Nat.7)","Nat.6.suc != Nat.0","Nat.7 = Nat.0"]}
{"goal":"from_nat(Nat.8) = Int.pos_suc(Nat.7)","proof":["Int.pos_suc(Nat.8 - Nat.1) = from_nat(Nat.8) or Nat.8 = Nat.0","Int.pos_suc(Nat.8 - Nat.1) != from_nat(Nat.8)","Nat.7.suc != Nat.0","Nat.8 = Nat.0"]}
{"goal":"from_nat(Nat.9) = Int.pos_suc(Nat.8)","proof":["Int.pos_suc(Nat.9 - Nat.1) = from_nat(Nat.9) or Nat.9 = Nat.0","Int.pos_suc(Nat.9 - Nat.1) != from_nat(Nat.9)","Nat.8.suc != Nat.0","Nat.9 = Nat.0"]}
{"goal":"from_nat(Nat.10) = Int.pos_suc(Nat.9)","proof":["Int.pos_suc(Nat.10 - Nat.1) = from_nat(Nat.10) or Nat.10 = Nat.0","Int.pos_suc(Nat.10 - Nat.1) != from_nat(Nat.10)","Nat.9.suc != Nat.0","Nat.10 = Nat.0"]}
{"goal":"numerals_from_nat","proof":["Nat.1 + Nat.1 - Nat.1 = Nat.1","Nat.2 + Nat.1 - Nat.1 = Nat.2","Nat.3 + Nat.1 - Nat.1 = Nat.3","Nat.4 + Nat.1 - Nat.1 = Nat.4","Nat.5 + Nat.1 - Nat.1 = Nat.5","Nat.6 + Nat.1 - Nat.1 = Nat.6","Nat.7 + Nat.1 - Nat.1 = Nat.7","Nat.8 + Nat.1 - Nat.1 = Nat.8","Nat.9 + Nat.1 - Nat.1 = Nat.9","Nat.2 + Nat.1 = Nat.1 + Nat.2","Nat.3 + Nat.1 = Nat.1 + Nat.3","Nat.4 + Nat.1 = Nat.1 + Nat.4","Nat.5 + Nat.1 = Nat.1 + Nat.5","Nat.6 + Nat.1 = Nat.6.suc","Nat.7 + Nat.1 = Nat.7.suc","Nat.8 + Nat.1 = Nat.8.suc","Nat.9 + Nat.1 = Nat.9.suc","Nat.1 - Nat.1 = Nat.0","from_nat(Nat.1) = Int.pos_suc(Nat.0)","from_nat(Nat.1) = 1","Int.pos_suc(Nat.6.suc - Nat.1) = from_nat(Nat.7)","Int.pos_suc(Nat.7.suc - Nat.1) = from_nat(Nat.8)","Int.pos_suc(Nat.8.suc - Nat.1) = from_nat(Nat.9)","Int.pos_suc(Nat.9.suc - Nat.1) = from_nat(Nat.10)","Int.pos_suc(Nat.1 + Nat.1 - Nat.1) = from_nat(Nat.2)","from_nat(Nat.2) = Int.pos_suc(Nat.1)","from_nat(Nat.2) = 2","Int.pos_suc(Nat.1 + Nat.2 - Nat.1) = from_nat(Nat.3)","Int.pos_suc(Nat.1 + Nat.3 - Nat.1) = from_nat(Nat.4)","Int.pos_suc(Nat.1 + Nat.4 - Nat.1) = from_nat(Nat.5)","Int.pos_suc(Nat.1 + Nat.5 - Nat.1) = from_nat(Nat.6)","Int.pos_suc(Nat.5 + Nat.1 - Nat.1) = from_nat(Nat.6)","from_nat(Nat.6) = Int.pos_suc(Nat.5)","from_nat(Nat.6) = 6","Int.pos_suc(Nat.4 + Nat.1 - Nat.1) = from_nat(Nat.5)","from_nat(Nat.5) = Int.pos_suc(Nat.4)","from_nat(Nat.5) = 5","Int.pos_suc(Nat.3 + Nat.1 - Nat.1) = from_nat(Nat.4)","from_nat(Nat.4) = Int.pos_suc(Nat.3)","from_nat(Nat.4) = 4","Int.pos_suc(Nat.2 + Nat.1 - Nat.1) = from_nat(Nat.3)","from_nat(Nat.3) = Int.pos_suc(Nat.2)","from_nat(Nat.3) = 3","Int.pos_suc(Nat.9 + Nat.1 - Nat.1) = from_nat(Nat.10)","from_nat(Nat.10) = Int.pos_suc(Nat.9)","from_nat(Nat.10) = 10","Int.pos_suc(Nat.8 + Nat.1 - Nat.1) = from_nat(Nat.9)","from_nat(Nat.9) = Int.pos_suc(Nat.8)","from_nat(Nat.9) = 9","Int.pos_suc(Nat.7 + Nat.1 - Nat.1) = from_nat(Nat.8)","from_nat(Nat.8) = Int.pos_suc(Nat.7)","from_nat(Nat.8) = 8","Int.pos_suc(Nat.6 + Nat.1 - Nat.1) = from_nat(Nat.7)","from_nat(Nat.7) = Int.pos_suc(Nat.6)","from_nat(Nat.7) != 7","from_nat(Nat.7) = 7"]}
{"goal":"from_nat(n) = 0","proof":["from_nat(Nat.0) != 0","Nat.0 != Nat.0 or from_nat(Nat.0) = 0"]}
{"goal":"-from_nat(n) = 0","proof":["-0 != 0"]}
{"goal":"from_nat(n) = Int.pos_suc(n - Nat.1)","proof":["Int.pos_suc(n - Nat.1) = from_nat(n) or Nat.0 = n"]}
{"goal":"-from_nat(n) = Int.neg_suc(n - Nat.1)","proof":["Int.pos_suc(n - Nat.1) != from_nat(n) or Int.neg_suc(n - Nat.1) = -from_nat(n)"]}
{"goal":"neg_from_nat","proof":["Nat.0 != n","Int.neg_suc(n - Nat.1) != -from_nat(n)"]}
{"goal":"abs(from_nat(n)) = n","proof":["abs(from_nat(n)) != Nat.0","Nat.0 != n or from_nat(n) = 0","from_nat(n) != 0 or abs(from_nat(n)) = Nat.0","from_nat(n) = 0","from_nat(n) != 0"]}
{"goal":"exists(k0: Nat) { from_nat(n) = Int.pos_suc(k0) }","proof":["Int.pos_suc(n - Nat.1) != from_nat(n)","Int.pos_suc(n - Nat.1) = from_nat(n) or Nat.0 = n"]}
{"goal":"from_nat(n) = Int.pos_suc(k)","proof":[]}
{"goal":"abs(from_nat(n)) = k.suc","proof":["from_nat(n) != Int.pos_suc(k) or abs(from_nat(n)) = k.suc"]}
{"goal":"k = n - Nat.1","proof":["Int.pos_suc(n - Nat.1) = from_nat(n) or Nat.0 = n","Int.pos_suc(n - Nat.1) != Int.pos_suc(k) or n - Nat.1 = k","Int.pos_suc(n - Nat.1) != Int.pos_suc(k)","Int.pos_suc(n - Nat.1) = from_nat(n)","Int.pos_suc(n - Nat.1) != from_nat(n)"]}
{"goal":"k.suc = n","proof":["(n - Nat.1).suc != n","not Nat.1 <= n or n - Nat.1 + Nat.1 = n","n >= Nat.1 = Nat.1 <= n","n >= Nat.1 or Nat.0 = n","n - Nat.1 + Nat.1 = (n - Nat.1).suc","n >= Nat.1","Nat.1 <= n","n - Nat.1 + Nat.1 != n","n - Nat.1 + Nat.1 = n"]}
{"goal":"abs(from_nat(n)) = n","proof":["abs(from_nat(n)) != k.suc"]}
{"goal":"abs_from_nat","proof":[]}
{"goal":"abs(-from_nat(n)) = n","proof":["abs(-from_nat(n)) != Nat.0","Nat.0 != n or -from_nat(n) = 0","-from_nat(n) != 0 or abs(-from_nat(n)) = Nat.0","-from_nat(n) = 0","-from_nat(n) != 0"]}
{"goal":"exists(k0: Nat) { from_nat(n) = Int.pos_suc(k0) }","proof":["Int.pos_suc(n - Nat.1) != from_nat(n)","Int.pos_suc(n - Nat.1) = from_nat(n) or Nat.0 = n"]}
{"goal":"-from_nat(n) = Int.neg_suc(k)","proof":["from_nat(n) != Int.pos_suc(k) or -from_nat(n) = Int.neg_suc(k)"]}
{"goal":"abs(-from_nat(n)) = k.suc","proof":["-from_nat(n) != Int.neg_suc(k) or abs(-from_nat(n)) = k.suc"]}
{"goal":"k = n - Nat.1","proof":["Int.pos_suc(n - Nat.1) = from_nat(n) or Nat.0 = n","Int.pos_suc(n - Nat.1) != Int.pos_suc(k) or n - Nat.1 = k","Int.pos_suc(n - Nat.1) != Int.pos_suc(k)","Int.pos_suc(n - Nat.1) = from_nat(n)","Int.pos_suc(n - Nat.1) != from_nat(n)"]}
{"goal":"k.suc = n","proof":["abs(Int.pos_suc(n - Nat.1)) = (n - Nat.1).suc","abs(from_nat(n)) = n"]}
{"goal":"abs(-from_nat(n)) = n","proof":["abs(-from_nat(n)) != k.suc"]}
{"goal":"abs_neg_from_nat","proof":[]}
{"goal":"from_nat_embed","proof":["abs(-from_nat(m)) = m","abs(-from_nat(n)) = n"]}
{"goal":"from_nat_embed_neg_dual","proof":["from_nat(n) != from_nat(m) or n = m"]}
{"goal":"--a = a","proof":["--a != Int.pos_suc(pred)","-a != Int.neg_suc(pred) or --a = Int.pos_suc(pred)","Int.pos_suc(pred) != a or -a = Int.neg_suc(pred)","-a != Int.neg_suc(pred)","-a = Int.neg_suc(pred)"]}
{"goal":"--a = a","proof":["--a != 0","-a != 0 or --a = 0","0 != a or -a = 0","-a = 0","-a != 0"]}
{"goal":"--a = a","proof":["--a != Int.neg_suc(pred)","Int.neg_suc(pred) != a or -a = Int.pos_suc(pred)","-a != Int.pos_suc(pred) or --a = Int.neg_suc(pred)","-a = Int.pos_suc(pred)","-a != Int.pos_suc(pred)"]}
{"goal":"neg_neg","proof":[]}
{"goal":"-a != a","proof":["-Int.pos_suc(n) = a","-Int.pos_suc(n) = Int.neg_suc(n)","Int.neg_suc(n) = a","Int.neg_suc(n) != Int.pos_suc(n)"]}
{"goal":"false","proof":[]}
{"goal":"a = 0","proof":[]}
{"goal":"-a != a","proof":["-Int.neg_suc(n) = a","-Int.neg_suc(n) = Int.pos_suc(n)","Int.pos_suc(n) = a","Int.neg_suc(n) != Int.pos_suc(n)"]}
{"goal":"false","proof":[]}
{"goal":"fix_neg","proof":[]}
{"goal":"abs(-a) = abs(a)","proof":["Int.pos_suc(pred) != a or -a = Int.neg_suc(pred)","-a != Int.neg_suc(pred) or abs(-a) = pred.suc","abs(-a) != abs(Int.pos_suc(pred))","abs(Int.pos_suc(pred)) = pred.suc","abs(-a) != pred.suc","-a = Int.neg_suc(pred)","-a != Int.neg_suc(pred)"]}
{"goal":"abs(-a) = abs(a)","proof":["-a != a","-a != 0","-0 != 0"]}
{"goal":"abs(-a) = abs(a)","proof":["Int.neg_suc(pred) != a or abs(a) = pred.suc","abs(-Int.neg_suc(pred)) != abs(a)","-Int.neg_suc(pred) = Int.pos_suc(pred)","abs(Int.pos_suc(pred)) = pred.suc","abs(Int.pos_suc(pred)) != abs(a)","abs(a) = pred.suc","abs(a) != pred.suc"]}
{"goal":"abs_neg","proof":[]}
{"goal":"abs(a) = pred.suc","proof":["Int.pos_suc(pred) != a or abs(a) = pred.suc"]}
{"goal":"from_nat(pred.suc) = Int.pos_suc(pred.suc - Nat.1)","proof":["Int.pos_suc(pred.suc - Nat.1) = from_nat(pred.suc) or pred.suc = Nat.0","pred.suc = Nat.0","pred.suc != Nat.0"]}
{"goal":"from_nat(pred.suc) = Int.pos_suc(pred)","proof":["pred + Nat.1 != pred.suc or pred.suc - Nat.1 = pred","pred + Nat.1 = pred.suc","Int.pos_suc(pred.suc - Nat.1) != Int.pos_suc(pred)","pred.suc - Nat.1 != pred"]}
{"goal":"a = from_nat(abs(a))","proof":[]}
{"goal":"a = from_nat(abs(a)) or a = -from_nat(abs(a))","proof":["-from_nat(abs(a)) != 0","abs(a) != Nat.0 or -from_nat(abs(a)) = 0","0 != a or abs(a) = Nat.0","abs(a) != Nat.0","abs(a) = Nat.0"]}
{"goal":"abs(a) = pred.suc","proof":["Int.neg_suc(pred) != a or abs(a) = pred.suc"]}
{"goal":"from_nat(pred.suc) = Int.pos_suc(pred.suc - Nat.1)","proof":["Int.pos_suc(pred.suc - Nat.1) = from_nat(pred.suc) or pred.suc = Nat.0","pred.suc = Nat.0","pred.suc != Nat.0"]}
{"goal":"from_nat(pred.suc) = Int.pos_suc(pred)","proof":["pred + Nat.1 != pred.suc or pred.suc - Nat.1 = pred","pred + Nat.1 = pred.suc","Int.pos_suc(pred.suc - Nat.1) != Int.pos_suc(pred)","pred.suc - Nat.1 != pred"]}
{"goal":"a = -from_nat(abs(a))","proof":["-from_nat(pred.suc) != a","from_nat(pred.suc) != Int.pos_suc(pred) or -from_nat(pred.suc) = Int.neg_suc(pred)","-from_nat(pred.suc) != Int.neg_suc(pred)","-from_nat(pred.suc) = Int.neg_suc(pred)"]}
{"goal":"neg_or_pos","proof":[]}
{"goal":"abs(from_nat(p)) = abs(-from_nat(q))","proof":["-from_nat(q) != from_nat(p)"]}
{"goal":"abs(from_nat(p)) = abs(from_nat(q))","proof":["abs(-from_nat(q)) = abs(from_nat(q))"]}
{"goal":"p = q","proof":["abs(--from_nat(q)) = abs(-from_nat(q))","abs(-from_nat(p)) = p","abs(-from_nat(q)) = q"]}
{"goal":"from_nat(p) = -from_nat(p)","proof":["-from_nat(q) != from_nat(p)"]}
{"goal":"from_nat(p) = 0","proof":["-from_nat(p) != from_nat(p) or from_nat(p) = 0"]}
{"goal":"from_eq_neg_from","proof":["abs(-from_nat(q)) = q","abs(from_nat(p)) = q","abs(0) = q","abs(from_nat(p)) = p","abs(0) = p","Nat.0 = q","Nat.0 = p","Nat.0 != p"]}
{"goal":"sub_nat_self","proof":["not m <= n or from_nat(n - m) = sub_nat(n, m)","Nat.0 + m != n or n - m = Nat.0","Nat.0 != Nat.0 or from_nat(Nat.0) = 0","n != m or m <= n","Nat.0 + m = m","m <= n","from_nat(Nat.0) = 0","sub_nat(m, n) != from_nat(Nat.0)","Nat.0 + m = n","sub_nat(n, n) != from_nat(Nat.0)","sub_nat(n, m) != from_nat(Nat.0)","n - m = Nat.0","from_nat(n - m) = sub_nat(n, m)","from_nat(n - m) != sub_nat(n, m)"]}
{"goal":"sub_nat(m, n) = from_nat(m - n)","proof":["not n <= m or from_nat(m - n) = sub_nat(m, n)","not n <= m","not n < m or n <= m"]}
{"goal":"not m <= n","proof":["not m <= n or not n < m or n < n","not n < n or not n < n","not n < m or n < n","n < n"]}
{"goal":"sub_nat(n, m) = -from_nat(m - n)","proof":["-from_nat(m - n) = sub_nat(n, m) or m <= n"]}
{"goal":"sub_nat(m, n) = -sub_nat(n, m)","proof":["--from_nat(m - n) = from_nat(m - n)"]}
{"goal":"sub_nat(n, m) = from_nat(n - m)","proof":["not m <= n or from_nat(n - m) = sub_nat(n, m)","not m <= n","not m < n or m <= n"]}
{"goal":"not n <= m","proof":["not n <= m or not m < n or m < m","not m < m or not m < m","not m < n or m < m","m < m"]}
{"goal":"sub_nat(m, n) = -from_nat(n - m)","proof":["-from_nat(n - m) = sub_nat(m, n) or n <= m"]}
{"goal":"sub_nat(m, n) = -sub_nat(n, m)","proof":["-from_nat(n - m) != sub_nat(m, n)"]}
{"goal":"neg_sub_nat","proof":["n < m or m < n or m = n","m = n","n != n or sub_nat(n, n) = 0","sub_nat(n, n) = 0"]}
{"goal":"Nat.0 <= n","proof":["n - n <= n","n - n = Nat.0","not n - n <= n"]}
{"goal":"from_nat(n - Nat.0) = sub_nat(n, Nat.0)","proof":["not Nat.0 <= n or from_nat(n - Nat.0) = sub_nat(n, Nat.0)"]}
{"goal":"sub_nat_zero_right","proof":["from_nat(n - Nat.0) != from_nat(n)","n - Nat.0 != n","n - Nat.0 = n"]}
{"goal":"sub_nat_zero_left","proof":["-sub_nat(n, Nat.0) = sub_nat(Nat.0, n)","sub_nat(n, Nat.0) = from_nat(n)"]}
{"goal":"q <= p + q","proof":["q + p != q + p or q < q + p or Nat.0 = p","not q < q + p or q <= q + p","p + q = q + p","not q <= q + p","Nat.0 != p or q + p = q","p + q != q or q <= p + q","p + q != q","q + p != q","not q < q + p","q < q + p or Nat.0 = p","Nat.0 != p","Nat.0 = p"]}
{"goal":"sub_nat_cancel_add_pos","proof":["not q <= p + q or from_nat(p + q - q) = sub_nat(p + q, q)","p + q - q = p","from_nat(p + q - q) != sub_nat(p + q, q)"]}
{"goal":"sub_nat_cancel_add_neg","proof":["sub_nat(q + p, p) = from_nat(q)","-sub_nat(p + q, p) = sub_nat(p, p + q)","q + p = p + q","-sub_nat(p + q, p) != -from_nat(q)","sub_nat(p + q, p) != from_nat(q)"]}
{"goal":"exists(k0: Nat) { j + k0 = i }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or Nat.0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or Nat.0 = x5 } }","j + Nat.0 != i","j + s0(j, i) != i","not j < i or j + s0(j, i) = i","not j < i","not j <= i or j < i or j = i","j = i","j + Nat.0 = j"]}
{"goal":"sub_nat(i, j) = from_nat(d)","proof":["sub_nat(d + j, j) = from_nat(d)","d + j = j + d","sub_nat(j + d, j) != from_nat(d)"]}
{"goal":"d = k","proof":["from_nat(d) = from_nat(k)","from_nat(d) != from_nat(k) or d = k"]}
{"goal":"j + k = i","proof":["j + d != i"]}
{"goal":"exists(k0: Nat) { i + k0 = j }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or Nat.0 != s0(x0, x1) } and forall(x2: Nat, x3: Nat) { not x2 < x3 or x2 + s0(x2, x3) = x3 } and forall(x4: Nat, x5: Nat, x6: Nat) { x4 + x5 != x6 or x4 < x6 or Nat.0 = x5 } }","i + s0(i, j) != j","not i < j or i + s0(i, j) = j","not i < j","i < j or j < i or j = i","not j < i or j <= i","j != i or j <= i","j != i","not j < i","j < i"]}
{"goal":"sub_nat(i, j) = -from_nat(d)","proof":["sub_nat(i, i + d) = -from_nat(d)"]}
{"goal":"from_nat(k) = -from_nat(d)","proof":["-from_nat(d) != sub_nat(i, j)"]}
{"goal":"k = Nat.0","proof":["-from_nat(d) != from_nat(k) or k = Nat.0"]}
{"goal":"d = Nat.0","proof":["-from_nat(d) != from_nat(k) or d = Nat.0"]}
{"goal":"i = j","proof":["i + d != i","i + Nat.0 != i","Nat.0 != Nat.0 or i + Nat.0 = i"]}
{"goal":"false","proof":["j != i or j <= i"]}
{"goal":"sub_nat_imp_add","proof":[]}
{"goal":"j + k = i implies sub_nat(i, j) = from_nat(k)","proof":["sub_nat(k + j, j) = from_nat(k)","k + j = j + k","sub_nat(j + k, j) != from_nat(k)"]}
{"goal":"sub_nat_pos_iff_add","proof":["j + k != i","sub_nat(i, j) = from_nat(k)","sub_nat(i, j) != from_nat(k) or j + k = i"]}
{"goal":"sub_nat(i, j) = -from_nat(k) implies sub_nat(j, i) = from_nat(k)","proof":["-sub_nat(Nat.0, k) = sub_nat(k, Nat.0)","-sub_nat(i, j) = sub_nat(j, i)","-from_nat(k) = sub_nat(Nat.0, k)","sub_nat(k, Nat.0) = from_nat(k)"]}
{"goal":"sub_nat(i, j) = -from_nat(k) implies i + k = j","proof":["sub_nat(j, i) != from_nat(k) or i + k = j"]}
{"goal":"sub_nat_neg_imp_add","proof":["i + k = j","-from_nat(k) != sub_nat(i, j)","sub_nat(i, i + k) = -from_nat(k)"]}
{"goal":"exists(k0: Nat) { p + k0 = m }","proof":["p + (m - p) != m","not p <= m or from_nat(m - p) = sub_nat(m, p)","from_nat(m - p) != sub_nat(m, p) or p + (m - p) = m","from_nat(m - p) != sub_nat(m, p)"]}
{"goal":"sub_nat(m, p) = from_nat(d)","proof":["p + d != m or sub_nat(m, p) = from_nat(d)"]}
{"goal":"m + n = p + d + n","proof":["p + d != m"]}
{"goal":"p + q = p + d + n","proof":["m + n != p + q"]}
{"goal":"q = d + n","proof":["p + (d + n) = p + d + n","p + (d + n) != p + q or d + n = q","p + (d + n) != p + q"]}
{"goal":"sub_nat(q, n) = from_nat(d)","proof":["sub_nat(d + n, n) = from_nat(d)"]}
{"goal":"sub_nat(m, p) = sub_nat(q, n)","proof":["sub_nat(m, p) != from_nat(d)"]}
{"goal":"sub_nat(q, n) = from_nat(d)","proof":["sub_nat(q, n) != sub_nat(m, p)"]}
{"goal":"q = d + n","proof":["sub_nat(q, n) != from_nat(d) or n + d = q","n + d = d + n","n + d = q","n + d != q"]}
{"goal":"p + q = p + d + n","proof":["p + (d + n) = p + d + n"]}
{"goal":"p + q = m + n","proof":["p + d + n != p + q"]}
{"goal":"sub_nat_eq_helper","proof":["m + n = p + q","m + n != p + q"]}
{"goal":"sub_nat_eq(m, n, p, q)","proof":["sub_nat(q, n) = sub_nat(m, p) or m + n = p + q or sub_nat_eq(m, n, p, q)","sub_nat(q, n) != sub_nat(m, p) or m + n != p + q or sub_nat_eq(m, n, p, q)","sub_nat(q, n) != sub_nat(m, p) or m + n != p + q","sub_nat(q, n) != sub_nat(m, p)","m + n != p + q","m + n = p + q"]}
{"goal":"m <= p","proof":["p < m or m < p or m = p","not m < p or m <= p","not p < m or p <= m","not m < p","m != p or m <= p","m != p","not p < m","p < m"]}
{"goal":"p + q = m + n = (sub_nat(p, m) = sub_nat(n, q))","proof":["m + n = p + q","m + n != p + q"]}
{"goal":"sub_nat(m, p) = -sub_nat(p, m)","proof":["-sub_nat(p, m) = sub_nat(m, p)"]}
{"goal":"sub_nat(q, n) = -sub_nat(n, q)","proof":["-sub_nat(n, q) = sub_nat(q, n)"]}
{"goal":"p + q = m + n implies sub_nat(m, p) = sub_nat(q, n)","proof":[]}
{"goal":"sub_nat_eq(m, n, p, q)","proof":["sub_nat(q, n) = sub_nat(m, p) or m + n = p + q or sub_nat_eq(m, n, p, q)","sub_nat(q, n) != sub_nat(m, p) or m + n != p + q or sub_nat_eq(m, n, p, q)","-sub_nat(m, p) = sub_nat(p, m)","-sub_nat(q, n) = sub_nat(n, q)","sub_nat(q, n) != sub_nat(m, p) or m + n != p + q","m + n != p + q","sub_nat(n, q) != sub_nat(p, m)","sub_nat(q, n) = sub_nat(m, p)"]}
{"goal":"sub_nat_eq","proof":["sub_nat(q, n) != sub_nat(m, p) or not sub_nat_eq(m, n, p, q) or m + n = p + q","m + n != p + q or not sub_nat_eq(m, n, p, q) or sub_nat(q, n) = sub_nat(m, p)","m + n != p + q or sub_nat(q, n) = sub_nat(m, p)","m + n != p + q","sub_nat(q, n) = sub_nat(m, p)","sub_nat(q, n) != sub_nat(m, p)"]}
{"goal":"sub_nat_cancel_pos","proof":["j != i","sub_nat(j, k) = sub_nat(i, k)","sub_nat(j, k) != sub_nat(i, k) or j + k = k + i","k + j != k + i or j = i","j + k = k + j","k + j != k + i","j + k = k + i"]}
{"goal":"sub_nat_cancel_neg","proof":["j != i","sub_nat(k, j) = sub_nat(k, i)","sub_nat(k, j) != sub_nat(k, i) or j + k = k + i","j + k != k + i or sub_nat(j, k) = sub_nat(i, k)","sub_nat(j, k) != sub_nat(i, k) or j = i","sub_nat(j, k) != sub_nat(i, k)","j + k = k + i"]}
{"goal":"m + (n + k) = n + (m + k)","proof":["m + (n + k) = m + n + k","n + (m + k) = n + m + k","n + (m + k) != m + n + k","n + m = m + n"]}
{"goal":"sub_nat_both_add_cancel_right","proof":["n + (m + k) != m + (n + k) or sub_nat(m + k, n + k) = sub_nat(m, n)"]}
{"goal":"sub_nat_both_add_cancel_left","proof":["sub_nat(m + k, n + k) = sub_nat(m, n)","k + m = m + k","k + n = n + k","sub_nat(k + m, n + k) != sub_nat(m, n)"]}
{"goal":"sub_nat(p + t, q) = sub_nat(r + t, s) implies sub_nat(p, q) = sub_nat(r, s)","proof":["sub_nat(r + t, s) != sub_nat(p + t, q) or q + (r + t) = p + t + s","q + t + r != p + t + s or sub_nat(p + t, q + t) = sub_nat(r, s)","sub_nat(p + t, q + t) = sub_nat(p, q)","q + (t + r) = q + t + r","r + t = t + r","sub_nat(p + t, q + t) != sub_nat(r, s)","q + (r + t) = p + t + s","q + (t + r) = p + t + s","q + t + r = p + t + s"]}
{"goal":"sub_nat_cancel_add_pos_augment","proof":["sub_nat(r, s) = sub_nat(p, q)","sub_nat(r + t, s) != sub_nat(p + t, q)","sub_nat(r, s) != sub_nat(p, q) or r + q = s + p","r + t + q != s + (p + t) or sub_nat(r + t, s) = sub_nat(p + t, q)","q + (r + t) = q + r + t","s + (p + t) = s + p + t","q + (r + t) = r + t + q","r + q = q + r","r + q = s + p","r + t + q != s + (p + t)"]}
{"goal":"sub_nat_cancel_add_neg_augment","proof":["sub_nat(r, s + t) != sub_nat(p, q + t) or p + (s + t) = q + t + r","q + t + r != p + t + s or sub_nat(p + t, q + t) = sub_nat(r, s)","sub_nat(p + t, q + t) = sub_nat(p, q)","p + (t + s) = p + t + s","s + t = t + s","sub_nat(p + t, q + t) != sub_nat(r, s)","p + (s + t) = q + t + r","p + (t + s) = q + t + r","q + t + r = p + t + s"]}
{"goal":"zero_not_neg","proof":["from_nat(abs(0)) != 0 or not 0.is_negative","from_nat(abs(0)) != 0","abs(0) != Nat.0 or from_nat(abs(0)) = 0","abs(0) != Nat.0"]}
{"goal":"zero_not_pos","proof":["(-0).is_negative = 0.is_positive","(-0).is_negative","0.is_negative"]}
{"goal":"(-from_nat(Nat.1)).is_negative","proof":["from_nat(abs(-from_nat(Nat.1))) != -from_nat(Nat.1) or Nat.1 = Nat.0","from_nat(abs(-from_nat(Nat.1))) = -from_nat(Nat.1) or (-from_nat(Nat.1)).is_negative","Nat.0.suc != Nat.0","from_nat(abs(-from_nat(Nat.1))) = -from_nat(Nat.1)","Nat.1 = Nat.0"]}
{"goal":"from_nat(Nat.1) = 1","proof":["Int.pos_suc(Nat.1 - Nat.1) = from_nat(Nat.1) or Nat.1 = Nat.0","Nat.1 - Nat.1 = Nat.0","from_nat(Nat.1) != Int.pos_suc(Nat.0)","Nat.0.suc != Nat.0","Int.pos_suc(Nat.1 - Nat.1) != from_nat(Nat.1)","Nat.1 = Nat.0"]}
{"goal":"(-1).is_negative","proof":["not (-from_nat(Nat.1)).is_negative"]}
{"goal":"one_pos","proof":["(-1).is_negative = 1.is_positive"]}
{"goal":"a.is_negative implies not a.is_positive","proof":["-from_nat(abs(a)) = a or from_nat(abs(a)) = a","from_nat(abs(-a)) != -a or not (-a).is_negative","from_nat(abs(a)) != a or not a.is_negative","(-a).is_negative = a.is_positive","(-a).is_negative","abs(-a) = abs(a)","--from_nat(abs(a)) = from_nat(abs(a))","from_nat(abs(a)) != a","from_nat(abs(-a)) != -a","from_nat(abs(a)) != -a","-from_nat(abs(a)) = a"]}
{"goal":"neg_iff_not_pos","proof":["not a.is_positive or a.is_negative","not a.is_negative or a.is_positive","not a.is_negative","not a.is_positive","from_nat(abs(-a)) = -a or (-a).is_negative","from_nat(abs(a)) = a or a.is_negative","(-a).is_negative = a.is_positive","not (-a).is_negative","abs(-a) = abs(a)","-a != a or 0 = a","from_nat(abs(a)) = a","-a != a","from_nat(abs(-a)) = a","from_nat(abs(-a)) = -a"]}
{"goal":"nonzero_pos_or_neg","proof":["a.is_positive != a.is_negative or 0 = a","a.is_positive != a.is_negative"]}
{"goal":"pos_is_not_neg","proof":["a.is_positive != a.is_negative or 0 = a","not a.is_positive or not a.is_negative or 0 = a","0 = a"]}
{"goal":"from_nat(abs(a)) = -a","proof":["from_nat(abs(-a)) = -a or (-a).is_negative","(-a).is_negative = a.is_positive","abs(-a) = abs(a)","from_nat(abs(-a)) != -a","not (-a).is_negative","(-a).is_negative"]}
{"goal":"non_pos_is_neg_abs","proof":["-from_nat(abs(a)) = a or from_nat(abs(a)) = a","from_nat(abs(a)) = a"]}
{"goal":"non_neg_is_abs","proof":["from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"not a.is_positive","proof":["not a.is_positive or not a.is_negative"]}
{"goal":"a = -from_nat(abs(a))","proof":["-from_nat(abs(a)) = a or a.is_positive"]}
{"goal":"abs(a) != Nat.0","proof":["-sub_nat(Nat.0, Nat.0) = sub_nat(Nat.0, Nat.0)","-from_nat(Nat.0) = sub_nat(Nat.0, Nat.0)","(-a).is_negative = a.is_positive"]}
{"goal":"exists(k0: Nat) { from_nat(abs(a)) = Int.pos_suc(k0) }","proof":["Int.pos_suc(abs(a) - Nat.1) != from_nat(abs(a))","Int.pos_suc(abs(a) - Nat.1) = from_nat(abs(a)) or abs(a) = Nat.0"]}
{"goal":"a = Int.neg_suc(pred)","proof":["from_nat(abs(a)) != Int.pos_suc(pred) or -from_nat(abs(a)) = Int.neg_suc(pred)","-from_nat(abs(a)) != Int.neg_suc(pred)","-from_nat(abs(a)) = Int.neg_suc(pred)"]}
{"goal":"exists(k0: Nat) { a = Int.neg_suc(k0) }","proof":["Int.neg_suc(pred) != a"]}
{"goal":"neg_from_suc","proof":["let s0: Nat satisfy { Int.neg_suc(s0) = a }","Int.neg_suc(s0) != a"]}
{"goal":"exists(k0: Nat) { a = Int.neg_suc(k0) }","proof":["let s0: Nat satisfy { Int.neg_suc(s0) = a }","Int.neg_suc(s0) != a"]}
{"goal":"abs(a) = pred.suc","proof":["Int.neg_suc(pred) != a or abs(a) = pred.suc"]}
{"goal":"from_nat(abs(a)) = Int.pos_suc(pred.suc - Nat.1)","proof":["Int.pos_suc(pred.suc - Nat.1) != from_nat(pred.suc)","Int.pos_suc(pred.suc - Nat.1) = from_nat(pred.suc) or pred.suc = Nat.0","pred.suc = Nat.0","pred.suc != Nat.0"]}
{"goal":"from_nat(abs(a)) = Int.pos_suc(pred)","proof":["pred + Nat.1 != pred.suc or pred.suc - Nat.1 = pred","pred + Nat.1 = pred.suc","Int.pos_suc(pred.suc - Nat.1) != Int.pos_suc(pred)","pred.suc - Nat.1 != pred"]}
{"goal":"a != from_nat(abs(a))","proof":["from_nat(abs(a)) = Int.neg_suc(pred)","Int.neg_suc(pred) = Int.pos_suc(pred)","Int.neg_suc(pred) != Int.pos_suc(pred)"]}
{"goal":"a.is_negative","proof":["from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"neg_from_suc_imp_revert","proof":[]}
{"goal":"sub_nat(abs(a), Nat.0) = a","proof":["from_nat(abs(a)) = a or a.is_negative","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","from_nat(abs(a)) != a","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = a","proof":["not a.is_positive or a.pos_part = abs(a)","not a.is_positive or a.neg_part = Nat.0","a.neg_part = Nat.0","sub_nat(a.pos_part, Nat.0) != a","a.pos_part = abs(a)"]}
{"goal":"sub_nat(Nat.0, abs(a)) = a","proof":["-from_nat(abs(a)) = a or a.is_positive","-from_nat(abs(a)) = sub_nat(Nat.0, abs(a))","-from_nat(abs(a)) = a","-from_nat(abs(a)) != a"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = a","proof":["-sub_nat(a.neg_part, a.pos_part) = sub_nat(a.pos_part, a.neg_part)","-sub_nat(abs(a), Nat.0) = sub_nat(Nat.0, abs(a))","a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)","a.pos_part = Nat.0 or a.is_positive","a.pos_part = Nat.0"]}
{"goal":"sub_nat_parts","proof":[]}
{"goal":"a.neg_part = Nat.0","proof":["not a.is_positive or a.neg_part = Nat.0"]}
{"goal":"not (-a).is_positive","proof":["(-a).is_negative = a.is_positive","not (-a).is_positive or not (-a).is_negative","(-a).is_negative","not (-a).is_negative"]}
{"goal":"(-a).pos_part = Nat.0","proof":["(-a).pos_part = Nat.0 or (-a).is_positive"]}
{"goal":"(-a).pos_part = a.neg_part","proof":["(-a).pos_part != Nat.0"]}
{"goal":"a.neg_part = abs(a)","proof":["a.neg_part = abs(a) or a.is_positive"]}
{"goal":"not (-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"(-a).pos_part = abs(-a)","proof":["not (-a).is_positive or (-a).pos_part = abs(-a)","not (-a).is_positive","(-a).is_positive or (-a).is_negative or -a = 0","-a = 0","a.pos_part = Nat.0 or a.is_positive","--a = a","a.pos_part = Nat.0"]}
{"goal":"(-a).pos_part = abs(a)","proof":["abs(-a) != abs(a)","abs(-a) = abs(a)"]}
{"goal":"(-a).pos_part = a.neg_part","proof":["(-a).pos_part != abs(a)"]}
{"goal":"pos_part_neg","proof":[]}
{"goal":"from_nat(n).pos_part = n","proof":["from_nat(n).pos_part != Nat.0","not from_nat(n).is_positive or from_nat(n).pos_part = abs(from_nat(n))","from_nat(n).pos_part = Nat.0 or from_nat(n).is_positive","abs(from_nat(n)) = n","from_nat(n).pos_part != abs(from_nat(n))","from_nat(n).is_positive","not from_nat(n).is_positive"]}
{"goal":"from_nat(n).pos_part = abs(from_nat(n))","proof":["-from_nat(abs(from_nat(n))) = from_nat(n) or from_nat(n).is_positive","-from_nat(abs(from_nat(n))) != from_nat(n) or Nat.0 = n","not from_nat(n).is_positive or from_nat(n).pos_part = abs(from_nat(n))","not from_nat(n).is_positive","-from_nat(abs(from_nat(n))) != from_nat(n)"]}
{"goal":"from_nat(n).pos_part = n","proof":["abs(from_nat(n)) != n","-from_nat(abs(from_nat(n))) = from_nat(n) or from_nat(abs(from_nat(n))) = from_nat(n)","-from_nat(abs(from_nat(n))) != from_nat(n) or Nat.0 = n","-from_nat(abs(from_nat(n))) != from_nat(n)","from_nat(abs(from_nat(n))) != from_nat(n) or abs(from_nat(n)) = n","from_nat(abs(from_nat(n))) = from_nat(n)","from_nat(abs(from_nat(n))) != from_nat(n)"]}
{"goal":"pos_part_from","proof":[]}
{"goal":"from_nat(n).neg_part = Nat.0","proof":["not from_nat(n).is_positive or from_nat(n).neg_part = Nat.0"]}
{"goal":"from_nat(n).neg_part = abs(from_nat(n))","proof":["from_nat(n).neg_part = abs(from_nat(n)) or from_nat(n).is_positive"]}
{"goal":"from_nat(n).neg_part = Nat.0","proof":["sub_nat(from_nat(n).pos_part, from_nat(n).neg_part) = from_nat(n)","-from_nat(n) = sub_nat(Nat.0, n)","(-from_nat(n)).pos_part = from_nat(n).neg_part","from_nat(n).pos_part = Nat.0 or from_nat(n).is_positive","from_nat(n).pos_part = Nat.0","abs(-from_nat(n)) = abs(from_nat(n))","abs(-from_nat(n)) = n"]}
{"goal":"neg_part_from","proof":[]}
{"goal":"neg_part_neg","proof":["(--a).pos_part = (-a).neg_part","(--a).pos_part != a.pos_part","--a != a","--a = a"]}
{"goal":"0.pos_part = Nat.0","proof":["0.pos_part = Nat.0 or 0.is_positive","0.is_positive"]}
{"goal":"0.neg_part = Nat.0","proof":["from_nat(abs(0)) = 0 or 0.is_negative","from_nat(abs(0)).neg_part = Nat.0","from_nat(abs(0)).neg_part != 0.neg_part","from_nat(abs(0)) != 0","0.is_negative"]}
{"goal":"0.pos_part + a.pos_part = a.pos_part","proof":["Nat.0 + a.pos_part != a.pos_part","-from_nat(a.pos_part) != sub_nat(Nat.0, a.pos_part) or Nat.0 + a.pos_part = a.pos_part","-from_nat(a.pos_part) = sub_nat(Nat.0, a.pos_part)"]}
{"goal":"0.neg_part + a.neg_part = a.neg_part","proof":["Nat.0 + a.neg_part != a.neg_part","-from_nat(a.neg_part) != sub_nat(Nat.0, a.neg_part) or Nat.0 + a.neg_part = a.neg_part","-from_nat(a.neg_part) = sub_nat(Nat.0, a.neg_part)"]}
{"goal":"0 + a = sub_nat(a.pos_part, a.neg_part)","proof":["sub_nat(0.pos_part + a.pos_part, 0.neg_part + a.neg_part) = 0 + a"]}
{"goal":"add_zero_left","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"0.pos_part = Nat.0","proof":["0.pos_part = Nat.0 or 0.is_positive","0.is_positive"]}
{"goal":"0.neg_part = Nat.0","proof":["from_nat(abs(0)) = 0 or 0.is_negative","from_nat(abs(0)).neg_part = Nat.0","from_nat(abs(0)).neg_part != 0.neg_part","from_nat(abs(0)) != 0","0.is_negative"]}
{"goal":"a.pos_part + 0.pos_part = a.pos_part","proof":["-from_nat(a.pos_part) != sub_nat(Nat.0, a.pos_part) or Nat.0 + a.pos_part = a.pos_part","-from_nat(a.pos_part) = sub_nat(Nat.0, a.pos_part)","a.pos_part + 0.pos_part = 0.pos_part + a.pos_part","0.pos_part + a.pos_part != a.pos_part","Nat.0 + a.pos_part != a.pos_part"]}
{"goal":"a.neg_part + 0.neg_part = a.neg_part","proof":["-from_nat(a.neg_part) != sub_nat(Nat.0, a.neg_part) or Nat.0 + a.neg_part = a.neg_part","-from_nat(a.neg_part) = sub_nat(Nat.0, a.neg_part)","a.neg_part + 0.neg_part = 0.neg_part + a.neg_part","0.neg_part + a.neg_part != a.neg_part","Nat.0 + a.neg_part != a.neg_part"]}
{"goal":"a + 0 = sub_nat(a.pos_part, a.neg_part)","proof":["sub_nat(a.pos_part + 0.pos_part, a.neg_part + 0.neg_part) = a + 0"]}
{"goal":"add_zero_right","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"a + b = sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"add_comm","proof":["sub_nat(b.pos_part + a.pos_part, b.neg_part + a.neg_part) = b + a","b.neg_part + a.neg_part = a.neg_part + b.neg_part","b.pos_part + a.pos_part = a.pos_part + b.pos_part"]}
{"goal":"(-a).pos_part + (-b).pos_part = a.neg_part + b.neg_part","proof":["(-b).pos_part + (-a).pos_part = (-a).pos_part + (-b).pos_part","b.neg_part + a.neg_part = a.neg_part + b.neg_part","(-a).pos_part = a.neg_part","(-b).pos_part = b.neg_part"]}
{"goal":"(-a).neg_part + (-b).neg_part = a.pos_part + b.pos_part","proof":["(-b).neg_part + (-a).neg_part = (-a).neg_part + (-b).neg_part","b.pos_part + a.pos_part = a.pos_part + b.pos_part","(-a).neg_part = a.pos_part","(-b).neg_part = b.pos_part"]}
{"goal":"-a + -b = sub_nat((-a).pos_part + (-b).pos_part, (-a).neg_part + (-b).neg_part)","proof":["sub_nat((-a).pos_part + (-b).pos_part, (-a).neg_part + (-b).neg_part) = -a + -b"]}
{"goal":"-a + -b = sub_nat(a.neg_part + b.neg_part, a.pos_part + b.pos_part)","proof":[]}
{"goal":"-a + -b = -sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","proof":["-sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = sub_nat(a.neg_part + b.neg_part, a.pos_part + b.pos_part)"]}
{"goal":"neg_distrib","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"a + -a = sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part)","proof":["sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part) = a + -a"]}
{"goal":"a + -a = sub_nat(a.pos_part + a.neg_part, a.neg_part + a.pos_part)","proof":["-sub_nat(a.neg_part + (-a).neg_part, a.pos_part + (-a).pos_part) = sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part)","-sub_nat(a.neg_part + a.pos_part, a.pos_part + a.neg_part) = sub_nat(a.pos_part + a.neg_part, a.neg_part + a.pos_part)","a.neg_part + (-a).neg_part = (-a).neg_part + a.neg_part","a.neg_part + a.pos_part = a.pos_part + a.neg_part","a.pos_part + (-a).pos_part = (-a).pos_part + a.pos_part","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part"]}
{"goal":"a + -a = 0","proof":["a.pos_part + a.neg_part != a.pos_part + a.neg_part or sub_nat(a.pos_part + a.neg_part, a.pos_part + a.neg_part) = 0","a.neg_part + a.pos_part = a.pos_part + a.neg_part","sub_nat(a.pos_part + a.neg_part, a.pos_part + a.neg_part) = a + -a","sub_nat(a.pos_part + a.neg_part, a.pos_part + a.neg_part) = 0"]}
{"goal":"add_neg","proof":[]}
{"goal":"sub_nat_as_add_int","proof":["sub_nat((-from_nat(b)).pos_part + from_nat(a).pos_part, (-from_nat(b)).neg_part + from_nat(a).neg_part) = -from_nat(b) + from_nat(a)","from_nat(a) + -from_nat(b) = -from_nat(b) + from_nat(a)","(-from_nat(b)).neg_part = from_nat(b).pos_part","(-from_nat(b)).pos_part = from_nat(b).neg_part","from_nat(a).neg_part = Nat.0","from_nat(b).neg_part = Nat.0","from_nat(a).pos_part = a","from_nat(b).pos_part = b","Nat.0 + a = a","b + Nat.0 = b"]}
{"goal":"sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = 0","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"a.pos_part + b.pos_part = a.neg_part + b.neg_part","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) != from_nat(Nat.0) or a.neg_part + b.neg_part + Nat.0 = a.pos_part + b.pos_part","Nat.0 != Nat.0 or from_nat(Nat.0) = 0","a.neg_part + b.neg_part + Nat.0 = a.neg_part + b.neg_part","from_nat(Nat.0) = 0","a.neg_part + b.neg_part + Nat.0 != a.pos_part + b.pos_part","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = from_nat(Nat.0)","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) != from_nat(Nat.0)"]}
{"goal":"a.pos_part + (-b).neg_part = a.neg_part + (-b).pos_part","proof":["(-b).neg_part = b.pos_part","a.neg_part + (-b).pos_part != a.pos_part + b.pos_part","(-b).pos_part = b.neg_part"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = sub_nat((-b).pos_part, (-b).neg_part)","proof":["a.neg_part + (-b).pos_part != a.pos_part + (-b).neg_part or sub_nat((-b).pos_part, (-b).neg_part) = sub_nat(a.pos_part, a.neg_part)"]}
{"goal":"a = -b","proof":["sub_nat((-b).pos_part, (-b).neg_part) = -b","sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = sub_nat((-b).pos_part, (-b).neg_part)","proof":[]}
{"goal":"a.pos_part + (-b).neg_part = a.neg_part + (-b).pos_part","proof":["sub_nat((-b).pos_part, (-b).neg_part) != sub_nat(a.pos_part, a.neg_part) or a.neg_part + (-b).pos_part = a.pos_part + (-b).neg_part"]}
{"goal":"a.pos_part + b.pos_part = a.neg_part + b.neg_part","proof":["b.neg_part + a.neg_part = a.neg_part + b.neg_part","b.pos_part + a.pos_part = a.pos_part + b.pos_part","(-b).neg_part = b.pos_part","(-b).pos_part = b.neg_part"]}
{"goal":"sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = 0","proof":["a.neg_part + b.neg_part != a.pos_part + b.pos_part or sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = 0"]}
{"goal":"a + b = 0","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"add_eq_zero","proof":["-b != a","a + b = 0"]}
{"goal":"sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) = sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part)","proof":["sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) = a + c","sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) = b + c"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = sub_nat(b.pos_part, b.neg_part)","proof":["sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) != sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) or sub_nat(b.pos_part + c.pos_part, b.neg_part) = sub_nat(a.pos_part + c.pos_part, a.neg_part)","sub_nat(b.pos_part + c.pos_part, b.neg_part) != sub_nat(a.pos_part + c.pos_part, a.neg_part) or sub_nat(b.pos_part, b.neg_part) = sub_nat(a.pos_part, a.neg_part)","sub_nat(b.pos_part + c.pos_part, b.neg_part) != sub_nat(a.pos_part + c.pos_part, a.neg_part)"]}
{"goal":"add_right_cancel","proof":["sub_nat(a.pos_part, a.neg_part) = a","sub_nat(b.pos_part, b.neg_part) = b"]}
{"goal":"a + c = b + c","proof":["a + c = c + a","b + c = c + b"]}
{"goal":"add_left_cancel","proof":["b + c != a + c or b = a"]}
{"goal":"sub_nat(p, q) + from_nat(r) = sub_nat(sub_nat(p, q).pos_part + from_nat(r).pos_part, sub_nat(p, q).neg_part + from_nat(r).neg_part)","proof":["sub_nat(sub_nat(p, q).pos_part + from_nat(r).pos_part, sub_nat(p, q).neg_part + from_nat(r).neg_part) = sub_nat(p, q) + from_nat(r)"]}
{"goal":"from_nat(r).pos_part = r","proof":["sub_nat(from_nat(r).pos_part, from_nat(r).neg_part) = from_nat(r)","from_nat(from_nat(r).pos_part) != from_nat(r) or from_nat(r).pos_part = r","from_nat(from_nat(r).pos_part) != from_nat(r)","sub_nat(from_nat(r).pos_part, Nat.0) = from_nat(from_nat(r).pos_part)","from_nat(r).neg_part = Nat.0"]}
{"goal":"from_nat(r).neg_part = Nat.0","proof":["from_nat(from_nat(r).pos_part).neg_part != Nat.0","from_nat(from_nat(r).pos_part).neg_part = Nat.0"]}
{"goal":"sub_nat(p, q) + from_nat(r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","proof":["-sub_nat(sub_nat(p, q).neg_part + from_nat(r).neg_part, sub_nat(p, q).pos_part + from_nat(r).pos_part) = sub_nat(sub_nat(p, q).pos_part + from_nat(r).pos_part, sub_nat(p, q).neg_part + from_nat(r).neg_part)","-sub_nat(sub_nat(p, q).neg_part, sub_nat(p, q).pos_part + r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","sub_nat(p, q).neg_part + from_nat(r).neg_part = from_nat(r).neg_part + sub_nat(p, q).neg_part","Nat.0 + sub_nat(p, q).neg_part = sub_nat(p, q).neg_part"]}
{"goal":"sub_nat(p + r, q) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","proof":["sub_nat(sub_nat(p, q).pos_part, sub_nat(p, q).neg_part) != sub_nat(p, q) or sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part) = sub_nat(p + r, q)","sub_nat(sub_nat(p, q).pos_part, sub_nat(p, q).neg_part) = sub_nat(p, q)"]}
{"goal":"add_sub_nat_left_pos","proof":["sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part) != sub_nat(p, q) + from_nat(r)"]}
{"goal":"sub_nat(p, q) + -from_nat(r) = -(sub_nat(q, p) + from_nat(r))","proof":["-sub_nat(q, p) + -from_nat(r) = -(sub_nat(q, p) + from_nat(r))","-sub_nat(q, p) = sub_nat(p, q)"]}
{"goal":"sub_nat(p, q) + -from_nat(r) = -sub_nat(q + r, p)","proof":["sub_nat(q, p) + from_nat(r) = sub_nat(q + r, p)"]}
{"goal":"-sub_nat(q + r, p) = sub_nat(p, q + r)","proof":["-sub_nat(q + r, p) = sub_nat(p, q + r)"]}
{"goal":"add_sub_nat_left_neg","proof":["sub_nat(p, q) + -from_nat(r) != -sub_nat(q + r, p)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q) + from_nat(abs(a))","proof":["from_nat(abs(a)) != a","from_nat(abs(a)) = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + abs(a), q)","proof":["sub_nat(p, q) + from_nat(abs(a)) = sub_nat(p + abs(a), q)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q)","proof":["not a.is_positive or a.pos_part = abs(a)","a.pos_part = abs(a)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q + a.neg_part)","proof":["-sub_nat(q + a.neg_part, p + a.pos_part) = sub_nat(p + a.pos_part, q + a.neg_part)","-sub_nat(q, p + a.pos_part) = sub_nat(p + a.pos_part, q)","q + a.neg_part = a.neg_part + q","not a.is_positive or a.neg_part = Nat.0","Nat.0 + q = q","a.neg_part = Nat.0"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q) + -from_nat(abs(a))","proof":["-from_nat(abs(a)) != a","-from_nat(abs(a)) = a or a.is_positive"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q + abs(a))","proof":["sub_nat(p, q) + -from_nat(abs(a)) = sub_nat(p, q + abs(a))"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q + a.neg_part)","proof":["a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q + a.neg_part)","proof":["-sub_nat(q + a.neg_part, p + a.pos_part) = sub_nat(p + a.pos_part, q + a.neg_part)","-sub_nat(q + abs(a), p) = sub_nat(p, q + abs(a))","a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)","p + a.pos_part = a.pos_part + p","a.pos_part = Nat.0 or a.is_positive","a.pos_part = Nat.0","Nat.0 + p = p"]}
{"goal":"add_sub_nat_left","proof":[]}
{"goal":"add_sub_nat_right","proof":["sub_nat(p + a.pos_part, q + a.neg_part) = sub_nat(p, q) + a","a + sub_nat(p, q) = sub_nat(p, q) + a","p + a.pos_part = a.pos_part + p","q + a.neg_part = a.neg_part + q"]}
{"goal":"sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part)","proof":["sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) = sub_nat(p, q) + sub_nat(r, s)"]}
{"goal":"r + sub_nat(r, s).neg_part = s + sub_nat(r, s).pos_part","proof":["sub_nat(sub_nat(r, s).pos_part, sub_nat(r, s).neg_part) != sub_nat(r, s) or s + sub_nat(r, s).pos_part = r + sub_nat(r, s).neg_part","sub_nat(sub_nat(r, s).pos_part, sub_nat(r, s).neg_part) = sub_nat(r, s)"]}
{"goal":"p + q + (r + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)","proof":["s + sub_nat(r, s).pos_part != r + sub_nat(r, s).neg_part"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + s + (p + sub_nat(r, s).pos_part)","proof":["p + (q + (r + sub_nat(r, s).neg_part)) = p + q + (r + sub_nat(r, s).neg_part)","p + (sub_nat(r, s).pos_part + (q + s)) = p + sub_nat(r, s).pos_part + (q + s)","p + q + (sub_nat(r, s).neg_part + r) = p + q + sub_nat(r, s).neg_part + r","q + (s + sub_nat(r, s).pos_part) = q + s + sub_nat(r, s).pos_part","sub_nat(r, s).neg_part + (q + p) = sub_nat(r, s).neg_part + q + p","sub_nat(r, s).neg_part + q + (p + r) = sub_nat(r, s).neg_part + q + p + r","q + p = p + q","q + s + (p + sub_nat(r, s).pos_part) = p + sub_nat(r, s).pos_part + (q + s)","q + sub_nat(r, s).neg_part + (p + r) = p + r + (q + sub_nat(r, s).neg_part)","q + sub_nat(r, s).neg_part = sub_nat(r, s).neg_part + q","r + sub_nat(r, s).neg_part = sub_nat(r, s).neg_part + r","sub_nat(r, s).neg_part + (p + q) = p + q + sub_nat(r, s).neg_part","sub_nat(r, s).pos_part + (q + s) = q + s + sub_nat(r, s).pos_part"]}
{"goal":"sub_nat(p + r, q + s) = sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part)","proof":["q + s + (p + sub_nat(r, s).pos_part) != p + r + (q + sub_nat(r, s).neg_part) or sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) = sub_nat(p + r, q + s)"]}
{"goal":"add_sub_nat","proof":["sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) != sub_nat(p, q) + sub_nat(r, s)"]}
{"goal":"lhs = sub_nat(p + r, q + s) + sub_nat(t, u)","proof":["sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + r, q + s)"]}
{"goal":"lhs = sub_nat(p + r + t, q + s + u)","proof":["sub_nat(p + r, q + s) + sub_nat(t, u) = sub_nat(p + r + t, q + s + u)","sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + r, q + s)"]}
{"goal":"add_sub_nat_3_left","proof":["sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u) != sub_nat(p + r, q + s) + sub_nat(t, u)"]}
{"goal":"lhs = sub_nat(p, q) + sub_nat(r + t, s + u)","proof":["sub_nat(r, s) + sub_nat(t, u) = sub_nat(r + t, s + u)"]}
{"goal":"lhs = sub_nat(p + (r + t), q + (s + u))","proof":["sub_nat(p, q) + sub_nat(r + t, s + u) = sub_nat(p + (r + t), q + (s + u))"]}
{"goal":"add_sub_nat_3_right","proof":[]}
{"goal":"lhs = sub_nat(p + r + t, q + s + u)","proof":["sub_nat(p + r, q + s) + sub_nat(t, u) = sub_nat(p + r + t, q + s + u)","sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + r, q + s)"]}
{"goal":"lhs = sub_nat(p + (r + t), q + (s + u))","proof":["let s0: Nat satisfy { true }","sub_nat(p + (r + t) + s0, q + (s + u) + s0) = sub_nat(p + (r + t), q + (s + u))","sub_nat(p + r + t + s0, q + s + u + s0) = sub_nat(p + r + t, q + s + u)","p + (r + t) = p + r + t","q + (s + u) = q + s + u"]}
{"goal":"lhs = sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u))","proof":["sub_nat(p, q) + sub_nat(r + t, s + u) = sub_nat(p + (r + t), q + (s + u))","sub_nat(r, s) + sub_nat(t, u) = sub_nat(r + t, s + u)"]}
{"goal":"add_sub_nat_assoc","proof":["sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u) != lhs"]}
{"goal":"a = sub_nat(a.pos_part, a.neg_part)","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"b = sub_nat(b.pos_part, b.neg_part)","proof":["sub_nat(b.pos_part, b.neg_part) = b"]}
{"goal":"c = sub_nat(c.pos_part, c.neg_part)","proof":["sub_nat(c.pos_part, c.neg_part) = c"]}
{"goal":"add_assoc","proof":["sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part) = sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part) = sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part)","sub_nat((sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part)).pos_part + c.pos_part, (sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part)).neg_part + c.neg_part) = sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)","sub_nat(a.pos_part + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)).pos_part, a.neg_part + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)).neg_part) = sub_nat(a.pos_part, a.neg_part) + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part))","sub_nat((a + b).pos_part + c.pos_part, (a + b).neg_part + c.neg_part) = a + b + c","sub_nat(a.pos_part + (b + c).pos_part, a.neg_part + (b + c).neg_part) = a + (b + c)","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b","sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) = b + c"]}
{"goal":"add_from_nat","proof":["sub_nat(a, Nat.0) + from_nat(b) = sub_nat(a + b, Nat.0)","sub_nat(a + b, Nat.0) = from_nat(a + b)","sub_nat(a, Nat.0) = from_nat(a)","sub_nat(a, Nat.0) + from_nat(b) != from_nat(a + b)"]}
{"goal":"a + b = a","proof":["a + 0 != a","a + 0 = a"]}
{"goal":"(a + b).is_positive","proof":[]}
{"goal":"b.is_positive","proof":["b.is_positive or b.is_negative or 0 = b"]}
{"goal":"a = from_nat(abs(a))","proof":["from_nat(abs(a)) = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"b = from_nat(abs(b))","proof":["from_nat(abs(b)) = b or b.is_negative"]}
{"goal":"a + b = from_nat(abs(a) + abs(b))","proof":["from_nat(abs(a)) + from_nat(abs(b)) = from_nat(abs(a) + abs(b))"]}
{"goal":"abs(a) + abs(b) != Nat.0","proof":["abs(a) + abs(b) != Nat.0 or abs(b) = Nat.0","abs(b) = Nat.0","abs(b) != Nat.0 or from_nat(abs(b)) = 0","from_nat(abs(b)) != 0","from_nat(abs(b)) = 0"]}
{"goal":"(a + b).is_positive","proof":["(a + b).pos_part = Nat.0 or (a + b).is_positive","(a + b).pos_part = Nat.0","from_nat(abs(a) + abs(b)).pos_part = abs(a) + abs(b)"]}
{"goal":"add_pos_nonneg","proof":[]}
{"goal":"(-a).is_positive","proof":["sub_nat((--a).pos_part, (--a).neg_part) = --a","sub_nat(a.pos_part, a.neg_part) = a","(--a).neg_part = (-a).pos_part","(-a).neg_part = a.pos_part","(--a).pos_part = (-a).neg_part","(-a).pos_part = a.neg_part","(--a).is_negative = (-a).is_positive"]}
{"goal":"not (-b).is_negative","proof":["(-b).is_negative = b.is_positive"]}
{"goal":"(-a + -b).is_positive","proof":["not (-a).is_positive or (-a + -b).is_positive or (-b).is_negative"]}
{"goal":"(-(a + b)).is_positive","proof":["-a + -b = -(a + b)"]}
{"goal":"add_neg_nonpos","proof":["a + b + 0 = 0 + (a + b)","(--(a + b)).is_negative = (-(a + b)).is_positive","a + b + 0 = a + b","--(0 + (a + b)) = 0 + (a + b)"]}
{"goal":"a + b = 0","proof":["a + 0 != 0","-a != 0 or 0 + a = 0","a + 0 = 0 + a","0 + a != 0","0 != a or -a = 0","-a != 0","-a = 0"]}
{"goal":"not (a + b).is_negative","proof":["not (a + b).is_positive or not (a + b).is_negative"]}
{"goal":"a.is_positive","proof":["a.is_positive or a.is_negative or 0 = a"]}
{"goal":"(a + b).is_positive","proof":["not a.is_positive or (a + b).is_positive or b.is_negative"]}
{"goal":"not (a + b).is_negative","proof":["not (a + b).is_positive or not (a + b).is_negative"]}
{"goal":"b.is_positive","proof":["b.is_positive or b.is_negative or 0 = b"]}
{"goal":"(a + b).is_positive","proof":["not b.is_positive or (b + a).is_positive or a.is_negative","b + a = a + b","not (b + a).is_positive"]}
{"goal":"not (a + b).is_negative","proof":["b + 0 = 0 + b","b + 0 = b"]}
{"goal":"add_nonneg_nonneg","proof":["a.is_negative"]}
{"goal":"add_nonpos_nonpos","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b","-sub_nat(a.neg_part + b.neg_part, a.pos_part + b.pos_part) = sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","sub_nat((-(a + b)).pos_part, (-(a + b)).neg_part) = -(a + b)","sub_nat((a + b).pos_part, (a + b).neg_part) = a + b","not (a + b).is_positive or (a + b).pos_part = abs(a + b)","-from_nat(a.neg_part + b.neg_part) = sub_nat(Nat.0, a.neg_part + b.neg_part)","(-(a + b)).pos_part = (a + b).neg_part","not (a + b).is_positive or (a + b).neg_part = Nat.0","(a + b).neg_part = Nat.0","a.pos_part = Nat.0 or a.is_positive","b.pos_part = Nat.0 or b.is_positive","sub_nat(Nat.0, Nat.0) = from_nat(Nat.0)","abs(-from_nat(a.neg_part + b.neg_part)) = a.neg_part + b.neg_part","Nat.0 != Nat.0 or from_nat(Nat.0) = 0","Nat.0 + Nat.0 = Nat.0","b.pos_part = Nat.0","a.pos_part = Nat.0","from_nat(Nat.0) = 0","(a + b).pos_part = abs(a + b)"]}
{"goal":"a + (b + c) = a + c + b","proof":["a + (c + b) = a + c + b","c + b = b + c"]}
{"goal":"add_comm_4","proof":["a + (b + c) = a + b + c","a + b + (c + d) = a + b + c + d","a + c + (b + d) = a + c + b + d"]}
{"goal":"a - 0 = a + -0","proof":["a + -0 = a - 0"]}
{"goal":"a - 0 = a + 0","proof":[]}
{"goal":"a - 0 = a","proof":["a + 0 != a","a + 0 = a"]}
{"goal":"sub_zero_right","proof":[]}
{"goal":"0 - a = 0 + -a","proof":["0 + -a = 0 - a"]}
{"goal":"0 - a = -a","proof":["0 + -a = 0 - a","-a + 0 = 0 + -a","0 + -a != -a","-a + 0 = -a"]}
{"goal":"sub_zero_left","proof":[]}
{"goal":"-(b - a) = -(b + -a)","proof":["b + -a != b - a","b + -a = b - a"]}
{"goal":"-(b - a) = -b + --a","proof":["-b + --a = -(b + -a)"]}
{"goal":"-(b - a) = -b + a","proof":["--a = a"]}
{"goal":"-(b - a) = a + -b","proof":["a + -b != -b + a","a + -b = -b + a"]}
{"goal":"sub_anticomm","proof":["a + -b != a - b","a + -b = a - b"]}
{"goal":"neg_sub","proof":["-(a - b) = b - a"]}
{"goal":"sub_self","proof":["a + -a = a - a","a + -a != 0","a + -a = 0"]}
{"goal":"a - b = 0 implies a = b","proof":["a + -b = a - b","a + -b != 0 or --b = a","--b = b","--b != a","a + -b = 0","a + -b != 0"]}
{"goal":"sub_eq_zero","proof":["b = a","a - b != 0","a - a != 0","a + -a = a - a","a + -a = 0"]}
{"goal":"a + (b + -b) = a","proof":["b + -b = 0","a + 0 != a","a + 0 = a"]}
{"goal":"sub_add_left","proof":["a + (b + -b) = a + b + -b","a + b + -b = a + b - b"]}
{"goal":"sub_add_right","proof":["-(a + b - a) = a - (a + b)","b + a - a = b","b + a = a + b","-(a + b - a) != -b","a + b - a != b"]}
{"goal":"a - b + b = a","proof":["a + -b = a - b","a - b + --b = a - b - -b","a + -b - -b = a","--b = b","a - b + --b != a","a - b - -b != a"]}
{"goal":"sub_imp_add","proof":["b + (a + -b) = b + a + -b","a + -b = a - b","b + a + -b = b + a - b","a + b - b = a","b + a = a + b","b + (a - b) != a","b + (a + -b) != a","b + a + -b != a","b + a - b != a"]}
{"goal":"sub_negate_imp_add","proof":["b - a != c or a + c = b","b - a != c","-(0 - c) = c - 0","-(a - b) = b - a","0 - c = -c","c - 0 = c"]}
{"goal":"sub_cancel_right","proof":["b - c != a - c or c + (b - c) = a","b - c != b - c or c + (b - c) = b","c + (b - c) = b","c + (b - c) != a"]}
{"goal":"sub_cancel_left","proof":["-(c - a) != a - b or a + (c - a) = b","c - a != c - a or a + (c - a) = c","-(c - a) = a - c","a + (c - a) = c","a + (c - a) != b","-(c - a) = a - b"]}
{"goal":"b + a + -(a + c) = b - c","proof":["b + (a + -(a + c)) = b + a + -(a + c)","a - (a + c) = -c","a + -(a + c) = a - (a + c)","b + -c = b - c","b + (a + -(a + c)) != b - c","b + (a - (a + c)) != b - c"]}
{"goal":"sub_add_cancel_left","proof":["a + b + -(a + c) = a + b - (a + c)","a + b = b + a"]}
{"goal":"sub_add_cancel_right","proof":["c + a - (c + b) = a - b","b + c = c + b","c + a = a + c","a + c - (c + b) != a - b"]}
{"goal":"(b - a).is_positive","proof":["(b - a).is_positive = a < b"]}
{"goal":"(c - b).is_positive","proof":["(c - b).is_positive = b < c"]}
{"goal":"(c - b + (b - a)).is_positive","proof":["not (c - b).is_positive or (c - b + (b - a)).is_positive or (b - a).is_negative","(b - a).is_negative","not (b - a).is_positive or not (b - a).is_negative"]}
{"goal":"(c - a).is_positive","proof":["c - b + (b + -a) = c - b + b + -a","c - b != c - b or b + (c - b) = c","b + -a = b - a","c - b + b + -a = c - b + b - a","b + (c - b) = c - b + b","b + (c - b) = c","not (b + (c - b) - a).is_positive","(c - b + (b + -a)).is_positive","(c - b + b + -a).is_positive","(c - b + b - a).is_positive"]}
{"goal":"a < c","proof":["(c - a).is_positive = a < c"]}
{"goal":"lt_trans","proof":[]}
{"goal":"int_is_transitive","proof":["let (s0: (Int, Int) -> Bool -> Int, s1: (Int, Int) -> Bool -> Int, s2: (Int, Int) -> Bool -> Int) satisfy { forall(x0: (Int, Int) -> Bool, x1: Int, x2: Int, x3: Int) { not is_transitive[Int](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Int, Int) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Int](x4) } and forall(x5: (Int, Int) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Int](x5) } and forall(x6: (Int, Int) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Int](x6) } }","not s0(Int.lt) < s1(Int.lt) or not s1(Int.lt) < --s2(Int.lt) or s0(Int.lt) < --s2(Int.lt)","not s0(Int.lt) < s2(Int.lt) or is_transitive[Int](Int.lt)","not s0(Int.lt) < s2(Int.lt)","s1(Int.lt) < s2(Int.lt) or is_transitive[Int](Int.lt)","s1(Int.lt) < s2(Int.lt)","s0(Int.lt) < s1(Int.lt) or is_transitive[Int](Int.lt)","s0(Int.lt) < s1(Int.lt)","--s2(Int.lt) = s2(Int.lt)","s1(Int.lt) < --s2(Int.lt)","not s0(Int.lt) < --s2(Int.lt)","not s1(Int.lt) < --s2(Int.lt) or s0(Int.lt) < --s2(Int.lt)"]}
{"goal":"lt_acyclic","proof":["(a - b).is_positive = b < a","(b - a).is_positive = a < b","(b - a).is_positive","-(a - b) = b - a","(-(a - b)).is_negative = (a - b).is_positive","not (b - a).is_positive or not (b - a).is_negative","not (b - a).is_negative"]}
{"goal":"int_is_acyclic","proof":["let (s0: (Int, Int) -> Bool -> Int, s1: (Int, Int) -> Bool -> Int) satisfy { forall(x0: (Int, Int) -> Bool, x1: Int, x2: Int) { not is_acyclic[Int](x0) or not x0(x1, x2) or not x0(x2, x1) } and forall(x3: (Int, Int) -> Bool) { x3(s0(x3), s1(x3)) or is_acyclic[Int](x3) } and forall(x4: (Int, Int) -> Bool) { x4(s1(x4), s0(x4)) or is_acyclic[Int](x4) } }","s1(Int.lt) < s0(Int.lt) or is_acyclic[Int](Int.lt)","s1(Int.lt) < s0(Int.lt)","s0(Int.lt) < s1(Int.lt) or is_acyclic[Int](Int.lt)","s0(Int.lt) < s1(Int.lt)","not s0(Int.lt) < s1(Int.lt) or not s1(Int.lt) < s0(Int.lt)"]}
{"goal":"is_acyclic[Int](Int.lt) and is_transitive[Int](Int.lt)","proof":["not is_transitive[Int](Int.lt)"]}
{"goal":"zero_lt_pos","proof":["(a - 0).is_positive = 0 < a","(a - 0).is_positive != a.is_positive","a - 0 != a","a - 0 = a"]}
{"goal":"neg_lt_zero","proof":["(0 - a).is_positive = a < 0","0 - a = -a","(-(0 - a)).is_negative = (0 - a).is_positive","--a = a"]}
{"goal":"not a.is_negative implies 0 <= a","proof":["not 0 < a or 0 <= a","not 0 < a","a.is_positive or a.is_negative or 0 = a","0 < a = a.is_positive","not a.is_positive","0 = a","0 != a or 0 <= a"]}
{"goal":"zero_lte_nonneg","proof":["a.is_negative","let s0: Int -> Nat satisfy { forall(x0: Int) { not x0.is_negative or Int.neg_suc(s0(x0)) = x0 } }","not 0 <= Int.neg_suc(s0(a)) or 0 < Int.neg_suc(s0(a)) or Int.neg_suc(s0(a)) = 0","not a.is_negative or Int.neg_suc(s0(a)) = a","Int.neg_suc(s0(a)) = a","0 < a = a.is_positive","not a.is_positive or not a.is_negative","not a.is_positive","Int.neg_suc(s0(a)) != 0","not 0 < a","0 <= Int.neg_suc(s0(a)) = a.is_negative","0 <= Int.neg_suc(s0(a))","not 0 < Int.neg_suc(s0(a))","0 < Int.neg_suc(s0(a))"]}
{"goal":"not a.is_positive implies a <= 0","proof":["not a < 0 or a <= 0","not a < 0","a.is_positive or a.is_negative or 0 = a","a < 0 = a.is_negative","not a.is_negative","0 = a","0 != a or a <= 0"]}
{"goal":"nonpos_lt_zero","proof":["a.is_positive","a <= 0","not a <= 0 or a < 0 or 0 = a","a < 0 = a.is_negative","not a.is_positive or not a.is_negative","not a.is_negative","a < 0 or 0 = a","not a < 0","0 = a"]}
{"goal":"zero_lte_from_nat","proof":["not 0 < from_nat(n) or 0 <= from_nat(n)","not 0 < from_nat(n)","0 < from_nat(n) = from_nat(n).is_positive","not from_nat(n).is_positive","from_nat(n) != 0 or 0 <= from_nat(n)","from_nat(n) != 0","from_nat(n).pos_part = Nat.0 or from_nat(n).is_positive","Nat.0 != n or from_nat(n) = 0","from_nat(n).pos_part = n","Nat.0 != n","from_nat(n).pos_part = Nat.0","from_nat(n).pos_part != Nat.0"]}
{"goal":"from_nat_gte_zero","proof":["from_nat(n) >= 0 = 0 <= from_nat(n)","not 0 <= from_nat(n)","0 <= from_nat(n)"]}
{"goal":"b - a = 0 or (b - a).is_positive or (b - a).is_negative","proof":["-(a - b) = b - a","-(a - b) != 0","not (-(a - b)).is_positive","not (-(a - b)).is_negative","(-(a - b)).is_positive or (-(a - b)).is_negative or -(a - b) = 0"]}
{"goal":"int_total","proof":["(a - b).is_positive = b < a","(b - a).is_positive = a < b","not (b - a).is_positive","-(a - b) = b - a","a > b = b < a","b - a != 0 or a = b","b - a != 0","(-(a - b)).is_negative = (a - b).is_positive","(b - a).is_negative"]}
{"goal":"forall(x0: Int, x1: Int) { Partial_Order.lt[Int](x0, x1) or Partial_Order.lt[Int](x1, x0) or x0 = x1 }","proof":["let (s0: Int, s1: Int) satisfy { not s0 < s1 and not s1 < s0 and s1 != s0 }","s0 > s1 or s0 < s1 or s1 = s0","s0 > s1","s0 > s1 = s1 < s0"]}
{"goal":"not a < b","proof":["not b < a or not a < b","not b < a","a > b = b < a"]}
{"goal":"not a = b","proof":["not a < a","a > a","a > a = a < a"]}
{"goal":"not a <= b","proof":["not a <= b or a < b or b = a"]}
{"goal":"a <= b","proof":["a > b or a < b or b = a","not a < b or a <= b","not a < b","b = a","b != a or a <= b"]}
{"goal":"gt_is_not_lte","proof":["a <= b","a > b"]}
{"goal":"lte_zero_abs","proof":["-from_nat(abs(a)) = a or a.is_positive","a <= 0 != a.is_positive","--from_nat(abs(a)) = from_nat(abs(a))","--from_nat(abs(a)) != -a","-from_nat(abs(a)) != a","not a <= 0 or not a.is_positive","a.is_positive","not a.is_positive"]}
{"goal":"gte_zero_abs","proof":["a >= 0 = 0 <= a","0 <= a","from_nat(abs(a)) = a or a.is_negative","a.is_negative","0 <= a != a.is_negative","not 0 <= a or not a.is_negative"]}
{"goal":"from_nat(abs(a) * Nat.0) = 0","proof":["Nat.0 != Nat.0 or abs(a) * Nat.0 = Nat.0","abs(a) * Nat.0 != Nat.0 or from_nat(abs(a) * Nat.0) = 0","abs(a) * Nat.0 != Nat.0"]}
{"goal":"-from_nat(abs(a) * Nat.0) = 0","proof":["-0 != 0"]}
{"goal":"mul_nat_zero_right","proof":["not a < 0 or -from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0)","from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0) or a < 0","from_nat(abs(a) * Nat.0) != a.mul_nat(Nat.0)","-from_nat(abs(a) * Nat.0) != a.mul_nat(Nat.0)","a < 0","not a < 0"]}
{"goal":"from_nat(abs(0) * n) = 0","proof":["abs(0) * n != Nat.0 or from_nat(abs(0) * n) = 0","abs(0) * n != Nat.0","Nat.0 * n = Nat.0"]}
{"goal":"mul_nat_zero_left","proof":["from_nat(abs(0) * n) = 0.mul_nat(n) or 0 < 0","0 < 0 = 0.is_positive","from_nat(abs(0) * n) != 0.mul_nat(n)","not 0 < 0 or 0.is_positive","0 < 0"]}
{"goal":"a.mul_nat(n) = -from_nat(abs(a) * n)","proof":["let s0: Nat satisfy { true }","s0 + abs(-a) * n != s0 + abs(-a) * n or sub_nat(s0 + abs(-a) * n, s0) = from_nat(abs(-a) * n)","s0 + abs(a) != s0 + abs(a) or sub_nat(s0 + abs(a), s0) = from_nat(abs(a))","a.mul_nat(n) + from_nat(abs(a) * n) != 0 or -from_nat(abs(a) * n) = a.mul_nat(n)","n * abs(a) = abs(a) * n","abs(-a) = abs(a)","Nat.0 != Nat.0 or from_nat(Nat.0) = 0","0.mul_nat(n) = 0","0 + from_nat(abs(a) * n) = from_nat(abs(a) * n)","Nat.0 * n = Nat.0","from_nat(Nat.0) = 0","sub_nat(s0 + abs(-a) * n, s0) = from_nat(abs(-a) * n)","sub_nat(s0 + abs(a), s0) = from_nat(abs(a))","a.mul_nat(n) + from_nat(abs(a) * n) != 0"]}
{"goal":"a.mul_nat(n) = -from_nat(abs(a) * n)","proof":["not a < 0 or -from_nat(abs(a) * n) = a.mul_nat(n)","not a < 0","not a <= 0 or a < 0 or 0 = a"]}
{"goal":"mul_nat_nonpos_left","proof":[]}
{"goal":"(-a).mul_nat(n) = -a.mul_nat(n)","proof":["0 - a = -a","0 - a.mul_nat(n) = -a.mul_nat(n)","0.mul_nat(n) = 0","0 - 0 = 0"]}
{"goal":"a.mul_nat(n) = from_nat(abs(a) * n)","proof":["from_nat(abs(a) * n) = a.mul_nat(n) or a < 0","a < 0","not a < 0 or not 0 < a","a > 0 = 0 < a","not 0 < a","0 < a"]}
{"goal":"-a < 0","proof":["a > 0 = 0 < a","0 < a","-a < 0 = (-a).is_negative","not (-a).is_negative","0 < a = a.is_positive","a.is_positive","(-a).is_negative = a.is_positive"]}
{"goal":"(-a).mul_nat(n) = -from_nat(abs(-a) * n)","proof":["not -a < 0 or -from_nat(abs(-a) * n) = (-a).mul_nat(n)"]}
{"goal":"(-a).mul_nat(n) = -from_nat(abs(a) * n)","proof":["abs(-a) = abs(a)"]}
{"goal":"(-a).mul_nat(n) = -a.mul_nat(n)","proof":["-from_nat(abs(a) * n) = a.mul_nat(n) or a.is_positive","from_nat(abs(-a) * (Nat.0 + n)) = (-a).mul_nat(Nat.0 + n) or (-a).is_negative","abs(-a) = abs(a)","--(-a).mul_nat(n) = (-a).mul_nat(n)","Nat.0 + n = n","-from_nat(abs(a) * n) = a.mul_nat(n)","--(-a).mul_nat(n) != -a.mul_nat(n)","-(-a).mul_nat(n) != a.mul_nat(n)","from_nat(abs(-a) * (Nat.0 + n)) = (-a).mul_nat(Nat.0 + n)"]}
{"goal":"a.mul_nat(n) = -from_nat(abs(a) * n)","proof":["not a < 0 or -from_nat(abs(a) * n) = a.mul_nat(n)"]}
{"goal":"-a > 0","proof":["(0 - a).is_positive = a < 0","-a > 0 = 0 < -a","0 < -a = (-a).is_positive","0 - a = -a"]}
{"goal":"(-a).mul_nat(n) = from_nat(abs(-a) * n)","proof":["from_nat(abs(-a) * n) = (-a).mul_nat(n) or -a < 0","-a < 0","not -a < 0 or not 0 < -a","-a > 0 = 0 < -a","not 0 < -a","0 < -a"]}
{"goal":"(-a).mul_nat(n) = from_nat(abs(a) * n)","proof":["abs(-a) = abs(a)"]}
{"goal":"(-a).mul_nat(n) = -a.mul_nat(n)","proof":["--from_nat(abs(a) * n) = from_nat(abs(a) * n)"]}
{"goal":"mul_nat_negate_left","proof":["a > 0 or a < 0 or 0 = a"]}
{"goal":"a.mul_nat(n.suc) = from_nat(abs(a) * n.suc)","proof":["from_nat(abs(a) * n.suc) = a.mul_nat(n.suc) or a < 0","a < 0","not a >= 0 or from_nat(abs(a)) = a","from_nat(abs(a)) != a or not a.is_negative","a < 0 = a.is_negative","a.is_negative","from_nat(abs(a)) = a","from_nat(abs(a)) != a"]}
{"goal":"a.mul_nat(n.suc) = from_nat(abs(a) * n + abs(a))","proof":["abs(a) * n + abs(a) = abs(a) * (n + Nat.1)","abs(a) * (n + Nat.1) = (n + Nat.1) * abs(a)","abs(a) * n.suc = n.suc * abs(a)","n + Nat.1 = Nat.1 + n","sub_nat(abs(a) * n + abs(a), Nat.0) = from_nat(abs(a) * n + abs(a))","sub_nat(abs(a) * n.suc, Nat.0) = from_nat(abs(a) * n.suc)","Nat.1 + n = n.suc"]}
{"goal":"a.mul_nat(n.suc) = from_nat(abs(a) * n) + from_nat(abs(a))","proof":["from_nat(abs(a) * n) + from_nat(abs(a)) = from_nat(abs(a) * n + abs(a))"]}
{"goal":"from_nat(abs(a)) = a","proof":["not a >= 0 or from_nat(abs(a)) = a"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["from_nat(abs(a) * n) = a.mul_nat(n) or a < 0","0 > a != 0 <= a","a >= 0 = 0 <= a","0 <= a","0 > a = a < 0","not 0 > a or not 0 <= a","not 0 > a","from_nat(abs(a) * n) + from_nat(abs(a)) != a.mul_nat(n) + a","not a < 0","from_nat(abs(a) * n) + a != a.mul_nat(n) + a","from_nat(abs(a) * n) != a.mul_nat(n)"]}
{"goal":"mul_nat_nonneg_suc","proof":[]}
{"goal":"-a > 0","proof":["(0 - a).is_positive = a < 0","-a > 0 = 0 < -a","0 < -a = (-a).is_positive","0 - a = -a"]}
{"goal":"a.mul_nat(n.suc) = -(-a).mul_nat(n.suc)","proof":["(-a).mul_nat(n.suc) = -a.mul_nat(n.suc)","--a.mul_nat(n.suc) != a.mul_nat(n.suc)","a.mul_nat(n.suc) + -a.mul_nat(n.suc) != 0 or --a.mul_nat(n.suc) = a.mul_nat(n.suc)","a.mul_nat(n.suc) + -a.mul_nat(n.suc) = 0"]}
{"goal":"a.mul_nat(n.suc) = -((-a).mul_nat(n) + -a)","proof":["not -a >= 0 or (-a).mul_nat(n) + -a = (-a).mul_nat(n.suc)","-a >= 0 = 0 <= -a","-a > 0 = 0 < -a","0 < -a","not 0 < -a or 0 <= -a","not 0 <= -a or -a >= 0","0 <= -a","-((-a).mul_nat(n) + -a) != -(-a).mul_nat(n.suc)","(-a).mul_nat(n) + -a != (-a).mul_nat(n.suc)","-a >= 0","not -a >= 0"]}
{"goal":"a.mul_nat(n.suc) = -(-a.mul_nat(n) + -a)","proof":["(-a).mul_nat(n) = -a.mul_nat(n)"]}
{"goal":"a.mul_nat(n.suc) = --(a.mul_nat(n) + a)","proof":["-a.mul_nat(n) + -a = -(a.mul_nat(n) + a)"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["--(a.mul_nat(n) + a) = a.mul_nat(n) + a"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["not a >= 0 or a.mul_nat(n) + a = a.mul_nat(n.suc)","not a >= 0","from_nat(abs(a)) = a or a.is_negative","a < 0 = a.is_negative","not a.is_negative","from_nat(abs(a)) = a","from_nat(abs(a)) >= 0"]}
{"goal":"mul_nat_suc","proof":[]}
{"goal":"(a + b).mul_nat(Nat.0) = 0","proof":["(a + b).mul_nat(Nat.0) = 0"]}
{"goal":"a.mul_nat(Nat.0) = 0","proof":["a.mul_nat(Nat.0) = 0"]}
{"goal":"b.mul_nat(Nat.0) = 0","proof":["b.mul_nat(Nat.0) = 0"]}
{"goal":"(a + b).mul_nat(Nat.0) = a.mul_nat(Nat.0) + b.mul_nat(Nat.0)","proof":["a.mul_nat(Nat.0) + 0 != (a + b).mul_nat(Nat.0)","a.mul_nat(Nat.0) + 0 != 0","0 + 0 != 0","-0 != 0 or 0 + 0 = 0","-0 != 0"]}
{"goal":"f(Nat.0)","proof":["mul_nat_distrib_right(a, b, Nat.0) = f(Nat.0)","a.mul_nat(Nat.0) + b.mul_nat(Nat.0) != (a + b).mul_nat(Nat.0) or mul_nat_distrib_right(a, b, Nat.0)","not mul_nat_distrib_right(a, b, Nat.0)","mul_nat_distrib_right(a, b, Nat.0)"]}
{"goal":"(a + b).mul_nat(x) = a.mul_nat(x) + b.mul_nat(x)","proof":["mul_nat_distrib_right(a, b, x) = f(x)","not mul_nat_distrib_right(a, b, x) or a.mul_nat(x) + b.mul_nat(x) = (a + b).mul_nat(x)","mul_nat_distrib_right(a, b, x)","not mul_nat_distrib_right(a, b, x)"]}
{"goal":"(a + b).mul_nat(x.suc) = a.mul_nat(x) + a + (b.mul_nat(x) + b)","proof":["a.mul_nat(x) + a + (b.mul_nat(x) + b) = a.mul_nat(x) + b.mul_nat(x) + (a + b)","(a + b).mul_nat(x) + (a + b) = (a + b).mul_nat(x.suc)"]}
{"goal":"(a + b).mul_nat(x.suc) = a.mul_nat(x.suc) + b.mul_nat(x.suc)","proof":["sub_nat((a.mul_nat(x) + a).pos_part + (b.mul_nat(x) + b).pos_part, (a.mul_nat(x) + a).neg_part + (b.mul_nat(x) + b).neg_part) = a.mul_nat(x) + a + (b.mul_nat(x) + b)","sub_nat(a.mul_nat(x.suc).pos_part + b.mul_nat(x.suc).pos_part, a.mul_nat(x.suc).neg_part + b.mul_nat(x.suc).neg_part) = a.mul_nat(x.suc) + b.mul_nat(x.suc)","a.mul_nat(x) + a = a.mul_nat(x.suc)","b.mul_nat(x) + b = b.mul_nat(x.suc)"]}
{"goal":"f(x.suc)","proof":["mul_nat_distrib_right(a, b, x.suc) = f(x.suc)","a.mul_nat(x.suc) + b.mul_nat(x.suc) != (a + b).mul_nat(x.suc) or mul_nat_distrib_right(a, b, x.suc)","not mul_nat_distrib_right(a, b, x.suc)","mul_nat_distrib_right(a, b, x.suc)"]}
{"goal":"mul_nat_distrib_right","proof":["let s0: Nat satisfy { forall(x0: Nat) { not f(Nat.0) or f(s0) or f(x0) } and forall(x1: Nat) { not f(s0.suc) or not f(Nat.0) or f(x1) } }","not f(Nat.0) or f(s0) or f(s0)","f(s0) or f(s0)","not f(s0.suc) or not f(Nat.0) or f(n)","not f(s0.suc) or f(n)","not f(s0) or f(s0.suc)","mul_nat_distrib_right(a, b, n) = f(n)","not mul_nat_distrib_right(a, b, n) or a.mul_nat(n) + b.mul_nat(n) = (a + b).mul_nat(n)","f(s0)","not mul_nat_distrib_right(a, b, n)","not f(n)","f(s0.suc)","not f(s0.suc)"]}
{"goal":"from_nat(a).mul_nat(b) = from_nat(a * b)","proof":["let s0: Nat satisfy { true }","sub_nat(Nat.0 + s0, s0) = from_nat(Nat.0)","sub_nat(b * a + s0, s0) = from_nat(b * a)","b * a = a * b","Nat.0 != a or from_nat(a) = 0","0.mul_nat(b) = 0","Nat.0 * b = Nat.0","from_nat(a) = 0"]}
{"goal":"from_nat(a) > 0","proof":["from_nat(a) > 0 = 0 < from_nat(a)","not 0 < from_nat(a)","0 < from_nat(a) = from_nat(a).is_positive","not from_nat(a).is_positive","from_nat(a).pos_part = Nat.0 or from_nat(a).is_positive","from_nat(a).pos_part = a","from_nat(a).pos_part = Nat.0","from_nat(a).pos_part != Nat.0"]}
{"goal":"abs(from_nat(a)) = a","proof":["abs(-from_nat(a)) = abs(from_nat(a))","abs(-from_nat(a)) != a","abs(-from_nat(a)) = a"]}
{"goal":"from_nat(a).mul_nat(b) = from_nat(abs(from_nat(a)) * b)","proof":["from_nat(abs(from_nat(a)) * b) = from_nat(a).mul_nat(b) or from_nat(a) < 0","from_nat(a) < 0","not from_nat(a) < 0 or not 0 < from_nat(a)","from_nat(a) > 0 = 0 < from_nat(a)","not 0 < from_nat(a)","0 < from_nat(a)"]}
{"goal":"from_nat(a).mul_nat(b) = from_nat(a * b)","proof":["b * a = a * b","b * abs(from_nat(a)) = abs(from_nat(a)) * b","let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(a).suc = a or Nat.0 = a","s0(a).suc = a","sub_nat(a * b, Nat.0) = from_nat(a * b)","sub_nat(abs(from_nat(a)) * b, Nat.0) = from_nat(abs(from_nat(a)) * b)","abs(-from_nat(a)) = abs(from_nat(a))","abs(-from_nat(s0(a).suc)) = s0(a).suc"]}
{"goal":"mul_nat_from_nat_left","proof":[]}
{"goal":"a * 0 = -a.mul_nat(Nat.0)","proof":["-a.mul_nat(abs(0)) = a * 0 or 0 > 0","0 > 0 != 0 <= 0","0 != 0 or 0 <= 0","0 <= 0","-a.mul_nat(abs(0)) != a * 0","not 0 > 0 or not 0 <= 0","0 > 0"]}
{"goal":"a * 0 = -0","proof":["-a.mul_nat(Nat.0) != -0","a.mul_nat(Nat.0) != 0","a.mul_nat(Nat.0) = 0"]}
{"goal":"mul_zero_right","proof":["-0 != 0"]}
{"goal":"a.mul_nat(n) = a * from_nat(n)","proof":["Nat.0 != n or from_nat(n) = 0","a * 0 = 0","a.mul_nat(Nat.0) = 0","a * from_nat(n) != a.mul_nat(Nat.0)","a * from_nat(n) != 0","from_nat(n) = 0"]}
{"goal":"from_nat(n) > 0","proof":["from_nat(n) > 0 = 0 < from_nat(n)","not 0 < from_nat(n)","0 < from_nat(n) = from_nat(n).is_positive","not from_nat(n).is_positive","from_nat(n).pos_part = Nat.0 or from_nat(n).is_positive","from_nat(n).pos_part = n","from_nat(n).pos_part = Nat.0","from_nat(n).pos_part != Nat.0"]}
{"goal":"a * from_nat(n) = a.mul_nat(abs(from_nat(n)))","proof":["not from_nat(n) > 0 or a.mul_nat(abs(from_nat(n))) = a * from_nat(n)"]}
{"goal":"mul_nat_from_nat_right","proof":["abs(-from_nat(n)) = abs(from_nat(n))","abs(-from_nat(n)) = n"]}
{"goal":"a * b = 0","proof":["a * 0 != 0","a * 0 = 0"]}
{"goal":"a.mul_nat(abs(b)) = 0","proof":["a.mul_nat(abs(0)) != 0","a.mul_nat(Nat.0) = 0"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["a.mul_nat(abs(b)) != 0"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["not b > 0 or a.mul_nat(abs(b)) = a * b","not b > 0","b > 0 or b < 0 or 0 = b","b < 0","not 0 <= b or 0 < b or 0 = b","not b < 0 or not 0 < b","b >= 0 = 0 <= b","0 <= b","not 0 < b","0 < b"]}
{"goal":"mul_nonneg_right","proof":[]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["not b >= 0 or a.mul_nat(abs(b)) = a * b"]}
{"goal":"mul_nonneg_nonneg","proof":["from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","not a >= 0 or from_nat(abs(a)) = a","from_nat(abs(a)) = a"]}
{"goal":"a * b = -a.mul_nat(abs(b))","proof":["-a.mul_nat(abs(b)) = a * b or b > 0","b > 0","b > 0 = 0 < b","0 < b","b <= 0 != b.is_positive","0 < b = b.is_positive","b.is_positive","not b <= 0 or not b.is_positive"]}
{"goal":"mul_nonneg_nonpos","proof":["from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","not a >= 0 or from_nat(abs(a)) = a","0 - a.mul_nat(abs(b)) = -a.mul_nat(abs(b))","0 - from_nat(abs(a) * abs(b)) = -from_nat(abs(a) * abs(b))","from_nat(abs(a)) = a"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["not b >= 0 or a.mul_nat(abs(b)) = a * b"]}
{"goal":"mul_nonpos_nonneg","proof":["from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","(-from_nat(abs(a))).mul_nat(abs(b)) = -from_nat(abs(a)).mul_nat(abs(b))","not a <= 0 or from_nat(abs(a)) = -a","--a = a","from_nat(abs(a)) = -a"]}
{"goal":"a * b = -a.mul_nat(abs(b))","proof":["-a.mul_nat(abs(b)) = a * b or b > 0","b > 0","b > 0 = 0 < b","0 < b","b <= 0 != b.is_positive","0 < b = b.is_positive","b.is_positive","not b <= 0 or not b.is_positive"]}
{"goal":"a * b = --from_nat(abs(a) * abs(b))","proof":["from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","(-a).mul_nat(abs(b)) = -a.mul_nat(abs(b))","not a <= 0 or from_nat(abs(a)) = -a","-sub_nat(Nat.0, abs(a) * abs(b)) = sub_nat(abs(a) * abs(b), Nat.0)","-from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","sub_nat(abs(a) * abs(b), Nat.0) = from_nat(abs(a) * abs(b))","from_nat(abs(a)) = -a"]}
{"goal":"mul_nonpos_nonpos","proof":["--from_nat(abs(a) * abs(b)) = from_nat(abs(a) * abs(b))"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not a >= 0 or not b >= 0 or from_nat(abs(a) * abs(b)) = a * b"]}
{"goal":"mul_nonneg_nonneg_nonneg","proof":["from_nat(abs(a) * abs(b)) >= 0"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not a >= 0 or not b <= 0 or -from_nat(abs(a) * abs(b)) = a * b"]}
{"goal":"mul_nonneg_nonpos_nonpos","proof":["let s0: Nat satisfy { true }","s0 + Nat.0 != s0 + Nat.0 or sub_nat(s0 + Nat.0, s0) = from_nat(Nat.0)","s0 + abs(a) * abs(b) != s0 + abs(a) * abs(b) or sub_nat(s0 + abs(a) * abs(b), s0) = from_nat(abs(a) * abs(b))","0 - a * b != 0 or a * b = 0","a * b <= 0 != (a * b).is_positive","a * b != 0 or a * b <= 0","a * b != 0","0 - a * b = -(a * b)","(-(a * b)).pos_part = (a * b).neg_part","not (a * b).is_positive or (a * b).neg_part = Nat.0","Nat.0 != Nat.0 or from_nat(Nat.0) = 0","from_nat(abs(a) * abs(b)).pos_part = abs(a) * abs(b)","--from_nat(abs(a) * abs(b)) = from_nat(abs(a) * abs(b))","from_nat(Nat.0) = 0","a * b <= 0 or (a * b).is_positive","(a * b).is_positive","sub_nat(s0 + Nat.0, s0) = from_nat(Nat.0)","sub_nat(s0 + abs(a) * abs(b), s0) = from_nat(abs(a) * abs(b))","0 - a * b != 0","(a * b).neg_part = Nat.0"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(a) * abs(b)) = a * b"]}
{"goal":"mul_nonpos_nonneg_nonpos","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(b) * abs(a)) = b * a","not b >= 0 or not a <= 0 or b * a <= 0","0 >= a * b = a * b <= 0","0 >= b * a = b * a <= 0","abs(b) * abs(a) = abs(a) * abs(b)","(-(a * b)).pos_part = (a * b).neg_part","from_nat(abs(a) * abs(b)).pos_part = abs(a) * abs(b)","--from_nat(abs(a) * abs(b)) = from_nat(abs(a) * abs(b))","not b >= 0 or b * a <= 0","b * a <= 0","not a <= 0 or -from_nat(abs(b) * abs(a)) = b * a","-from_nat(abs(b) * abs(a)) = b * a"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not a <= 0 or not b <= 0 or from_nat(abs(a) * abs(b)) = a * b"]}
{"goal":"mul_nonpos_nonpos_nonneg","proof":["from_nat(abs(a) * abs(b)) >= 0"]}
{"goal":"mul_zero_left","proof":["-0.mul_nat(abs(a)) = 0 * a or a > 0","not a > 0 or 0.mul_nat(abs(a)) = 0 * a","0.mul_nat(abs(a)) = 0","0.mul_nat(abs(a)) != 0 * a","0 * a != -0","not a > 0","-0.mul_nat(abs(a)) != 0 * a"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not b > 0 or from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","not a < 0 or not 0 < a","a > 0 = 0 < a","0 < a","from_nat(abs(a)) = a or a.is_negative","a < 0 = a.is_negative","from_nat(abs(a)).mul_nat(abs(b)) != a * b","not a < 0","not a.is_negative","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","from_nat(abs(a)) * b != a * b","from_nat(abs(a)) = a","from_nat(abs(a)) != a"]}
{"goal":"b * a = from_nat(abs(b) * abs(a))","proof":["not a > 0 or from_nat(abs(b)).mul_nat(abs(a)) = from_nat(abs(b)) * a","from_nat(abs(b)).mul_nat(abs(a)) = from_nat(abs(b) * abs(a))","not b < 0 or not 0 < b","b > 0 = 0 < b","0 < b","from_nat(abs(b)) = b or b.is_negative","b < 0 = b.is_negative","from_nat(abs(b)).mul_nat(abs(a)) != b * a","not b < 0","not b.is_negative","from_nat(abs(b)).mul_nat(abs(a)) = from_nat(abs(b)) * a","from_nat(abs(b)) * a != b * a","from_nat(abs(b)) = b","from_nat(abs(b)) != b"]}
{"goal":"a * b = b * a","proof":["let s0: Nat satisfy { true }","sub_nat(abs(a) * abs(b) + s0, s0) = from_nat(abs(a) * abs(b))","sub_nat(abs(b) * abs(a) + s0, s0) = from_nat(abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not a >= 0 or not b <= 0 or -from_nat(abs(a) * abs(b)) = a * b","b > 0 != b <= 0","a >= 0 = 0 <= a","a > 0 = 0 < a","0 < a","not 0 < a or 0 <= a","not a >= 0 or not b <= 0","0 <= a","b > 0 or b <= 0","b <= 0","a >= 0","not a >= 0"]}
{"goal":"b * a = -from_nat(abs(b) * abs(a))","proof":["not a >= 0 or not b <= 0 or -from_nat(abs(b) * abs(a)) = b * a","b > 0 != b <= 0","a >= 0 = 0 <= a","a > 0 = 0 < a","0 < a","not 0 < a or 0 <= a","not a >= 0 or not b <= 0","0 <= a","b > 0 or b <= 0","b <= 0","a >= 0","not a >= 0"]}
{"goal":"a * b = b * a","proof":["-from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","-from_nat(abs(b) * abs(a)) = sub_nat(Nat.0, abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(a) * abs(b)) = a * b","a > 0 != a <= 0","b >= 0 = 0 <= b","b > 0 = 0 < b","0 < b","not 0 < b or 0 <= b","not b >= 0 or not a <= 0","0 <= b","a > 0 or a <= 0","a <= 0","b >= 0","not b >= 0"]}
{"goal":"b * a = -from_nat(abs(b) * abs(a))","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(b) * abs(a)) = b * a","a > 0 != a <= 0","b >= 0 = 0 <= b","b > 0 = 0 < b","0 < b","not 0 < b or 0 <= b","not b >= 0 or not a <= 0","0 <= b","a > 0 or a <= 0","a <= 0","b >= 0","not b >= 0"]}
{"goal":"a * b = b * a","proof":["-from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","-from_nat(abs(b) * abs(a)) = sub_nat(Nat.0, abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not a <= 0 or not b <= 0 or from_nat(abs(a) * abs(b)) = a * b","b > 0 != b <= 0","a > 0 = 0 < a","not 0 < a","not b <= 0 or not a <= 0","a <= 0 != a.is_positive","0 < a = a.is_positive","not a.is_positive","a <= 0 or a.is_positive","b > 0 or b <= 0","b <= 0","a <= 0","not a <= 0"]}
{"goal":"b * a = from_nat(abs(b) * abs(a))","proof":["not b <= 0 or not a <= 0 or from_nat(abs(b) * abs(a)) = b * a","b > 0 != b <= 0","a > 0 = 0 < a","not 0 < a","not b <= 0 or not a <= 0","a <= 0 != a.is_positive","0 < a = a.is_positive","not a.is_positive","a <= 0 or a.is_positive","b > 0 or b <= 0","b <= 0","a <= 0","not a <= 0"]}
{"goal":"a * b = b * a","proof":["let s0: Nat satisfy { true }","sub_nat(abs(a) * abs(b) + s0, s0) = from_nat(abs(a) * abs(b))","sub_nat(abs(b) * abs(a) + s0, s0) = from_nat(abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"mul_comm","proof":[]}
{"goal":"1 > 0","proof":["1 > 0 = 0 < 1","not 0 < 1","0 < 1 = 1.is_positive","not 1.is_positive"]}
{"goal":"a * 1 = a.mul_nat(Nat.1)","proof":["a * from_nat(Nat.1) = a.mul_nat(Nat.1)","sub_nat(1.pos_part, 1.neg_part) = 1","not 1.is_positive or 1.pos_part = abs(1)","not 1.is_positive or 1.neg_part = Nat.0","sub_nat(Nat.1, Nat.0) = from_nat(Nat.1)","abs(Int.pos_suc(Nat.0)) = Nat.0.suc","a * from_nat(Nat.1) != a * 1","from_nat(Nat.1) != 1","1.neg_part = Nat.0","1.pos_part = abs(1)"]}
{"goal":"a * 1 = from_nat(abs(a) * Nat.1)","proof":["from_nat(abs(a) * Nat.1) != a.mul_nat(Nat.1)","from_nat(abs(a) * Nat.1) = a.mul_nat(Nat.1) or a < 0","a < 0","not a < 0 or not 0 < a","a > 0 = 0 < a","not 0 < a","0 < a"]}
{"goal":"a * 1 = from_nat(abs(a))","proof":["abs(a) * Nat.1 = Nat.1 * abs(a)","sub_nat(abs(a) * Nat.1, Nat.0) = from_nat(abs(a) * Nat.1)","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","Nat.1 * abs(a) = abs(a)"]}
{"goal":"a * 1 = a","proof":["from_nat(abs(a)) != a","not a >= 0 or from_nat(abs(a)) = a","not a >= 0","a >= 0 = 0 <= a","not 0 <= a","a > 0 = 0 < a","0 < a","not 0 < a or 0 <= a"]}
{"goal":"a * 1 = -from_nat(abs(a) * Nat.1)","proof":["-from_nat(abs(a) * Nat.1) != a.mul_nat(Nat.1)","not a <= 0 or -from_nat(abs(a) * Nat.1) = a.mul_nat(Nat.1)","not a <= 0","not a < 0 or -from_nat(abs(a) * Nat.1) = a.mul_nat(Nat.1)","not a < 0","a > 0 or a < 0 or 0 = a","0 = a","0 != a or a <= 0"]}
{"goal":"from_nat(abs(a)) = -a","proof":["a > 0 = 0 < a","not 0 < a","from_nat(abs(-a)) = -a or (-a).is_negative","0 < a = a.is_positive","not a.is_positive","(-a).is_negative = a.is_positive","abs(-a) = abs(a)","from_nat(abs(-a)) != -a","not (-a).is_negative","(-a).is_negative"]}
{"goal":"a * 1 = a","proof":["-(0 - a) = a - 0","abs(a) * Nat.1 = Nat.1 * abs(a)","0 - -a = --a","0 - a = -a","0 - from_nat(abs(a) * Nat.1) = -from_nat(abs(a) * Nat.1)","sub_nat(abs(a) * Nat.1, Nat.0) = from_nat(abs(a) * Nat.1)","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","a - 0 = a","Nat.1 * abs(a) = abs(a)"]}
{"goal":"mul_one_right","proof":[]}
{"goal":"mul_one_left","proof":["a * 1 = 1 * a","a * 1 != a","a * 1 = a"]}
{"goal":"-a * b = -from_nat(abs(a) * abs(b))","proof":["not b > 0 or (---a).mul_nat(abs(b)) = ---a * b","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","(-from_nat(abs(a))).mul_nat(abs(b)) = -from_nat(abs(a)).mul_nat(abs(b))","a > 0 = 0 < a","0 < a","sub_nat((-a).pos_part, (-a).neg_part) = -a","not a.is_positive or a.pos_part = abs(a)","-from_nat(abs(a)) = sub_nat(Nat.0, abs(a))","0 < a = a.is_positive","a.is_positive","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","not a.is_positive or a.neg_part = Nat.0","---a = -a","a.neg_part = Nat.0","(---a).mul_nat(abs(b)) = ---a * b","a.pos_part = abs(a)"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not b > 0 or from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","not a < 0 or not 0 < a","a > 0 = 0 < a","0 < a","from_nat(abs(a)) = a or a.is_negative","a < 0 = a.is_negative","from_nat(abs(a)).mul_nat(abs(b)) != a * b","not a < 0","not a.is_negative","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","from_nat(abs(a)) * b != a * b","from_nat(abs(a)) = a","from_nat(abs(a)) != a"]}
{"goal":"-a * b = -(a * b)","proof":["not b.is_positive or (---a).mul_nat(abs(b)) = ---a * b","not b.is_positive or (--a).mul_nat(abs(b)) = --a * b","(-a).mul_nat(b.pos_part) = -a.mul_nat(b.pos_part)","not b.is_positive or b.pos_part = abs(b)","---a = -a","--a = a","b.pos_part = abs(b)","(---a).mul_nat(abs(b)) = ---a * b","(--a).mul_nat(abs(b)) = --a * b"]}
{"goal":"-a * b = from_nat(abs(a) * abs(b))","proof":["not -a <= 0 or not b <= 0 or from_nat(abs(-a) * abs(b)) = -a * b","b > 0 != b <= 0","a > 0 = 0 < a","0 < a","not -a < 0 or -a <= 0","-a < 0 = (-a).is_negative","0 < a = a.is_positive","a.is_positive","(-a).is_negative = a.is_positive","abs(-a) = abs(a)","not (-a).is_negative or -a < 0","b > 0 or b <= 0","b <= 0","from_nat(abs(-a) * abs(b)) != -a * b","(-a).is_negative","not -a <= 0","-a < 0","not -a < 0"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not a >= 0 or not b <= 0 or -from_nat(abs(a) * abs(b)) = a * b","b > 0 != b <= 0","a >= 0 = 0 <= a","a > 0 = 0 < a","0 < a","not 0 < a or 0 <= a","not a >= 0 or not b <= 0","0 <= a","b > 0 or b <= 0","b <= 0","a >= 0","not a >= 0"]}
{"goal":"-a * b = -(a * b)","proof":["--from_nat(abs(a) * abs(b)) = from_nat(abs(a) * abs(b))"]}
{"goal":"-a * b = from_nat(abs(a) * abs(b))","proof":["not b > 0 or from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","a > 0 = 0 < a","not 0 < a","sub_nat((-a).pos_part, (-a).neg_part) = -a","a.neg_part = abs(a) or a.is_positive","0 < a = a.is_positive","not a.is_positive","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","a.pos_part = Nat.0 or a.is_positive","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","a.pos_part = Nat.0","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b","a.neg_part = abs(a)"]}
{"goal":"a * b = -from_nat(abs(a) * abs(b))","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(a) * abs(b)) = a * b","a > 0 != a <= 0","b >= 0 = 0 <= b","b > 0 = 0 < b","0 < b","not 0 < b or 0 <= b","not b >= 0 or not a <= 0","0 <= b","a > 0 or a <= 0","a <= 0","b >= 0","not b >= 0"]}
{"goal":"-a * b = -(a * b)","proof":["--from_nat(abs(a) * abs(b)) = from_nat(abs(a) * abs(b))"]}
{"goal":"-a * b = -from_nat(abs(a) * abs(b))","proof":["-from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b or b > 0","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","a > 0 = 0 < a","not 0 < a","sub_nat((-a).pos_part, (-a).neg_part) = -a","a.neg_part = abs(a) or a.is_positive","0 < a = a.is_positive","not a.is_positive","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","a.pos_part = Nat.0 or a.is_positive","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","a.pos_part = Nat.0","a.neg_part = abs(a)","-from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a)) * b"]}
{"goal":"a * b = from_nat(abs(a) * abs(b))","proof":["not a <= 0 or not b <= 0 or from_nat(abs(a) * abs(b)) = a * b","b > 0 != b <= 0","a > 0 = 0 < a","not 0 < a","not b <= 0 or not a <= 0","a <= 0 != a.is_positive","0 < a = a.is_positive","not a.is_positive","a <= 0 or a.is_positive","b > 0 or b <= 0","b <= 0","a <= 0","not a <= 0"]}
{"goal":"-a * b = -(a * b)","proof":["from_nat(abs(a) * abs(b)) = a * b or a.is_positive or b.is_positive","-(-a).mul_nat(abs(b)) = -a * b or b.is_positive","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","sub_nat((-a).pos_part, (-a).neg_part) = -a","a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","a.pos_part = Nat.0 or a.is_positive","a.pos_part = Nat.0","sub_nat(abs(a), Nat.0) = from_nat(abs(a))","-(-a).mul_nat(abs(b)) = -a * b","from_nat(abs(a) * abs(b)) = a * b or b.is_positive","from_nat(abs(a) * abs(b)) = a * b"]}
{"goal":"mul_neg_left","proof":[]}
{"goal":"mul_neg_right","proof":["-b * a = -(b * a)","a * -b = -b * a","b * a = a * b","-b * a != -(a * b)"]}
{"goal":"(a + b) * c = (a + b).mul_nat(abs(c))","proof":["not c >= 0 or (a + b).mul_nat(abs(c)) = (a + b) * c"]}
{"goal":"(a + b) * c = a.mul_nat(abs(c)) + b.mul_nat(abs(c))","proof":["a.mul_nat(abs(c)) + b.mul_nat(abs(c)) = (a + b).mul_nat(abs(c))"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["a * from_nat(abs(c)) = a.mul_nat(abs(c))","b * from_nat(abs(c)) = b.mul_nat(abs(c))","not c >= 0 or from_nat(abs(c)) = c","a * c = c * a","b * c + c * a = c * a + b * c","b.mul_nat(abs(c)) + a.mul_nat(abs(c)) = a.mul_nat(abs(c)) + b.mul_nat(abs(c))","from_nat(abs(c)) = c"]}
{"goal":"mul_distrib_nonneg_right","proof":[]}
{"goal":"-c > 0","proof":["(0 - c).is_positive = c < 0","-c > 0 = 0 < -c","0 < -c = (-c).is_positive","0 - c = -c"]}
{"goal":"(a + b) * -c = a * -c + b * -c","proof":["not -c >= 0 or a * -c + b * -c = (a + b) * -c","not -c >= 0","-c >= 0 = 0 <= -c","not 0 <= -c","-c > 0 = 0 < -c","0 < -c","not 0 < -c or 0 <= -c"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["-(a * c) + -(b * c) = -(a * c + b * c)","(a + b) * -c = -((a + b) * c)","a * -c = -(a * c)","b * -c = -(b * c)","a * c = c * a","--((a + b) * c) = (a + b) * c","--(c * a + b * c) = c * a + b * c"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["not c >= 0 or a * c + b * c = (a + b) * c","not c >= 0","from_nat(abs(c)) = c or c.is_negative","c < 0 = c.is_negative","not c.is_negative","from_nat(abs(c)) = c","from_nat(abs(c)) >= 0"]}
{"goal":"mul_distrib_right","proof":[]}
{"goal":"mul_distrib_left","proof":["b * a + c * a = (b + c) * a","a * (b + c) = (b + c) * a","b * a = a * b","c * a = a * c"]}
{"goal":"(a - b) * c = (a + -b) * c","proof":["a + -b != a - b","a + -b = a - b"]}
{"goal":"mul_sub_distrib_right","proof":["a * c + -b * c = (a + -b) * c","-b * c = -(b * c)","a * c + -(b * c) = a * c - b * c"]}
{"goal":"a * (b - c) = a * (b + -c)","proof":["b + -c != b - c","b + -c = b - c"]}
{"goal":"mul_sub_distrib_left","proof":["b * a - c * a = (b - c) * a","b + -c = b - c","a * (b + -c) = (b + -c) * a","b * a = a * b","c * a = a * c"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["not b > 0 or (--a).mul_nat(abs(b)) = --a * b","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","a > 0 = 0 < a","0 < a","sub_nat((-a).pos_part, (-a).neg_part) = -a","not a.is_positive or a.pos_part = abs(a)","-from_nat(abs(a)) = sub_nat(Nat.0, abs(a))","0 < a = a.is_positive","a.is_positive","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","not a.is_positive or a.neg_part = Nat.0","--a = a","--from_nat(abs(a)) = from_nat(abs(a))","abs(from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","abs(from_nat(abs(a) * abs(b))) != abs(a * b)","a.neg_part = Nat.0","from_nat(abs(a) * abs(b)) != a * b","(--a).mul_nat(abs(b)) = --a * b","a.pos_part = abs(a)"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["-a.mul_nat(abs(b)) = a * b or b > 0","from_nat(abs(a)).mul_nat(abs(b)) = from_nat(abs(a) * abs(b))","a > 0 = 0 < a","0 < a","sub_nat((-a).pos_part, (-a).neg_part) = -a","not a.is_positive or a.pos_part = abs(a)","-from_nat(abs(a)) = sub_nat(Nat.0, abs(a))","0 < a = a.is_positive","a.is_positive","(-a).neg_part = a.pos_part","(-from_nat(abs(a) * abs(b))).neg_part = from_nat(abs(a) * abs(b)).pos_part","(-a).pos_part = a.neg_part","not a.is_positive or a.neg_part = Nat.0","abs(-from_nat((a * b).neg_part)) = (a * b).neg_part","from_nat(abs(a) * abs(b)).pos_part = abs(a) * abs(b)","--a = a","--from_nat(abs(a)) = from_nat(abs(a))","-a.mul_nat(abs(b)) = a * b","a.neg_part = Nat.0","a.pos_part = abs(a)"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["not b >= 0 or not a <= 0 or -from_nat(abs(a) * abs(b)) = a * b","b >= 0 = 0 <= b","a > 0 = 0 < a","b > 0 = 0 < b","not 0 < a","0 < b","not 0 < b or 0 <= b","a <= 0 != a.is_positive","0 < a = a.is_positive","not a.is_positive","abs(-from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","a <= 0 or a.is_positive","a <= 0","0 <= b","abs(-from_nat(abs(a) * abs(b))) != abs(a * b)","-from_nat(abs(a) * abs(b)) != a * b","b >= 0","not b >= 0"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["not a <= 0 or not b <= 0 or from_nat(abs(a) * abs(b)) = a * b","a > 0 = 0 < a","b > 0 = 0 < b","not 0 < b","not 0 < a","a <= 0 != a.is_positive","b <= 0 != b.is_positive","0 < a = a.is_positive","0 < b = b.is_positive","not b.is_positive","not a.is_positive","abs(from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","a <= 0 or a.is_positive","b <= 0 or b.is_positive","b <= 0","a <= 0","abs(from_nat(abs(a) * abs(b))) != abs(a * b)","from_nat(abs(a) * abs(b)) != a * b"]}
{"goal":"abs_mul","proof":[]}
