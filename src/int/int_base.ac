import nat.nat_base
from nat import Nat

/// The `Int` type represents integers.
/// It's defined by its two constructors.
///
/// `pos_suc` takes a natural number to an integer, which seems intuitive.
/// `neg_suc` takes `x` to `-(x+1)`, which is somewhat less intuitive. We do this so
/// that every integer can be represented either as a `pos_suc` or a `neg_suc`.
///
/// ```acorn
/// numerals Int
///
/// 2 = pos_suc(Nat.2)
/// -2 = Int.neg_suc(Nat.1)
/// ```
inductive Int {
    /// `pos_suc` converts a natural number to an integer via the typical embedding.
    pos_suc(Nat)

    0

    /// `Int.neg_suc` converts a natural number `x` into `-(x+1)`.
    /// This isn't particularly intuitive, it's just to give every integer a unique constructor.
    /// In particular, `neg_suc` can construct any negative integer, but not zero.
    neg_suc(Nat)
}


let pos_suc = Int.pos_suc
let neg_suc = Int.neg_suc

attributes Int {
    /// The integer zero.
    /// The integer one.
    let 1: Int = pos_suc(Nat.0)
    /// The integer two.
    let 2: Int = pos_suc(Nat.1)
    /// The integer three.
    let 3: Int = pos_suc(Nat.2)
    /// The integer four.
    let 4: Int = pos_suc(Nat.3)
    /// The integer five.
    let 5: Int = pos_suc(Nat.4)
    /// The integer six.
    let 6: Int = pos_suc(Nat.5)
    /// The integer seven.
    let 7: Int = pos_suc(Nat.6)
    /// The integer eight.
    let 8: Int = pos_suc(Nat.7)
    /// The integer nine.
    let 9: Int = pos_suc(Nat.8)
    /// The integer ten.
    let 10: Int = pos_suc(Nat.9)
}

numerals Int

theorem one_neq_zero { 1 != 0 } 

/// Yields the absolute value of an integer as a natural number.
define abs(a: Int) -> Nat {
    match a {
        pos_suc(n) {
            n.suc
        }

        0 {
            Nat.0
        }

        neg_suc(k) {
            k.suc
        }
    }
}

theorem abs_zero { abs(0) = Nat.0 }

theorem abs_pos_suc(n: Nat) {
    abs(pos_suc(n)) = n.suc
}

attributes Int {
    /// The negation of an integer.
    define neg(self) -> Int {
        match self {
            pos_suc(n) {
                neg_suc(n)
            }

            0 {
                0
            }

            neg_suc(n) {
                pos_suc(n)
            }
        }
    }
}

theorem neg_zero {
    -0 = 0
}

theorem neg_neg_suc(n: Nat) {
    -neg_suc(n) = pos_suc(n)
}

theorem neg_pos_suc(n: Nat) {
    -pos_suc(n) = neg_suc(n)
}

define from_nat(n: Nat) -> Int {
    if n = Nat.0 {
        0
    } else {
        pos_suc(n - Nat.1)
    }
}

theorem numerals_from_nat {
    1 = from_nat(Nat.1) and
    2 = from_nat(Nat.2) and
    3 = from_nat(Nat.3) and
    4 = from_nat(Nat.4) and
    5 = from_nat(Nat.5) and
    6 = from_nat(Nat.6) and
    7 = from_nat(Nat.7) and
    8 = from_nat(Nat.8) and
    9 = from_nat(Nat.9) and
    10 = from_nat(Nat.10)
} by {
    from_nat(Nat.1) = pos_suc(Nat.0)
    from_nat(Nat.2) = pos_suc(Nat.1)
    from_nat(Nat.3) = pos_suc(Nat.2)
    from_nat(Nat.4) = pos_suc(Nat.3)
    from_nat(Nat.5) = pos_suc(Nat.4)
    from_nat(Nat.6) = pos_suc(Nat.5)
    from_nat(Nat.7) = pos_suc(Nat.6)
    from_nat(Nat.8) = pos_suc(Nat.7)
    from_nat(Nat.9) = pos_suc(Nat.8)
    from_nat(Nat.10) = pos_suc(Nat.9)
}

theorem neg_from_nat(n: Nat) {
    if n = Nat.0 {
        -from_nat(n) = 0
    } else {
        -from_nat(n) = neg_suc(n -  Nat.1)
    }
} by {
    if n = Nat.0 {
        from_nat(n) = 0
        -from_nat(n) = 0
    } else {
        from_nat(n) = pos_suc(n - Nat.1)
        -from_nat(n) = neg_suc(n - Nat.1)
    }
}

/// or `back_to_nat` compare to `from_nat`
theorem abs_from_nat(n: Nat) {
    abs(from_nat(n)) = n
} by {
    if n = Nat.0 {
        abs(from_nat(n)) = n
    } else {
        let k: Nat satisfy { 
            from_nat(n) = pos_suc(k)
        }
        from_nat(n) = pos_suc(k)
        abs(from_nat(n)) = k.suc 
        k = n - Nat.1
        k.suc = n
        abs(from_nat(n)) = n
    }
}

theorem abs_neg_from_nat(n: Nat) {
    abs(-from_nat(n)) = n
} by {
    if n = Nat.0 {
        abs(-from_nat(n)) = n
    } else {
        let k: Nat satisfy { 
            from_nat(n) = pos_suc(k)
        }
        -from_nat(n) = neg_suc(k)
        abs(-from_nat(n)) = k.suc 
        k = n - Nat.1
        k.suc = n
        abs(-from_nat(n)) = n
    }
}

theorem from_nat_embed(m: Nat, n: Nat) {
    from_nat(m) = from_nat(n) implies m = n
}

theorem from_nat_embed_neg_dual(m: Nat, n: Nat) {
    m != n implies from_nat(m) != from_nat(n)
}

theorem neg_neg(a: Int) {
    -(-a) = a
} by {
    // helper
    match a {
        pos_suc(pred) {
            -(-a) = a
        }

        0 {
            -(-a) = a
        }

        neg_suc(pred) {
            -(-a) = a
        }
    }
}

theorem fix_neg(a: Int) {
    -a = a implies a = 0
} by {
    // helper
    if -a = a {
        match a {
            pos_suc(n) {
                -a != a
                false
            }

            0 {
                a = 0
            }

            neg_suc(n) {
                -a != a
                false
            }
        }
    }
}

theorem abs_neg(a: Int) {
    abs(-a) = abs(a)
} by {
    match a {
        pos_suc(pred) {
            abs(-a) = abs(a)
        }

        0 {
            abs(-a) = abs(a)
        }

        neg_suc(pred) {
            abs(-a) = abs(a)
        }
    }
}

theorem neg_or_pos(a: Int) {
    a = from_nat(abs(a)) or a = -(from_nat(abs(a)))
} by {
    match a {
        pos_suc(pred) {
            abs(a) = pred.suc
            from_nat(pred.suc) = pos_suc(pred.suc - Nat.1)
            from_nat(pred.suc) = pos_suc(pred)
            a = from_nat(abs(a))
        }

        0 {
            a = from_nat(abs(a)) or a = -(from_nat(abs(a)))
        }

        neg_suc(pred) {
            abs(a) = pred.suc
            from_nat(pred.suc) = pos_suc(pred.suc - Nat.1)
            from_nat(pred.suc) = pos_suc(pred)
            a = -from_nat(abs(a))        
        }
    }
}

theorem from_eq_neg_from(p: Nat, q: Nat) {
    from_nat(p) = -(from_nat(q)) implies p = Nat.0 and q = Nat.0
} by {
    abs(from_nat(p)) = abs(-(from_nat(q)))
    abs(from_nat(p)) = abs(from_nat(q))
    p = q
    from_nat(p) = -(from_nat(p))
    from_nat(p) = 0
}

// Subtraction that goes from naturals into integers.
// We will use this as the primary representation for proving things about integers, so we prove
// as many useful things about sub_nat as we can, before defining more stuff.
// the remaining cases is easy, e.g. if m >= 0 and n <= 0 then m - n = m + (-n)
define sub_nat(m: Nat, n: Nat) -> Int {
    if n <= m {
        from_nat(m - n)
    } else {
        -from_nat(n - m)
    }
}

theorem sub_nat_self(m: Nat, n: Nat) {
    m = n implies sub_nat(m, n) = 0
}

theorem neg_sub_nat(m: Nat, n: Nat) { 
    sub_nat(m, n) = -(sub_nat(n, m)) 
} by {
    if n < m {
        sub_nat(m, n) = from_nat(m - n)
        not (m <= n)
        sub_nat(n, m) = -from_nat(m - n)

        sub_nat(m, n) = -(sub_nat(n, m))
    } 
    if m < n {
        sub_nat(n, m) = from_nat(n - m)
        not (n <= m)
        sub_nat(m, n) = -from_nat(n - m)

        sub_nat(m, n) = -(sub_nat(n, m))
    }
}

theorem sub_nat_zero_right(n: Nat) {
    sub_nat(n, Nat.0) = from_nat(n)
} by {
    Nat.0 <= n
    from_nat(n - Nat.0) = sub_nat(n, Nat.0)
}

theorem sub_nat_zero_left(n: Nat) { 
    sub_nat(Nat.0, n) = -(from_nat(n)) 
} 

theorem sub_nat_cancel_add_pos(p: Nat, q: Nat) {
    sub_nat(p + q, q) = from_nat(p)
} by {
    q <= p + q
}

theorem sub_nat_cancel_add_neg(p: Nat, q: Nat) { 
    sub_nat(p, p + q) = -(from_nat(q)) 
}

/// i - j = k => i = j + k
theorem sub_nat_imp_add(i: Nat, j: Nat, k: Nat) {
    sub_nat(i, j) = from_nat(k) implies j + k = i
} by {
    if j <= i {
        let (d: Nat) satisfy { j + d = i }
        sub_nat(i, j) = from_nat(d)
        d = k
        j + k = i
    } else {
        let (d: Nat) satisfy { i + d = j }
        sub_nat(i, j) = -(from_nat(d))
        from_nat(k) = -(from_nat(d))
        k = Nat.0
        d = Nat.0
        i = j
        false
    }
}

theorem sub_nat_pos_iff_add(i: Nat, j: Nat, k: Nat) {
    sub_nat(i, j) = from_nat(k) iff j + k = i
} by {
    j + k = i implies sub_nat(i, j) = from_nat(k)
}

/// i - j = -k => j = i + k
theorem sub_nat_neg_imp_add(i: Nat, j: Nat, k: Nat) {
    sub_nat(i, j) = -from_nat(k) iff i + k = j
} by {
    sub_nat(i, j) = -from_nat(k) implies sub_nat(j, i) = from_nat(k)

    sub_nat(i, j) = -from_nat(k) implies i + k = j
}

// Half of a "without loss of generality" argument
theorem sub_nat_eq_helper(m: Nat, n: Nat, p: Nat, q: Nat) {
    p <= m implies (
        m + n = p + q iff sub_nat(m, p) = sub_nat(q, n)
    )
} by {
    let (d: Nat) satisfy { p + d = m }
    sub_nat(m, p) = from_nat(d)
    m + n = p + d + n
    if m + n = p + q {
        p + q = p + d + n
        q = d + n
        sub_nat(q, n) = from_nat(d)
        sub_nat(m, p) = sub_nat(q, n)
    }
    if sub_nat(m, p) = sub_nat(q, n) {
        sub_nat(q, n) = from_nat(d)
        q = d + n
        p + q = p + d + n
        p + q = m + n
    }
}

theorem sub_nat_eq(m: Nat, n: Nat, p: Nat, q: Nat) {
    m + n = p + q iff sub_nat(m, p) = sub_nat(q, n)
} by {
    if p <= m {
        sub_nat_eq_helper(m, n, p, q)
        sub_nat_eq(m, n, p, q)
    } else {
        m <= p
        sub_nat_eq_helper(p, q, m, n)

        p + q = m + n iff sub_nat(p, m) = sub_nat(n, q)
        sub_nat(m, p) = -sub_nat(p, m)
        sub_nat(q, n) = -sub_nat(n, q)

        p + q = m + n implies sub_nat(m, p) = sub_nat(q, n)

        sub_nat_eq(m, n, p, q)
    }
}

theorem sub_nat_cancel_pos(i: Nat, j: Nat, k: Nat) { 
    sub_nat(i, k) = sub_nat(j, k) iff i = j 
} 

theorem sub_nat_cancel_neg(i: Nat, j: Nat, k: Nat) {
    sub_nat(k, i) = sub_nat(k, j) iff i = j
} 

theorem sub_nat_both_add_cancel_right(m: Nat, n: Nat, k: Nat) {
    sub_nat(m, n) = sub_nat(m + k, n + k)
} by {
    m + (n + k) = n + (m + k)
}

theorem sub_nat_both_add_cancel_left(m: Nat, n: Nat, k: Nat) {
    sub_nat(m, n) = sub_nat(k + m, k + n)
}

theorem sub_nat_cancel_add_pos_augment(p: Nat, q: Nat, r: Nat, s: Nat, t: Nat) {
    sub_nat(p + t, q) = sub_nat(r + t, s) iff sub_nat(p, q) = sub_nat(r, s)
} by {
    sub_nat(p + t, q) = sub_nat(r + t, s) implies sub_nat(p, q) = sub_nat(r, s)
}

theorem sub_nat_cancel_add_neg_augment(p: Nat, q: Nat, r: Nat, s: Nat, t: Nat) {
    sub_nat(p, q + t) = sub_nat(r, s + t) implies sub_nat(p, q) = sub_nat(r, s)
} 

// Now that we've proven a bunch of stuff about sub_nat, we define the positive and negative parts so that we can
// represent each integer as a sub_nat, and start defining useful functions on integers.

attributes Int {
    /// True if the integer is negative.
    define is_negative(self) -> Bool {
        self != from_nat(abs(self))
    }

    /// True if the integer is positive.
    define is_positive(self) -> Bool {
        (-self).is_negative
    }
}

theorem zero_not_neg { not 0.is_negative }

theorem zero_not_pos { not 0.is_positive }

theorem one_pos { 1.is_positive } by {
    (-from_nat(Nat.1)).is_negative
    from_nat(Nat.1) = 1
    (-1).is_negative
}

theorem neg_iff_not_pos(a: Int) {
    a != 0 implies (a.is_negative iff not a.is_positive)
} by {
    a.is_negative implies not a.is_positive
}

theorem nonzero_pos_or_neg(a: Int) {
    a != 0 implies a.is_positive or a.is_negative
} 

theorem pos_is_not_neg(a: Int) { 
    a.is_positive implies not a.is_negative 
}

theorem non_pos_is_neg_abs(a: Int) { 
    not a.is_positive implies a = -(from_nat(abs(a))) 
} by {
    from_nat(abs(a)) = -a
}

theorem non_neg_is_abs(a: Int) { 
    not a.is_negative implies a = from_nat(abs(a))
} 

theorem neg_from_suc(a: Int) {
    a.is_negative implies exists(n: Nat) { a = neg_suc(n) }
} by {
    not a.is_positive
    a = -(from_nat(abs(a)))
    abs(a) != Nat.0
    let pred: Nat satisfy { 
        from_nat(abs(a)) = pos_suc(pred) 
    }
    a = neg_suc(pred)
    exists(n: Nat) { a = neg_suc(n) }
}

theorem neg_from_suc_imp_revert(a: Int) {
    exists(n: Nat) { a = neg_suc(n) } implies a.is_negative
} by {
    let pred: Nat satisfy { a = neg_suc(pred) }
    abs(a) = pred.suc
    from_nat(abs(a)) = pos_suc(pred.suc - Nat.1)
    from_nat(abs(a)) = pos_suc(pred)
    a != from_nat(abs(a))
    a.is_negative
}

attributes Int {
    /// The positive part of this integer.
    define pos_part(self) -> Nat {
        if self.is_positive {
            abs(self)
        } else {
            Nat.0
        }
    }

    /// The negative part of this integer.
    define neg_part(self) -> Nat {
        if self.is_positive {
            Nat.0
        } else {
            abs(self)
        }
    }
}

theorem sub_nat_parts(a: Int) { 
    sub_nat(a.pos_part, a.neg_part) = a 
} by {
    if a.is_positive {
        sub_nat(abs(a), Nat.0) = a
        sub_nat(a.pos_part, a.neg_part) = a
    } else {
        sub_nat(Nat.0, abs(a)) = a
        sub_nat(a.pos_part, a.neg_part) = a
    }
}

theorem pos_part_neg(a: Int) { 
    (-a).pos_part = a.neg_part 
} by {
    if a.is_positive {
        a.neg_part = Nat.0
        not (-a).is_positive
        (-a).pos_part = Nat.0
        (-a).pos_part = a.neg_part
    } else {
        a.neg_part = abs(a)
        not (-a).is_negative
        (-a).pos_part = abs(-a)
        (-a).pos_part = abs(a)
        (-a).pos_part = a.neg_part
    }
}

theorem pos_part_from(n: Nat) { 
    from_nat(n).pos_part = n 
} by {
    if n = Nat.0 {
        from_nat(n).pos_part = n
    } else {
        from_nat(n).pos_part = abs(from_nat(n))
        from_nat(n).pos_part = n
    }
}

theorem neg_part_from(n: Nat) {
    from_nat(n).neg_part = Nat.0
} by {
    if from_nat(n).is_positive {
        from_nat(n).neg_part = Nat.0
    } else {
        from_nat(n).neg_part = abs(from_nat(n))
        from_nat(n).neg_part = Nat.0
    }
}

theorem neg_part_neg(a: Int) { 
    (-a).neg_part = a.pos_part 
}

// Addition, and theorems about addition
// This method to define add of Int seems more convenient than nested if else in current Acorn?
attributes Int {
    /// The sum of two integers.
    define add(self, other: Int) -> Int {
        sub_nat(
            self.pos_part + other.pos_part, 
            self.neg_part + other.neg_part
        )
    }
}

theorem add_zero_left(a: Int) { 
    (0 + a) = a 
} by {
    0.pos_part = Nat.0
    0.neg_part = Nat.0
    0.pos_part + a.pos_part = a.pos_part
    0.neg_part + a.neg_part = a.neg_part
    (0 + a) = sub_nat(a.pos_part, a.neg_part)
}

theorem add_zero_right(a: Int) { 
    a + 0 = a 
} by {
    0.pos_part = Nat.0
    0.neg_part = Nat.0
    a.pos_part + 0.pos_part = a.pos_part
    a.neg_part + 0.neg_part = a.neg_part
    a + 0 = sub_nat(a.pos_part, a.neg_part)
}

theorem add_comm(a: Int, b: Int) { 
    a + b = b + a 
} by {
    a + b = sub_nat(
        a.pos_part + b.pos_part, 
        a.neg_part + b.neg_part
    )
}

theorem neg_distrib(a: Int, b: Int) { 
    -(a + b) = -a + -b 
} by {
    (-a).pos_part + (-b).pos_part = a.neg_part + b.neg_part
    (-a).neg_part + (-b).neg_part = a.pos_part + b.pos_part
    -a + -b = sub_nat(
        (-a).pos_part + (-b).pos_part,
        (-a).neg_part + (-b).neg_part
    )
    -a + -b = sub_nat(
        a.neg_part + b.neg_part,
        a.pos_part + b.pos_part
    )
    -a + -b = -sub_nat(
        a.pos_part + b.pos_part, 
        a.neg_part + b.neg_part
    )
}

theorem add_neg(a: Int) { 
    a + -a = 0 
} by {
    a + -a = sub_nat(
        a.pos_part + (-a).pos_part, 
        a.neg_part + (-a).neg_part
    )
    a + -a = sub_nat(
        a.pos_part + a.neg_part, 
        a.neg_part + a.pos_part
    )
    a + -a = 0
}

theorem sub_nat_as_add_int(a: Nat, b: Nat) {
    sub_nat(a, b) = from_nat(a) + -from_nat(b)
}

theorem add_eq_zero(a: Int, b: Int) { 
    a + b = 0 iff a = -b 
} by {
    if a + b = 0 {
        sub_nat(
            a.pos_part + b.pos_part, 
            a.neg_part + b.neg_part
        ) = 0

        a.pos_part + b.pos_part = a.neg_part + b.neg_part

        a.pos_part + (-b).neg_part = a.neg_part + (-b).pos_part

        sub_nat(a.pos_part, a.neg_part) = sub_nat((-b).pos_part, (-b).neg_part)
        
        a = -b
    }
    if a = -b {
        // just reverse the order of proof
        sub_nat(a.pos_part, a.neg_part) = sub_nat((-b).pos_part, (-b).neg_part)

        a.pos_part + (-b).neg_part = a.neg_part + (-b).pos_part

        a.pos_part + b.pos_part = a.neg_part + b.neg_part

        sub_nat(
            a.pos_part + b.pos_part, 
            a.neg_part + b.neg_part
        ) = 0

        a + b = 0
    }
}

theorem add_right_cancel(a: Int, b: Int, c: Int) { 
    a + c = b + c implies a = b 
} by {
    sub_nat(
        a.pos_part + c.pos_part, 
        a.neg_part + c.neg_part
    ) = sub_nat(
        b.pos_part + c.pos_part, 
        b.neg_part + c.neg_part
    )

    sub_nat(a.pos_part, a.neg_part) = sub_nat(b.pos_part, b.neg_part)
}

theorem add_left_cancel(a: Int, b: Int, c: Int) { 
    c + a = c + b implies a = b 
} by {
    a + c = b + c
}

theorem add_sub_nat_left_pos(p: Nat, q: Nat, r: Nat) {
    (sub_nat(p, q) + from_nat(r)) = sub_nat(p + r, q)
} by {
    (sub_nat(p, q) + from_nat(r)) = sub_nat(
        sub_nat(p, q).pos_part + from_nat(r).pos_part,
        sub_nat(p, q).neg_part + from_nat(r).neg_part
    )

    from_nat(r).pos_part = r
    from_nat(r).neg_part = Nat.0
    
    (sub_nat(p, q) + from_nat(r)) = sub_nat(
        sub_nat(p, q).pos_part + r,
        sub_nat(p, q).neg_part
    )

    sub_nat(p + r, q) = sub_nat(
        sub_nat(p, q).pos_part + r, 
        sub_nat(p, q).neg_part
    )
}

theorem add_sub_nat_left_neg(p: Nat, q: Nat, r: Nat) {
    (sub_nat(p, q) + -(from_nat(r))) = sub_nat(p, q + r)
} by {
    (sub_nat(p, q) + -(from_nat(r))) = -(sub_nat(q, p) + from_nat(r))

    (sub_nat(p, q) + -(from_nat(r))) = -(sub_nat(q + r, p))

    -(sub_nat(q + r, p)) = sub_nat(p, q + r)
}

theorem add_sub_nat_left(p: Nat, q: Nat, a: Int) {
    (sub_nat(p, q) + a) = sub_nat(
        p + a.pos_part, 
        q + a.neg_part
    )
} by {
    if a.is_positive {
        (sub_nat(p, q) + a) = (sub_nat(p, q) + from_nat(abs(a)))

        (sub_nat(p, q) + a) = sub_nat(p + abs(a), q)

        (sub_nat(p, q) + a) = sub_nat(p + a.pos_part, q)

        (sub_nat(p, q) + a) = sub_nat(p + a.pos_part, q + a.neg_part)
    } else {
        (sub_nat(p, q) + a) = (sub_nat(p, q) + -(from_nat(abs(a))))

        (sub_nat(p, q) + a) = sub_nat(p, q + abs(a))

        (sub_nat(p, q) + a) = sub_nat(p, q + a.neg_part)

        (sub_nat(p, q) + a) = sub_nat(p + a.pos_part, q + a.neg_part)
    }
}

theorem add_sub_nat_right(p: Nat, q: Nat, a: Int) {
    a + sub_nat(p, q) = sub_nat(a.pos_part + p, a.neg_part + q)
}

theorem add_sub_nat(p: Nat, q: Nat, r: Nat, s: Nat) {
    (sub_nat(p, q) + sub_nat(r, s)) = sub_nat(p + r, q + s)
} by {
    (sub_nat(p, q) + sub_nat(r, s)) = sub_nat(
        p + sub_nat(r, s).pos_part,
        q + sub_nat(r, s).neg_part
    )
    // if we want to prove sub(a, b) = sub(c, d), use a + d = b + c, i.e. sub_nat_eq
    // so we need to prove 
    //     (p + sub_nat(r, s).pos_part) + (q + s) = (q + sub_nat(r, s).neg_part) + (p + r)
    // and use 
    //    sub(r, s) = sub(sub_nat(r, s).pos_part, sub_nat(r, s).neg_part)
    // and again use sub_nat_eq
    r + sub_nat(r, s).neg_part = s + sub_nat(r, s).pos_part
    // add two side with p + q, and use comm and assoc of nat
    p + q + (r + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)

    p + r + (q + sub_nat(r, s).neg_part) = q + s + (p + sub_nat(r, s).pos_part)

    sub_nat(p + r, q + s) = sub_nat(
        p + sub_nat(r, s).pos_part,
        q + sub_nat(r, s).neg_part
    )
}

theorem add_sub_nat_3_left(p: Nat, q: Nat, r: Nat, s: Nat, t: Nat, u: Nat) {
    sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u) = sub_nat((p + r) + t, (q + s) + u)
} by {
    let lhs = sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u)
    lhs = sub_nat(p + r, q + s) + sub_nat(t, u)
    lhs = sub_nat((p + r) + t, (q + s) + u)
}

theorem add_sub_nat_3_right(p: Nat, q: Nat, r: Nat, s: Nat, t: Nat, u: Nat) {
    sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u)) = sub_nat(p + (r + t), q + (s + u))
} by {
    let lhs = sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u))
    lhs = (sub_nat(p, q) + sub_nat(r + t, s + u))
    lhs = sub_nat(p + (r + t), q + (s + u))
}

theorem add_sub_nat_assoc(p: Nat, q: Nat, r: Nat, s: Nat, t: Nat, u: Nat) {
    (sub_nat(p, q) + sub_nat(r, s)) + sub_nat(t, u) = sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u))
} by {
    let lhs = sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u)
    lhs = sub_nat((p + r) + t, (q + s) + u)
    lhs = sub_nat(p + (r + t), q + (s + u))
    lhs = sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u))
}

theorem add_assoc(a: Int, b: Int, c: Int) { (a + b) + c = a + (b + c) } by {
    a = sub_nat(a.pos_part, a.neg_part)
    b = sub_nat(b.pos_part, b.neg_part)
    c = sub_nat(c.pos_part, c.neg_part)

    add_sub_nat_assoc(
        a.pos_part, a.neg_part, 
        b.pos_part, b.neg_part, 
        c.pos_part, c.neg_part
    )
}

theorem add_from_nat(a: Nat, b: Nat) {
    from_nat(a) + from_nat(b) = from_nat(a + b)
}

theorem add_pos_nonneg(a: Int, b: Int) {
    a.is_positive and not b.is_negative implies (a + b).is_positive
} by {
    if b = 0 {
        a + b = a
        (a + b).is_positive
    } else {
        b.is_positive
        a = from_nat(abs(a))
        b = from_nat(abs(b))
        a + b = from_nat(abs(a) + abs(b))
        abs(a) + abs(b) != Nat.0
        (a + b).is_positive
    }
}

theorem add_neg_nonpos(a: Int, b: Int) {
    a.is_negative and not b.is_positive implies (a + b).is_negative
} by {
    (-a).is_positive
    not (-b).is_negative
    (-a + -b).is_positive
    (-(a + b)).is_positive
}

theorem add_nonneg_nonneg(a: Int, b: Int) {
    not a.is_negative and not b.is_negative implies not (a + b).is_negative
} by {
    if a = 0 and b = 0 {
        a + b = 0
        not (a + b).is_negative
    } 
    if a != 0 {
        a.is_positive
        (a + b).is_positive
        not (a + b).is_negative
    }
    if b != 0 {
        b.is_positive
        (a + b).is_positive
        not (a + b).is_negative
    }
}

theorem add_nonpos_nonpos(a: Int, b: Int) {
    not a.is_positive and not b.is_positive implies not (a + b).is_positive
} 

theorem add_comm_4(a: Int, b: Int, c: Int, d: Int) { 
    (a + b) + (c + d) = (a + c) + (b + d) 
} by {
    a + (b + c) = a + c + b
}

attributes Int {
    /// Subtracts one element from another using additive inverse.
    define sub(self, other: Int) -> Int {
        self + -other
    }
}

// Subtraction, and theorems about subtraction

theorem sub_zero_right(a: Int) { a - 0 = a } by {
    a - 0 = a + -(0)
    a - 0 = a + 0
    a - 0 = a
}

theorem sub_zero_left(a: Int) { 0 - a = -a } by {
    0 - a = 0 + -a
    0 - a = -a
}

theorem sub_anticomm(a: Int, b: Int) { 
    a - b = -(b - a) 
} by {
    -(b - a) = -(b + -a)
    -(b - a) = -b + -(-a)
    -(b - a) = -b + a
    -(b - a) = a + -b
}

theorem neg_sub(a: Int, b: Int) { -(a - b) = b - a }

theorem sub_self(a: Int) { a - a = 0 }

theorem sub_eq_zero(a: Int, b: Int) { a - b = 0 iff a = b } by { 
    a - b = 0 implies a = b 
}

theorem sub_add_left(a: Int, b: Int) {
    (a + b) - b = a
} by {
    a + (b + -b) = a
}

theorem sub_add_right(a: Int, b: Int) { a - (a + b) = -b }

theorem sub_imp_add(a: Int, b: Int, c: Int) { a - b = c implies b + c = a } by {
    (a - b) + b = a
}

theorem sub_negate_imp_add(a: Int, b: Int, c: Int) { 
    a - b = -c implies a + c = b 
}

theorem sub_cancel_right(a: Int, b: Int, c: Int) { 
    a - c = b - c implies a = b 
}

theorem sub_cancel_left(a: Int, b: Int, c: Int) { 
    a - b = a - c implies b = c 
}

theorem sub_add_cancel_left(a: Int, b: Int, c: Int) { 
    (a + b) - (a + c) = b - c 
} by {
    b + a + -(a + c) = b - c
}

theorem sub_add_cancel_right(a: Int, b: Int, c: Int) { 
    (a + c) - (b + c) = a - b 
}

// Comparison operators

attributes Int {
    /// `a < b` when `(a - b)` is positive
    define lt(self, other: Int) -> Bool {
        (other - self).is_positive
    }

    define lte(self, other: Int) -> Bool {
        self < other or self = other
    }

    define gt(self, other: Int) -> Bool {
        other < self
    }

    define gte(self, other: Int) -> Bool {
        other <= self
    }
}

from util import is_acyclic, is_transitive

theorem lt_trans(a: Int, b: Int, c: Int) {
    a < b and b < c implies a < c
} by {
    (b - a).is_positive
    (c - b).is_positive
    ((c - b) + (b - a)).is_positive
    (c - a).is_positive
    a < c
}

theorem int_is_transitive {
    is_transitive(Int.lt)
}

theorem lt_acyclic(a: Int, b: Int) {
    not (a < b and b < a) 
}

theorem int_is_acyclic {
    is_acyclic(Int.lt)
}

from order import Partial_Order, Linear_Order

instance Int: Partial_Order {
    let lt = Int.lt
}

theorem zero_lt_pos(a: Int) { 
    a.is_positive iff 0 < a 
}

theorem neg_lt_zero(a: Int) {
    a.is_negative iff a < 0
} 

theorem zero_lte_nonneg(a: Int) { 
    not a.is_negative iff 0 <= a 
} by {
    not a.is_negative implies 0 <= a 
}

theorem nonpos_lt_zero(a: Int) {
    not a.is_positive iff a <= 0
} by {
    not a.is_positive implies a <= 0
}

theorem zero_lte_from_nat(n: Nat) {
    0 <= from_nat(n)
}

theorem from_nat_gte_zero(n: Nat) {
    from_nat(n) >= 0
}

theorem int_total(a: Int, b: Int) { 
    a < b or a = b or a > b 
} by {
    (b - a) = 0 or (b - a).is_positive or (b - a).is_negative
}

instance Int: Linear_Order

theorem gt_is_not_lte(a: Int, b: Int) { 
    a > b iff not a <= b 
} by {
    if a > b {
        not a < b
        not a = b
        not a <= b
    }
    if not a > b {
        a <= b
    }
}

theorem lte_zero_abs(a: Int) {
    a <= 0 implies from_nat(abs(a)) = -a
}

theorem gte_zero_abs(a: Int) {
    a >= 0 implies from_nat(abs(a)) = a
}

// Integer-natural multiplication

attributes Int {
    /// Multiply this integer by a natural number.
    define mul_nat(self, n: Nat) -> Int {
        if self < 0 {
            -(from_nat(abs(self) * n))
        } else {
            from_nat(abs(self) * n)
        }
    }
}

theorem mul_nat_zero_right(a: Int) { 
    a.mul_nat(Nat.0) = 0 
} by {
    from_nat(abs(a) * Nat.0) = 0
    -from_nat(abs(a) * Nat.0) = 0
}

theorem mul_nat_zero_left(n: Nat) { 
    0.mul_nat(n) = 0 
} by {
    from_nat(abs(0) * n) = 0
}

theorem mul_nat_nonpos_left(a: Int, n: Nat) {
    a <= 0 implies a.mul_nat(n) = -(from_nat(abs(a) * n))
} by {
    if a = 0 {
        a.mul_nat(n) = -(from_nat(abs(a) * n))
    } else {
        a.mul_nat(n) = -(from_nat(abs(a) * n))
    }
}

theorem mul_nat_negate_left(a: Int, n: Nat) { 
    (-a).mul_nat(n) = -(a.mul_nat(n))
} by {
    if a = 0 { 
        (-a).mul_nat(n) = -(a.mul_nat(n)) 
    }
    if a > 0 {
        a.mul_nat(n) = from_nat(abs(a) * n)
        (-a) < 0
        (-a).mul_nat(n) = -(from_nat(abs(-a) * n))
        (-a).mul_nat(n) = -(from_nat(abs(a) * n))

        (-a).mul_nat(n) = -(a.mul_nat(n))
    } 
    if a < 0 {
        a.mul_nat(n) = -(from_nat(abs(a) * n))
        (-a) > 0
        (-a).mul_nat(n) = from_nat(abs(-a) * n)
        (-a).mul_nat(n) = from_nat(abs(a) * n)

        (-a).mul_nat(n) = -(a.mul_nat(n))
    }
}

theorem mul_nat_nonneg_suc(a: Int, n: Nat) {
    a >= 0 implies a.mul_nat(n.suc) = a.mul_nat(n) + a
} by {
    a.mul_nat(n.suc) = from_nat(abs(a) * n.suc)
    a.mul_nat(n.suc) = from_nat(abs(a) * n + abs(a))
    a.mul_nat(n.suc) = from_nat(abs(a) * n) +  from_nat(abs(a))
    from_nat(abs(a)) = a
    a.mul_nat(n.suc) = a.mul_nat(n) + a
}

theorem mul_nat_suc(a: Int, n: Nat) {
    a.mul_nat(n.suc) = (a.mul_nat(n) + a)
} by {
    if a < 0 {
        (-a) > 0
        a.mul_nat(n.suc) = -((-a).mul_nat(n.suc))
        a.mul_nat(n.suc) = -((-a).mul_nat(n) + -a)
        a.mul_nat(n.suc) = -(-(a.mul_nat(n)) + -a)
        a.mul_nat(n.suc) = -(-(a.mul_nat(n) + a))
        a.mul_nat(n.suc) = (a.mul_nat(n) + a)
    } else {
        a.mul_nat(n.suc) = (a.mul_nat(n) + a)
    }
}

theorem mul_nat_distrib_right(a: Int, b: Int, n: Nat) {
    (a + b).mul_nat(n) = (a.mul_nat(n) + b.mul_nat(n))
} by {
    define f(x: Nat) -> Bool { 
        mul_nat_distrib_right(a, b, x) 
    }
    Nat.induction(f)

    // Prove the base case
    (a + b).mul_nat(Nat.0) = 0
    a.mul_nat(Nat.0) = 0
    b.mul_nat(Nat.0) = 0

    (a + b).mul_nat(Nat.0) = a.mul_nat(Nat.0) + b.mul_nat(Nat.0)

    f(Nat.0)

    // Induct
    forall(x: Nat) {
        if f(x) {
            (a + b).mul_nat(x) = a.mul_nat(x) + b.mul_nat(x)

            (a + b).mul_nat(x.suc) = (a.mul_nat(x) + a) + (b.mul_nat(x) + b)
            
            (a + b).mul_nat(x.suc) = a.mul_nat(x.suc) + b.mul_nat(x.suc)

            f(x.suc)
        }
    }
}

theorem mul_nat_from_nat_left(a: Nat, b: Nat) { 
    from_nat(a).mul_nat(b) = from_nat(a * b) 
} by {
    if a = Nat.0 {
        from_nat(a).mul_nat(b) = from_nat(a * b)
    } else {
        from_nat(a) > 0
        abs(from_nat(a)) = a
        from_nat(a).mul_nat(b) = from_nat(abs(from_nat(a)) * b)
        from_nat(a).mul_nat(b) = from_nat(a * b)
    }
}

// Integer-integer multiplication

attributes Int {
    /// The product of two integers.
    define mul(self, n: Int) -> Int {
        if n > 0 {
            self.mul_nat(abs(n))
        } else {
            -(self.mul_nat(abs(n)))
        }
    }

    /// The integer formed by appending a digit to this integer in base 10.
    define read(self, other: Int) -> Int { 10 * self + other }
}

theorem mul_zero_right(a: Int) { a * 0 = 0 } by {
    a * 0 = -(a.mul_nat(Nat.0))
    a * 0 = -(0)
}

theorem mul_nat_from_nat_right(a: Int, n: Nat) { 
    a.mul_nat(n) = (a * from_nat(n)) 
} by {
    if n = Nat.0 {
        a.mul_nat(n) = (a * from_nat(n)) 
    } else {
        from_nat(n) > 0
        a * from_nat(n) = a.mul_nat(abs(from_nat(n)))
    }
}

theorem mul_nonneg_right(a: Int, b: Int) { b >= 0 implies a * b = a.mul_nat(abs(b)) } by {
    if b = 0 {
        a * b = 0
        a.mul_nat(abs(b)) = 0
        a * b = a.mul_nat(abs(b))
    } else {
        a * b = a.mul_nat(abs(b))
    }
}

theorem mul_nonneg_nonneg(a: Int, b: Int) {
    a >= 0 and b >= 0 implies a * b = from_nat(abs(a) * abs(b))
} by {
    a * b = a.mul_nat(abs(b))
}

theorem mul_nonneg_nonpos(a: Int, b: Int) {
    a >= 0 and b <= 0 implies a * b = -(from_nat(abs(a) * abs(b)))
} by {
    a * b = -(a.mul_nat(abs(b)))
}

theorem mul_nonpos_nonneg(a: Int, b: Int) {
    a <= 0 and b >= 0 implies a * b = -(from_nat(abs(a) * abs(b)))
} by {
    a * b = a.mul_nat(abs(b))
}

theorem mul_nonpos_nonpos(a: Int, b: Int) {
    a <= 0 and b <= 0 implies a * b = from_nat(abs(a) * abs(b))
} by {
    a * b = -(a.mul_nat(abs(b)))
    a * b = -(-(from_nat(abs(a) * abs(b))))
}

theorem mul_nonneg_nonneg_nonneg(a: Int, b: Int) {
    a >= 0 and b >= 0 implies (a * b) >= 0
} by {
    a * b = from_nat(abs(a) * abs(b))
}

theorem mul_nonneg_nonpos_nonpos(a: Int, b: Int) {
    a >= 0 and b <= 0 implies (a * b) <= 0
} by {
    a * b = -(from_nat(abs(a) * abs(b)))
}

theorem mul_nonpos_nonneg_nonpos(a: Int, b: Int) {
    a <= 0 and b >= 0 implies (a * b) <= 0
} by {
    a * b = -(from_nat(abs(a) * abs(b)))
}

theorem mul_nonpos_nonpos_nonneg(a: Int, b: Int) {
    a <= 0 and b <= 0 implies (a * b) >= 0
} by {
    a * b = from_nat(abs(a) * abs(b))
}

theorem mul_zero_left(a: Int) {
    0 * a = 0
} 

theorem mul_comm(a: Int, b: Int) { a * b = b * a } by {
    if a > 0 {
        if b > 0 {
            a * b = from_nat(abs(a) * abs(b))
            b * a = from_nat(abs(b) * abs(a))
            a * b = b * a
        } else {
            a * b = -(from_nat(abs(a) * abs(b)))
            b * a = -(from_nat(abs(b) * abs(a)))
            a * b = b * a
        }
    } else {
        if b > 0 {
            a * b = -(from_nat(abs(a) * abs(b)))
            b * a = -(from_nat(abs(b) * abs(a)))
            a * b = b * a
        } else {
            a * b = from_nat(abs(a) * abs(b))
            b * a = from_nat(abs(b) * abs(a))
            a * b = b * a
        }
    }
}

theorem mul_one_right(a: Int) { a * 1 = a } by {
    1 > 0
    a * 1 = a.mul_nat(Nat.1)
    if a > 0 {
        a * 1 = from_nat(abs(a) * Nat.1)
        a * 1 = from_nat(abs(a))
        a * 1 = a
    } else {
        a * 1 = -(from_nat(abs(a) * Nat.1))
        from_nat(abs(a)) = -a
        a * 1 = a
    }
}

theorem mul_one_left(a: Int) { 1 * a = a }

theorem mul_neg_left(a: Int, b: Int) { 
    -a * b = -(a * b) 
} by {
    if a > 0 {
        if b > 0 {
            -a * b = -from_nat(abs(a) * abs(b))
            a * b = from_nat(abs(a) * abs(b))

            -a * b = -(a * b)
        } else {
            -a * b = from_nat(abs(a) * abs(b))
            a * b = -from_nat(abs(a) * abs(b))

            -a * b = -(a * b)
        }
    } else {
        if b > 0 {
            -a * b = from_nat(abs(a) * abs(b))
            a * b = -from_nat(abs(a) * abs(b))

            -a * b = -(a * b)
        } else {
            -a * b = -from_nat(abs(a) * abs(b))
            a * b = from_nat(abs(a) * abs(b))

            -a * b = -(a * b)
        }
    }
}

theorem mul_neg_right(a: Int, b: Int) { 
    a * -b = -(a * b) 
}

theorem mul_distrib_nonneg_right(a: Int, b: Int, c: Int) {
    c >= 0 implies (a + b) * c = a * c + b * c
} by {
    (a + b) * c = (a + b).mul_nat(abs(c))
    (a + b) * c = a.mul_nat(abs(c)) + b.mul_nat(abs(c))
    (a + b) * c = a * c + b * c
}

theorem mul_distrib_right(a: Int, b: Int, c: Int) { (a + b) * c = a * c + b * c } by {
    if c < 0 {
        (-c) > 0
        (a + b) * -(c) = a * -(c) + b * -(c)
        (a + b) * c = a * c + b * c
    } else {
        (a + b) * c = a * c + b * c
    }
}

theorem mul_distrib_left(a: Int, b: Int, c: Int) { 
    a * (b + c) = a * b + a * c 
} 

theorem mul_sub_distrib_right(a: Int, b: Int, c: Int) { 
    (a - b) * c = a * c - b * c 
} by {
    (a - b) * c = (a + -b) * c
}

theorem mul_sub_distrib_left(a: Int, b: Int, c: Int) { 
    a * (b - c) = a * b - a * c 
} by {
    a * (b - c) = a * (b + -(c))
}

theorem abs_mul(a: Int, b: Int) { 
    abs(a * b) = abs(a) * abs(b) 
} by {
    if a > 0 {
        if b > 0 {
            abs(a * b) = abs(a) * abs(b)
        } else {
            abs(a * b) = abs(a) * abs(b)
        }
    } else {
        if b > 0 {
            abs(a * b) = abs(a) * abs(b)
        } else {
            abs(a * b) = abs(a) * abs(b)
        }
    }
}
