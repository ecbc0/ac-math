from nat.nat_divide import Nat

numerals Nat

attributes Nat {
    define factorial(self) -> Nat {
        match self {
            Nat.0 {
                1
            }
            Nat.suc(pred) {
                self * pred.factorial
            }
        }
    }
    let ! = Nat.factorial
}

theorem factorial_zero {
    0.! = 1
}

theorem factorial_one {
    1.! = 1
}

theorem test_factorial { 
    3.! = 6 
} by {
    3.! = (3 * 2.!) 
    2.! = (2 * 1.!)
    1.! = 1
    2 * 1 = 2
    3 * 2 = (3 + 3)
    (3 + 3) = (3 + 2) + 1
    (3 + 2) = (3 + 1) + 1
    (3 + 1) = 4
}

theorem factorial_step(n: Nat) {
    (n + 1).! = (n + 1) * n.!
}

theorem divides_factorial(k: Nat, n: Nat) {
    k != 0 and k <= n implies k.divides(n.!)
} by {
    define f(x: Nat) -> Bool {
        divides_factorial(k, x)
    }
    not k < 0
    f(0)
    forall(x: Nat) {
        if f(x) {
            (x + 1).! = (x + 1) * x.!
            if k != 0 and k <= x {
                // f(x)
                k.divides(x.!)
                k.divides((x + 1).!)
                f(x + 1)
            }
            if k = x + 1 {
                k.divides((x + 1).!)
                f(x + 1)
            }
            f(x + 1)
        }
    }
    divides_factorial(k, n)
}

theorem factorial_nondecreasing(n: Nat) { n.! <= (n + 1).! } by {
    n.! <= (n + 1) * n.!
}

theorem lte_one_factorial(a: Nat) { 
    1 <= a.! 
} by {
    1 <= 0.!
    lte_one_factorial(0)
    forall(x: Nat) {
        if lte_one_factorial(x) {
            1 <= x.!
            x.! <= (x + 1).!
            1 <= (x + 1).!
            lte_one_factorial(x + 1)
        }
    }
}